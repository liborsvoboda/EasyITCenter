<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NTypewriter.CodeModel</name>
    </assembly>
    <members>
        <member name="T:NTypewriter.CodeModel.IAttribute">
            <summary>
            Represents a declared attribute on a symbol.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IAttribute.AttributeClass">
            <summary>
            The attribute class.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IAttribute.FullName">
            <summary>
            The full original name of the attribute including namespace and containing class names.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IAttribute.Name">
            <summary>
            The name of the attribute without Attribute postfix.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IAttribute.Arguments">
            <summary>
            The arguments of the attribute.
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IAttributeArgument">
            <summary>
            Represents attribute argument.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IAttributeArgument.IsFromConstructor">
            <summary>
            Determines if arguments is present in the attribute constructor
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IAttributeArgument.Name">
            <summary>
            The name of the argument.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IAttributeArgument.Type">
            <summary>
            The type of the argument.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IAttributeArgument.Value">
            <summary>
            The value of the argument
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IClass">
            <summary>
            Represents a class.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IClass.BaseClass">
            <summary>
            The declared base class of this class, or null. Returns null if the class inherits from System.Object.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IClass.Constructors">
            <summary>
            All instance constructors defined in the class.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IClass.Events">
            <summary>
            All events defined in the class.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IClass.IsSealed">
            <summary>
            Determines if the class is sealed
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IClass.Fields">
            <summary>
            All fields defined in the class.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IClass.HasBaseClass">
            <summary>
            Determines if the class has base class other than System.Object.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IClass.Methods">
            <summary>
            All methods defined in the class.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IClass.NestedClasses">
            <summary>
            All nested classes defined in the class.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IClass.NestedDelegates">
            <summary>
            All nested delegates defined in the class.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IClass.NestedEnums">
            <summary>
            All nested enums defined in the class.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IClass.NestedInterfaces">
            <summary>
            All nested interfaces defined in the class.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IClass.Properties">
            <summary>
            All properties defined in the class.
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.ICodeModel">
            <summary>
            Representation of the code.
            ICodeModel is the entry point of accessing information about the code.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ICodeModel.Classes">
            <summary>
            All classes defined in the code
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ICodeModel.Delegates">
            <summary>
            All delegates defined in the code
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ICodeModel.Enums">
            <summary>
            All enums defined in the code
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ICodeModel.Interfaces">
            <summary>
            All interfaces defined in the code
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ICodeModel.Structs">
            <summary>
            All structs defined in the code
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IDelegate">
            <summary>
            Represents a delegate.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IDelegate.Parameters">
            <summary>
            The parameters of this delegate. If this delegate has no parameters, returns an empty collection.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IDelegate.ReturnType">
            <summary>
            The return type of the delegate.
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IDocumentationCommentXml">
            <summary>
            Represents a documentation XML comment.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IDocumentationCommentXml.Params">
            <summary>
            Collection of the param tag.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IDocumentationCommentXml.Returns">
            <summary>
            The content of the return tag.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IDocumentationCommentXml.Summary">
            <summary>
            The content of the summary tag.
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IDocumentationCommentXmlParam">
            <summary>
            Represents a documentation XML param tag.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IDocumentationCommentXmlParam.Name">
            <summary>
            The value of the name attribute
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IDocumentationCommentXmlParam.Value">
            <summary>
            The content of the param tag
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IEnum">
            <summary>
            Represents an enum.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IEnum.Values">
            <summary>
            All values defined in the enum.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IEnum.UnderlyingType">
            <summary>
            Gets the underlying type
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IEnumValue">
            <summary>
            Represents a named constant which is a member of an enum.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IEnumValue.Name">
            <summary>
            The name of the enum member
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IEnumValue.Value">
            <summary>
            The value of the enum member
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IEnumValue.Attributes">
            <summary>
            All attributes declared on the enum value.
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IEvent">
            <summary>
            Represents an event.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IEvent.IsSealed">
            <summary>
            Determines if the event is sealed
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IEvent.Type">
            <summary>
            The type of the event.
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IField">
            <summary>
            Represents a field.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IField.ConstantValue">
            <summary>
            Constant value assigned to this field
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IField.HasConstantValue">
            <summary>
             Returns false if the field wasn't declared as "const", or constant value was omitted or erroneous. True otherwise.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IField.IsConst">
            <summary>
            Determines if the field was declared as "const".
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IField.IsReadOnly">
            <summary>
            Determines if the field was declared as "readonly".
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IField.Type">
            <summary>
            The type of the field.
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IInterface">
            <summary>
            Represents a interface.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IInterface.Events">
            <summary>
            All events defined in the interface.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IInterface.Methods">
            <summary>
            All methods defined in the interface.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IInterface.Properties">
            <summary>
            All properties defined in the interface.
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.ILocation">
            <summary>
            A program location in source code.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ILocation.IsInSource">
            <summary>
             Returns true if the location represents a specific location in a source code file.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ILocation.Path">
            <summary>
            Path, or null if the span represents an invalid value.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ILocation.StartLinePosition">
            <summary>
            Gets the first line number
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ILocation.EndLinePosition">
            <summary>
            Gets the last line number
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IMethod">
            <summary>
            Represents a method.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IMethod.IsAsync">
            <summary>
             Determines if the method is an async method
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IMethod.IsInitOnly">
            <summary>        
            Returns true for 'init' set accessors, and false otherwise.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IMethod.IsGeneric">
            <summary>
            Determines if the method is generic (it has any type parameters)
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IMethod.IsOverride">
            <summary>
            Determines if the method is override
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IMethod.IsSealed">
            <summary>
            Determines if the method is sealed
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IMethod.Parameters">
            <summary>
            All parameters of the method.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IMethod.ReturnType">
            <summary>
            The return type of the method.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IMethod.TypeParameters">
            <summary>
            The type parameters of the method. If the method is not generic, returns an empty collection.
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.INamedType">
            <summary>
            Represents a type other than an array, a pointer, a type parameter.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.INamedType.IsNested">
            <summary>
            Determines if the type is declared inside other type
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.INamedType.TypeParameters">
            <summary>
            The type parameters of the type. If the type is not generic, returns an empty collection.
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IParameter">
            <summary>
            Represents a method parameter.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IParameter.DefaultValue">
            <summary>
            The default value of the parameter
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IParameter.HasDefaultValue">
            <summary>
            Determines if the parameter has a default value to be passed when no value is provided as an argument to a call.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IParameter.Type">
            <summary>
            The type of the parameter
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IProperty">
            <summary>
            Represents a property.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IProperty.IsIndexer">
            <summary>
            Determines if the property is really an indexer.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IProperty.IsWriteOnly">
            <summary>
            Determines if the property is a write-only property
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IProperty.IsReadOnly">
            <summary>
            Determines if the property is a read-only property
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IProperty.IsSealed">
            <summary>
            Determines if the property is sealed
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IProperty.Type">
            <summary>
            The type of the property.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IProperty.GetMethod">
            <summary>
            Getter
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IProperty.SetMethod">
            <summary>
            Setter
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IStruct">
            <summary>
            Represents a struct.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IStruct.Constructors">
            <summary>
            All instance constructors defined in the struct.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IStruct.Events">
            <summary>
            All events defined in the struct.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IStruct.Fields">
            <summary>
            All fields defined in the struct.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IStruct.Methods">
            <summary>
            All methods defined in the struct.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IStruct.NestedClasses">
            <summary>
            All nested classes defined in the struct.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IStruct.NestedDelegates">
            <summary>
            All nested delegates defined in the struct.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IStruct.NestedEnums">
            <summary>
            All nested enums defined in the struct.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IStruct.NestedInterfaces">
            <summary>
            All nested interfaces defined in the struct.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IStruct.Properties">
            <summary>
            All properties defined in the struct.
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.ISymbolBase">
            <summary>
            Represents a symbol (namespace, class, method, parameter, etc.)
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.Attributes">
            <summary>
            All attributes declared on the symbol.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.DocComment">
            <summary>
            The XML documentation for the comment associated with the symbol.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsAbstract">
            <summary>
            Determines if the symbol is abstract
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsVirtual">
            <summary>
            Determines if the symbol is virtual
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsArray">
            <summary>
            Determines if the symbol is an array
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsEvent">
            <summary>
            Determines if the symbol is an event
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsErrorType">
            <summary>
            Determines if the symbol represents an error in syntax;
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsField">
            <summary>
            Determines if the symbol is a field
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsMethod">
            <summary>
            Determines if the symbol is a method
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsProperty">
            <summary>
            Determines if the symbol is a property
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsPublic">
            <summary>
            Determines if the symbol is public
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsPrivate">
            <summary>
            Determines if the symbol is private
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsProtected">
            <summary>
            Determines if the symbol is protected
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsInternal">
            <summary>
            Determines if the symbol is internal
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsProtectedInternal">
            <summary>
            Determines if the symbol is protected internal
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsPrivateProtected">
            <summary>
            Determines if the symbol is private protected 
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsStatic">
            <summary>
            Determines if the symbol is static
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.IsTypeParameter">
            <summary>
            Determines if the symbol is a type parameter
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.ContainingType">
            <summary>
            The type that contains this symbol.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.FullName">
            <summary>
            The Namespace + the name of the symbol
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.Name">
            <summary>
            The name of the symbol
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.BareName">
            <summary>
            The prefix of the Name that consists only letters and digits.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.Namespace">
            <summary>
            The nearest enclosing namespace for the symbol.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ISymbolBase.Locations">
            <summary>
            Gets the locations where the symbol was originally defined, either in source or metadata. Some symbols (for example, partial classes) may be defined in more than one location.
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.IType">
            <summary>
            Represents a type.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.BaseType">
            <summary>
            The declared base type of this type, or null. Returns null if the class inherits from System.Object or if the type is a value type.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsAnonymousType">
            <summary>
            Determines if the type is anonymous
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsCollection">
            <summary>
            Determines if the type is a collection
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsDynamic">
            <summary>
            Determines if the type is a dynamic
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsDelegate">
            <summary>
            Determines if the type is a delegate
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsInterface">
            <summary>
            Determines if the type is an interface
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsEnum">
            <summary>
            Determines if the type is an enum
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsEnumerable">
            <summary>
            Determines if the type is enumerable
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsGeneric">
            <summary>
            Determines if the type is generic
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsNullable">
            <summary>
            Determines if the type is nullable
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsPrimitive">
            <summary>
            Determines if the type is primitive
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsRecord">
            <summary>
            Determines if the type is a record
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsTuple">
            <summary>
            Determines if the type is a tuple
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsReferenceType">
            <summary>
            Determines if the type is a reference type
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.IsValueType">
            <summary>
            Determines if the type is a value type
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.ArrayType">
            <summary>
            The type of the elements stored in the array.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.Interfaces">
            <summary>
            The set of interfaces that this type directly implements. This set does not include interfaces that are base interfaces of directly implemented interfaces.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.AllInterfaces">
            <summary>
            The list of all interfaces of which this type is a declared subtype, excluding this type itself.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.IType.TypeArguments">
            <summary>
            The type arguments that have been substituted for the type parameters
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.ITypedConstant">
            <summary>
            Represents a typed constant.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ITypedConstant.Type">
            <summary>
            The type of the constant.
            </summary>
        </member>
        <member name="P:NTypewriter.CodeModel.ITypedConstant.Value">
            <summary>
            The value for a non-array constant.
            </summary>
        </member>
        <member name="T:NTypewriter.CodeModel.ITypeParameter">
            <summary>
            Represents a generic type parameter 
            </summary>
        </member>
    </members>
</doc>
