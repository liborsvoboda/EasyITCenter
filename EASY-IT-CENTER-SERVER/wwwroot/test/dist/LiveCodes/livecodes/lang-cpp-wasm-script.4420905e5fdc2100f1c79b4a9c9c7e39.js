"use strict";(()=>{var C=typeof btoa=="function",d=typeof Buffer=="function",R=typeof TextDecoder=="function"?new TextDecoder:void 0,u=typeof TextEncoder=="function"?new TextEncoder:void 0,k="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",l=Array.prototype.slice.call(k),_=(t=>{let e={};return t.forEach((s,o)=>e[s]=o),e})(l);var i=String.fromCharCode.bind(String),F=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):t=>new Uint8Array(Array.prototype.slice.call(t,0)),B=t=>t.replace(/=/g,"").replace(/[+\/]/g,e=>e=="+"?"-":"_");var A=t=>{let e,s,o,n,r="",a=t.length%3;for(let p=0;p<t.length;){if((s=t.charCodeAt(p++))>255||(o=t.charCodeAt(p++))>255||(n=t.charCodeAt(p++))>255)throw new TypeError("invalid character found");e=s<<16|o<<8|n,r+=l[e>>18&63]+l[e>>12&63]+l[e>>6&63]+l[e&63]}return a?r.slice(0,a-3)+"===".substring(a):r},g=C?t=>btoa(t):d?t=>Buffer.from(t,"binary").toString("base64"):A,T=d?t=>Buffer.from(t).toString("base64"):t=>{let s=[];for(let o=0,n=t.length;o<n;o+=4096)s.push(i.apply(null,t.subarray(o,o+4096)));return g(s.join(""))};var S=t=>{if(t.length<2){var e=t.charCodeAt(0);return e<128?t:e<2048?i(192|e>>>6)+i(128|e&63):i(224|e>>>12&15)+i(128|e>>>6&63)+i(128|e&63)}else{var e=65536+(t.charCodeAt(0)-55296)*1024+(t.charCodeAt(1)-56320);return i(240|e>>>18&7)+i(128|e>>>12&63)+i(128|e>>>6&63)+i(128|e&63)}},$=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,E=t=>t.replace($,S),f=d?t=>Buffer.from(t,"utf8").toString("base64"):u?t=>T(u.encode(t)):t=>g(E(t)),h=(t,e=!1)=>e?B(f(t)):f(t);var L=(t,e="text/javascript")=>`data:${e};charset=UTF-8;base64,`+h(t);var x=t=>{try{return new Worker(L(t))}catch{return new Worker(URL.createObjectURL(new Blob([t],{type:"application/javascript"})))}};var y=["esm.sh","skypack","esm.run","jsdelivr.esm","fastly.jsdelivr.esm","gcore.jsdelivr.esm","testingcf.jsdelivr.esm","jsdelivr.b-cdn.esm","jspm"],U=["jsdelivr","fastly.jsdelivr","unpkg","gcore.jsdelivr","testingcf.jsdelivr","jsdelivr.b-cdn","npmcdn"],j=["jsdelivr.gh","fastly.jsdelivr.gh","statically","gcore.jsdelivr.gh","testingcf.jsdelivr.gh","jsdelivr.b-cdn.gh"],c={getModuleUrl:(t,{isModule:e=!0,defaultCDN:s="esm.sh"}={})=>{t=t.replace(/#nobundle/g,"");let o=b(t,e,s);return o||(e?"https://esm.sh/"+t:"https://cdn.jsdelivr.net/npm/"+t)},getUrl:(t,e)=>t.startsWith("http")||t.startsWith("data:")?t:b(t,!1,e||D())||t,cdnLists:{npm:U,module:y,gh:j},checkCDNs:async(t,e)=>{let s=[e,...c.cdnLists.npm].filter(Boolean);for(let o of s)try{if((await fetch(c.getUrl(t,o),{method:"HEAD"})).ok)return o}catch{}return c.cdnLists.npm[0]}},D=()=>{if(globalThis.appCDN)return globalThis.appCDN;try{return new URL(location.href).searchParams.get("appCDN")||c.cdnLists.npm[0]}catch{return c.cdnLists.npm[0]}},b=(t,e,s)=>{let o=e&&t.startsWith("unpkg:")?"?module":"";t.startsWith("gh:")?t=t.replace("gh",j[0]):t.includes(":")||(t=(s||(e?y[0]:U[0]))+":"+t);for(let n of P){let[r,a]=n;if(r.test(t))return t.replace(r,a)+o}return null},P=[[/^(esm\.sh:)(.+)/i,"https://esm.sh/$2"],[/^(npm:)(.+)/i,"https://esm.sh/$2"],[/^(node:)(.+)/i,"https://esm.sh/$2"],[/^(jsr:)(.+)/i,"https://esm.sh/jsr/$2"],[/^(skypack:)(.+)/i,"https://cdn.skypack.dev/$2"],[/^(jsdelivr:)(.+)/i,"https://cdn.jsdelivr.net/npm/$2"],[/^(fastly\.jsdelivr:)(.+)/i,"https://fastly.jsdelivr.net/npm/$2"],[/^(gcore\.jsdelivr:)(.+)/i,"https://gcore.jsdelivr.net/npm/$2"],[/^(testingcf\.jsdelivr:)(.+)/i,"https://testingcf.jsdelivr.net/npm/$2"],[/^(jsdelivr\.b-cdn:)(.+)/i,"https://jsdelivr.b-cdn.net/npm/$2"],[/^(jsdelivr\.gh:)(.+)/i,"https://cdn.jsdelivr.net/gh/$2"],[/^(fastly\.jsdelivr\.gh:)(.+)/i,"https://fastly.jsdelivr.net/gh/$2"],[/^(gcore\.jsdelivr\.gh:)(.+)/i,"https://gcore.jsdelivr.net/gh/$2"],[/^(testingcf\.jsdelivr\.gh:)(.+)/i,"https://testingcf.jsdelivr.net/gh/$2"],[/^(jsdelivr\.b-cdn\.gh:)(.+)/i,"https://jsdelivr.b-cdn.net/gh/$2"],[/^(statically:)(.+)/i,"https://cdn.statically.io/gh/$2"],[/^(esm\.run:)(.+)/i,"https://esm.run/$2"],[/^(jsdelivr\.esm:)(.+)/i,"https://cdn.jsdelivr.net/npm/$2/+esm"],[/^(fastly\.jsdelivr\.esm:)(.+)/i,"https://fastly.jsdelivr.net/npm/$2/+esm"],[/^(gcore\.jsdelivr\.esm:)(.+)/i,"https://gcore.jsdelivr.net/npm/$2/+esm"],[/^(testingcf\.jsdelivr\.esm:)(.+)/i,"https://testingcf.jsdelivr.net/npm/$2/+esm"],[/^(jsdelivr\.b-cdn\.esm:)(.+)/i,"https://jsdelivr.b-cdn.net/npm/$2/+esm"],[/^(jspm:)(.+)/i,"https://jspm.dev/$2"],[/^(esbuild:)(.+)/i,"https://esbuild.vercel.app/$2"],[/^(bundle\.run:)(.+)/i,"https://bundle.run/$2"],[/^(unpkg:)(.+)/i,"https://unpkg.com/$2"],[/^(npmcdn:)(.+)/i,"https://npmcdn.com/$2"],[/^(bundlejs:)(.+)/i,"https://deno.bundlejs.com/?file&q=$2"],[/^(bundle:)(.+)/i,"https://deno.bundlejs.com/?file&q=$2"],[/^(deno:)(.+)/i,"https://deno.bundlejs.com/?file&q=https://deno.land/x/$2/mod.ts"],[/^(https:\/\/deno\.land\/.+)/i,"https://deno.bundlejs.com/?file&q=$1"],[/^(github:|https:\/\/github\.com\/)(.[^\/]+?)\/(.[^\/]+?)\/(?!releases\/)(?:(?:blob|raw)\/)?(.+?\/.+)/i,"https://deno.bundlejs.com/?file&q=https://cdn.jsdelivr.net/gh/$2/$3@$4"],[/^(gist\.github:)(.+?\/[0-9a-f]+\/raw\/(?:[0-9a-f]+\/)?.+)$/i,"https://gist.githack.com/$2"],[/^(gitlab:|https:\/\/gitlab\.com\/)([^\/]+.*\/[^\/]+)\/(?:raw|blob)\/(.+?)(?:\?.*)?$/i,"https://deno.bundlejs.com/?file&q=https://gl.githack.com/$2/raw/$3"],[/^(bitbucket:|https:\/\/bitbucket\.org\/)([^\/]+\/[^\/]+)\/(?:raw|src)\/(.+?)(?:\?.*)?$/i,"https://deno.bundlejs.com/?file&q=https://bb.githack.com/$2/raw/$3"],[/^(bitbucket:)snippets\/([^\/]+\/[^\/]+)\/revisions\/([^\/\#\?]+)(?:\?[^#]*)?(?:\#file-(.+?))$/i,"https://bb.githack.com/!api/2.0/snippets/$2/$3/files/$4"],[/^(bitbucket:)snippets\/([^\/]+\/[^\/\#\?]+)(?:\?[^#]*)?(?:\#file-(.+?))$/i,"https://bb.githack.com/!api/2.0/snippets/$2/HEAD/files/$3"],[/^(bitbucket:)\!api\/2.0\/snippets\/([^\/]+\/[^\/]+\/[^\/]+)\/files\/(.+?)(?:\?.*)?$/i,"https://bb.githack.com/!api/2.0/snippets/$2/files/$3"],[/^(api\.bitbucket:)2.0\/snippets\/([^\/]+\/[^\/]+\/[^\/]+)\/files\/(.+?)(?:\?.*)?$/i,"https://bb.githack.com/!api/2.0/snippets/$2/files/$3"],[/^(rawgit:)(.+?\/[0-9a-f]+\/raw\/(?:[0-9a-f]+\/)?.+)$/i,"https://gist.githack.com/$2"],[/^(rawgit:|https:\/\/raw\.githubusercontent\.com)(\/[^\/]+\/[^\/]+|[0-9A-Za-z-]+\/[0-9a-f]+\/raw)\/(.+)/i,"https://deno.bundlejs.com/?file&q=https://raw.githack.com/$2/$3"]];var{getUrl:m,getModuleUrl:H}=c,v="5.5.2";var w=m("@chriskoch/cpp-wasm@1.0.2/");var q="0.6.64",V=m(`malinajs@${q}/malina.js`);var Z=`https://typescript.azureedge.net/cdn/${v}/monaco/min/vs`;var J=m(`typescript@${v}/lib/typescript.js`);var M=async t=>{try{let e=t+"shared.js",s=await fetch(e);if(!s.ok)throw new Error;return`
var window = self;

${(await s.text()).replace("https://cdn.jsdelivr.net/npm/@chriskoch/cpp-wasm@1.0.1/",t).replace("https://cdn.jsdelivr.net/npm/@chriskoch/cpp-wasm/memfs",t+"memfs")};

addEventListener('message', async (e) => {
  const runCode = async (code, input) => {
    let output = null;
    let error = null;
    let exitCode = 0;
    try {
      window.CPP.memfs.setStdinStr(input ?? "");
      await window.CPP.compileLinkRun(code);
      output = window.CPP_OUTPUT;
    } catch (err) {
      error = err.message ?? err;
      exitCode = err.code ?? 1;
    } finally {
      window.CPP.memfs.setStdinStr("");
      window.CPP_OUTPUT = "";
    }
    return {input, output, error, exitCode};
  };

  await window.CPP_READY;
  const code = e.data.code;
  const input = e.data.input;
  const result = code.trim() ? await runCode(code, input) : {};
  postMessage(result);
});

window.CPP_READY.then(() => postMessage({ loaded: true }));
`}catch{throw new Error("failed loading C++/Clang compiler")}};livecodes.cpp=livecodes.cpp||{};livecodes.cpp.run=livecodes.cpp.run||(t=>new Promise(e=>{let s="";livecodes.cpp.input=t,livecodes.cpp.output=null,document.querySelectorAll('script[type="text/cpp"]').forEach(n=>s+=n.innerHTML+`
`),livecodes.cpp.worker.onmessage=function(n){if(n.data.loaded){console.log("Clang compiler loaded!"),livecodes.cpp.worker.loaded=!0;return}let r=n.data;r.error!=null?console.error(r.error):r.output!=null&&console.log(r.output),livecodes.cpp.input=r.input,livecodes.cpp.output=r.output,livecodes.cpp.error=r.error,livecodes.cpp.exitCode=r.exitCode,livecodes.cpp.ready=!0,e(r)},livecodes.cpp.worker.postMessage({code:s,input:`${String(t??"")}`})}));livecodes.cpp.loaded=new Promise(async function(t){let e=setInterval(()=>{if(livecodes.cpp.ready)return clearInterval(e),t()},50)});window.addEventListener("load",async()=>{livecodes.cpp.ready=!1,parent.postMessage({type:"loading",payload:!0},"*");let t=await M(w);(()=>{livecodes.cpp.worker||(console.log("Loading Clang compiler..."),livecodes.cpp.worker=x(t))})(),await livecodes.cpp.run(livecodes.cpp.input),parent.postMessage({type:"loading",payload:!1},"*")});})();
