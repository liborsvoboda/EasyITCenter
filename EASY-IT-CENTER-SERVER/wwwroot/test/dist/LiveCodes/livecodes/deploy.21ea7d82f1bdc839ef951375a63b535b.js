var P='<!doctype html><html><head><script id="message-script" data-env="development">window.addEventListener("message",(function(e){var t=e.data.result||e.data.html;t&&(document.write(t),document.close())}))<\/script></head><body></body></html>';var N='<div id="deploy-container" class="modal-container"><div class="modal-title">Deploy to GitHub Pages</div><ul id="deploy-tabs" class="modal-tabs"><li data-target="new-repo" class="active">Create New Repo</li><li data-target="existing-repo">Existing Repo</li></ul><div id="deploy-screens" class="modal-screen-container"><div id="new-repo" class="tab-content active"><div class="modal-screen"><form id="new-repo-form"><div><label for="new-repo-name">Repo Name <span id="new-repo-name-error" class="error"></span></label> <input type="text" id="new-repo-name" placeholder="Required"></div><div><label for="new-repo-message">Commit Message</label> <input type="text" id="new-repo-message" placeholder="Optional"></div><div class="padded"><input type="checkbox" id="new-repo-source"> <label for="new-repo-source">Commit source code (public)</label></div><button id="new-repo-btn" class="wide-button" type="submit">Deploy</button></form><div class="description">A new <strong>public</strong> repo will be created. The result page will be pushed to <span class="code">gh-pages</span> branch.</div></div></div><div id="existing-repo" class="tab-content"><div class="modal-screen"><form id="existing-repo-form"><div><label for="existing-repo-name">Repo Name</label> <input type="text" id="existing-repo-name" autocomplete="off" placeholder="Loading..."></div><div><label for="existing-repo-message">Commit Message</label> <input type="text" id="existing-repo-message" placeholder="Optional"></div><div class="padded"><input type="checkbox" id="existing-repo-source"> <label for="existing-repo-source">Commit source code (public)</label></div><button id="existing-repo-btn" class="wide-button" type="submit">Deploy</button></form><div class="description">A new commit will be added to <span class="code">gh-pages</span> branch.</div></div></div></div></div>';var _=e=>e.replace(/{{APP_VERSION}}/g,"30").replace(/{{SDK_VERSION}}/g,"0.5.0").replace(/{{COMMIT_SHA}}/g,"").replace(/{{REPO_URL}}/g,"").replace(/{{DOCS_BASE_URL}}/g,"/docs/"),W=_(P);var O=_(N);var G=["esm.sh","skypack","esm.run","jsdelivr.esm","fastly.jsdelivr.esm","gcore.jsdelivr.esm","testingcf.jsdelivr.esm","jsdelivr.b-cdn.esm","jspm"],J=["jsdelivr","fastly.jsdelivr","unpkg","gcore.jsdelivr","testingcf.jsdelivr","jsdelivr.b-cdn","npmcdn"],V=["jsdelivr.gh","fastly.jsdelivr.gh","statically","gcore.jsdelivr.gh","testingcf.jsdelivr.gh","jsdelivr.b-cdn.gh"],L={getModuleUrl:(e,{isModule:t=!0,defaultCDN:o="esm.sh"}={})=>{e=e.replace(/#nobundle/g,"");let n=z(e,t,o);return n||(t?"https://esm.sh/"+e:"https://cdn.jsdelivr.net/npm/"+e)},getUrl:(e,t)=>e.startsWith("http")||e.startsWith("data:")?e:z(e,!1,t||Ce())||e,cdnLists:{npm:J,module:G,gh:V},checkCDNs:async(e,t)=>{let o=[t,...L.cdnLists.npm].filter(Boolean);for(let n of o)try{if((await fetch(L.getUrl(e,n),{method:"HEAD"})).ok)return n}catch{}return L.cdnLists.npm[0]}},Ce=()=>{if(globalThis.appCDN)return globalThis.appCDN;try{return new URL(location.href).searchParams.get("appCDN")||L.cdnLists.npm[0]}catch{return L.cdnLists.npm[0]}},z=(e,t,o)=>{let n=t&&e.startsWith("unpkg:")?"?module":"";e.startsWith("gh:")?e=e.replace("gh",V[0]):e.includes(":")||(e=(o||(t?G[0]:J[0]))+":"+e);for(let s of je){let[r,i]=s;if(r.test(e))return e.replace(r,i)+n}return null},je=[[/^(esm\.sh:)(.+)/i,"https://esm.sh/$2"],[/^(npm:)(.+)/i,"https://esm.sh/$2"],[/^(node:)(.+)/i,"https://esm.sh/$2"],[/^(jsr:)(.+)/i,"https://esm.sh/jsr/$2"],[/^(skypack:)(.+)/i,"https://cdn.skypack.dev/$2"],[/^(jsdelivr:)(.+)/i,"https://cdn.jsdelivr.net/npm/$2"],[/^(fastly\.jsdelivr:)(.+)/i,"https://fastly.jsdelivr.net/npm/$2"],[/^(gcore\.jsdelivr:)(.+)/i,"https://gcore.jsdelivr.net/npm/$2"],[/^(testingcf\.jsdelivr:)(.+)/i,"https://testingcf.jsdelivr.net/npm/$2"],[/^(jsdelivr\.b-cdn:)(.+)/i,"https://jsdelivr.b-cdn.net/npm/$2"],[/^(jsdelivr\.gh:)(.+)/i,"https://cdn.jsdelivr.net/gh/$2"],[/^(fastly\.jsdelivr\.gh:)(.+)/i,"https://fastly.jsdelivr.net/gh/$2"],[/^(gcore\.jsdelivr\.gh:)(.+)/i,"https://gcore.jsdelivr.net/gh/$2"],[/^(testingcf\.jsdelivr\.gh:)(.+)/i,"https://testingcf.jsdelivr.net/gh/$2"],[/^(jsdelivr\.b-cdn\.gh:)(.+)/i,"https://jsdelivr.b-cdn.net/gh/$2"],[/^(statically:)(.+)/i,"https://cdn.statically.io/gh/$2"],[/^(esm\.run:)(.+)/i,"https://esm.run/$2"],[/^(jsdelivr\.esm:)(.+)/i,"https://cdn.jsdelivr.net/npm/$2/+esm"],[/^(fastly\.jsdelivr\.esm:)(.+)/i,"https://fastly.jsdelivr.net/npm/$2/+esm"],[/^(gcore\.jsdelivr\.esm:)(.+)/i,"https://gcore.jsdelivr.net/npm/$2/+esm"],[/^(testingcf\.jsdelivr\.esm:)(.+)/i,"https://testingcf.jsdelivr.net/npm/$2/+esm"],[/^(jsdelivr\.b-cdn\.esm:)(.+)/i,"https://jsdelivr.b-cdn.net/npm/$2/+esm"],[/^(jspm:)(.+)/i,"https://jspm.dev/$2"],[/^(esbuild:)(.+)/i,"https://esbuild.vercel.app/$2"],[/^(bundle\.run:)(.+)/i,"https://bundle.run/$2"],[/^(unpkg:)(.+)/i,"https://unpkg.com/$2"],[/^(npmcdn:)(.+)/i,"https://npmcdn.com/$2"],[/^(bundlejs:)(.+)/i,"https://deno.bundlejs.com/?file&q=$2"],[/^(bundle:)(.+)/i,"https://deno.bundlejs.com/?file&q=$2"],[/^(deno:)(.+)/i,"https://deno.bundlejs.com/?file&q=https://deno.land/x/$2/mod.ts"],[/^(https:\/\/deno\.land\/.+)/i,"https://deno.bundlejs.com/?file&q=$1"],[/^(github:|https:\/\/github\.com\/)(.[^\/]+?)\/(.[^\/]+?)\/(?!releases\/)(?:(?:blob|raw)\/)?(.+?\/.+)/i,"https://deno.bundlejs.com/?file&q=https://cdn.jsdelivr.net/gh/$2/$3@$4"],[/^(gist\.github:)(.+?\/[0-9a-f]+\/raw\/(?:[0-9a-f]+\/)?.+)$/i,"https://gist.githack.com/$2"],[/^(gitlab:|https:\/\/gitlab\.com\/)([^\/]+.*\/[^\/]+)\/(?:raw|blob)\/(.+?)(?:\?.*)?$/i,"https://deno.bundlejs.com/?file&q=https://gl.githack.com/$2/raw/$3"],[/^(bitbucket:|https:\/\/bitbucket\.org\/)([^\/]+\/[^\/]+)\/(?:raw|src)\/(.+?)(?:\?.*)?$/i,"https://deno.bundlejs.com/?file&q=https://bb.githack.com/$2/raw/$3"],[/^(bitbucket:)snippets\/([^\/]+\/[^\/]+)\/revisions\/([^\/\#\?]+)(?:\?[^#]*)?(?:\#file-(.+?))$/i,"https://bb.githack.com/!api/2.0/snippets/$2/$3/files/$4"],[/^(bitbucket:)snippets\/([^\/]+\/[^\/\#\?]+)(?:\?[^#]*)?(?:\#file-(.+?))$/i,"https://bb.githack.com/!api/2.0/snippets/$2/HEAD/files/$3"],[/^(bitbucket:)\!api\/2.0\/snippets\/([^\/]+\/[^\/]+\/[^\/]+)\/files\/(.+?)(?:\?.*)?$/i,"https://bb.githack.com/!api/2.0/snippets/$2/files/$3"],[/^(api\.bitbucket:)2.0\/snippets\/([^\/]+\/[^\/]+\/[^\/]+)\/files\/(.+?)(?:\?.*)?$/i,"https://bb.githack.com/!api/2.0/snippets/$2/files/$3"],[/^(rawgit:)(.+?\/[0-9a-f]+\/raw\/(?:[0-9a-f]+\/)?.+)$/i,"https://gist.githack.com/$2"],[/^(rawgit:|https:\/\/raw\.githubusercontent\.com)(\/[^\/]+\/[^\/]+|[0-9A-Za-z-]+\/[0-9a-f]+\/raw)\/(.+)/i,"https://deno.bundlejs.com/?file&q=https://raw.githack.com/$2/$3"]];var{getUrl:j,getModuleUrl:ot}=L,Z="5.5.2";var K=j("@tarekraafat/autocomplete.js@10.2.7/dist/autoComplete.min.js");var ke="0.6.64",nt=j(`malinajs@${ke}/malina.js`);var rt=`https://typescript.azureedge.net/cdn/${Z}/monaco/min/vs`;var Q=j("easyqrcodejs@4.5.0/dist/easy.qrcode.min.js");var st=j(`typescript@${Z}/lib/typescript.js`);var qe=typeof btoa=="function",R=typeof Buffer=="function",ct=typeof TextDecoder=="function"?new TextDecoder:void 0,Y=typeof TextEncoder=="function"?new TextEncoder:void 0,Re="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",v=Array.prototype.slice.call(Re),at=(e=>{let t={};return e.forEach((o,n)=>t[o]=n),t})(v);var x=String.fromCharCode.bind(String),lt=typeof Uint8Array.from=="function"?Uint8Array.from.bind(Uint8Array):e=>new Uint8Array(Array.prototype.slice.call(e,0)),Ae=e=>e.replace(/=/g,"").replace(/[+\/]/g,t=>t=="+"?"-":"_");var Ie=e=>{let t,o,n,s,r="",i=e.length%3;for(let c=0;c<e.length;){if((o=e.charCodeAt(c++))>255||(n=e.charCodeAt(c++))>255||(s=e.charCodeAt(c++))>255)throw new TypeError("invalid character found");t=o<<16|n<<8|s,r+=v[t>>18&63]+v[t>>12&63]+v[t>>6&63]+v[t&63]}return i?r.slice(0,i-3)+"===".substring(i):r},ee=qe?e=>btoa(e):R?e=>Buffer.from(e,"binary").toString("base64"):Ie,Be=R?e=>Buffer.from(e).toString("base64"):e=>{let o=[];for(let n=0,s=e.length;n<s;n+=4096)o.push(x.apply(null,e.subarray(n,n+4096)));return ee(o.join(""))};var $e=e=>{if(e.length<2){var t=e.charCodeAt(0);return t<128?e:t<2048?x(192|t>>>6)+x(128|t&63):x(224|t>>>12&15)+x(128|t>>>6&63)+x(128|t&63)}else{var t=65536+(e.charCodeAt(0)-55296)*1024+(e.charCodeAt(1)-56320);return x(240|t>>>18&7)+x(128|t>>>12&63)+x(128|t>>>6&63)+x(128|t&63)}},Fe=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,De=e=>e.replace(Fe,$e),X=R?e=>Buffer.from(e,"utf8").toString("base64"):Y?e=>Be(Y.encode(e)):e=>ee(De(e)),te=(e,t=!1)=>t?Ae(X(e)):X(e);var b=(e,t="_")=>e.replace(/[\W]+/g,t);var H=(e,t)=>new Promise((o,n)=>{if(t&&globalThis[t])return o(globalThis[t]);if(typeof globalThis.importScripts=="function")return globalThis.importScripts(e),t&&globalThis[t]?o(globalThis[t]):o(globalThis);let s=document.createElement("script");s.src=e,s.async=!0;let r=()=>{s.removeEventListener("load",i),s.removeEventListener("error",c)},i=()=>{if(r(),!t)return o("loaded: "+e);let a=setInterval(()=>{if(window[t])return clearInterval(a),o(window[t])},5)},c=()=>{r(),n("failed to load: "+e)};s.addEventListener("load",i),s.addEventListener("error",c),document.head.appendChild(s)});var U=async e=>{let t=globalThis.define;globalThis.define=void 0;let o=await e();return globalThis.define=t,o};var oe=(e,{getLanguageExtension:t})=>{let o={markup:"index",style:"style",script:"script"},n=Object.keys(o).reduce((c,a)=>{let p=o[a],l=e[a].language,m=t?.(l)||"md",u=e[a].content||"";return{...c,...u?{[p+"."+m]:{content:u}}:{}}},{}),s=e.stylesheets.length>0?{styles:{content:e.stylesheets.map(c=>`<link rel="stylesheet" href="${c}" />`).join(`
`)}}:void 0,r=e.scripts.length>0?{scripts:{content:e.scripts.map(c=>`<script src="${c}"><\/script>`).join(`
`)}}:void 0,i=e.tests?.content?{["script.spec."+t?.(e.tests?.language)||"ts"]:{content:e.tests?.content}}:void 0;return{...n,...s,...r,...i}},ne=(e,t,o,n=!0)=>{let s=n?"https://gist.github.com/":"https://github.com/",r=t?.displayName||t?.username,i=r?t.username?"by ["+r+"]("+s+t.username+")":"by "+r:"",c=o?`[project](https://livecodes.io/?x=${o})`:"project";return{[b(e.title)+".md"]:{content:`# ${e.title}
A ${c} created ${i} on [LiveCodes](https://livecodes.io).`}}};var re=()=>(Date.now()+""+Math.floor(Math.floor(Math.random()*Date.now()))).substring(0,24);var g=(e,t)=>({Accept:`application/vnd.github.v3${t?"."+t:""}+json`,"Content-Type":"application/json",Authorization:"token "+e.token}),se=async(e,t)=>{try{return(await fetch(`https://api.github.com/repos/${e.username}/${t}`,{method:"GET",cache:"no-store",headers:g(e)})).ok}catch{return!1}},ie=async(e,t,o=!1,n)=>{let s=await fetch("https://api.github.com/user/repos",{method:"POST",cache:"no-store",headers:g(e),body:JSON.stringify({name:t,private:o,...o?{}:{homepage:`https://${e.username}.github.io/${t}/`},...n?{description:n}:{}})});if(!s.ok)throw await s.json().then(i=>i.errors[0]?.message)==="name already exists on this account"?new Error("Repo name already exists"):new Error("Error creating repo");return s.json().then(r=>r.name)},ce=async({user:e,repo:t,branch:o,file:n,message:s,initialize:r=!1,encoded:i=!1})=>{let c=`https://api.github.com/repos/${e.username}/${t}/contents/`,a=n.path.split("/").slice(0,-1).join("/"),p;if(!r){let m=await fetch(c+a,{method:"GET",cache:"no-store",headers:g(e)});m.ok&&(p=(await m.json()).find(h=>h.path===n.path)?.sha)}let l=await fetch(c+n.path,{method:"PUT",cache:"no-store",headers:g(e),body:JSON.stringify({message:s||"deploy",content:i?n.content:te(n.content),branch:o,...p?{sha:p}:{}})});if(!l.ok)throw new Error("Error creating file");return l.json()};var A=async(e,t,o="main",n)=>(await ce({user:e,repo:t,branch:o,file:{path:"README.md",content:`${n||"# "+t+`
`}`},message:"initial commit",initialize:!0,encoded:!1}))?.commit.sha,Pe=async(e,t,o)=>{let n=await fetch(`https://api.github.com/repos/${e.username}/${t}/git/matching-refs/heads/${o}?per_page=100`,{method:"GET",cache:"no-store",headers:g(e)}),s=await n.json();if(s.message==="Git Repository is empty."){let i=await A(e,t,"main");return o==="main"?i:null}if(!n.ok)throw new Error("Error getting last commit");let r=s.find(i=>i.ref===`refs/heads/${o}`);return r?r.object.sha:null},Ne=async(e,t,o)=>{let n=await fetch(`https://api.github.com/repos/${e.username}/${t}/commits/${o}`,{method:"GET",cache:"no-store",headers:g(e)});if(!n.ok)throw new Error("Error getting commit tree");let r=(await n.json())?.commit?.tree?.sha;return r||null},_e=async(e,t,o,n)=>{let s=o.map(i=>({path:i.path,mode:"100644",type:"blob",content:i.content})),r=await fetch(`https://api.github.com/repos/${e.username}/${t}/git/trees`,{method:"POST",cache:"no-store",headers:g(e),body:JSON.stringify({...n?{base_tree:n}:{},tree:s})});if(!r.ok)throw new Error("Error creating tree");return r.json().then(i=>i.sha)},We=async(e,t,o,n,s)=>{let r=await fetch(`https://api.github.com/repos/${e.username}/${t}/git/commits`,{method:"POST",cache:"no-store",headers:g(e),body:JSON.stringify({tree:n,message:o||"deploy",...s?{parents:[s]}:{}})});if(!r.ok)throw new Error("Error creating commit");return r.json().then(i=>i.sha)},Oe=async(e,t,o,n)=>{if(!(await fetch(`https://api.github.com/repos/${e.username}/${t}/git/refs`,{method:"POST",cache:"no-store",headers:g(e),body:JSON.stringify({ref:`refs/heads/${o}`,sha:n})})).ok)throw new Error("Error creating branch");return!0},ze=async(e,t,o,n)=>{if(!(await fetch(`https://api.github.com/repos/${e.username}/${t}/git/refs/heads/${o}`,{method:"PATCH",cache:"no-store",headers:g(e),body:JSON.stringify({sha:n})})).ok)throw new Error("Error updating branch");return!0},ae=async({files:e,user:t,repo:o,branch:n,message:s,newRepo:r,privateRepo:i,description:c,readmeContent:a,clearPrevious:p=!0})=>{let l,m,u,h=!1;r&&(o=b(o,"-").toLowerCase());try{if(r||!await se(t,o)){r=!0,await ie(t,o,i,c);let w=await A(t,o,"main",a);l=n==="main"?w:null}else l=await Pe(t,o,n);let y=l&&!p?await Ne(t,o,l):null;return m=await _e(t,o,e,y),u=await We(t,o,s,m,l),l?h=await ze(t,o,n,u):h=await Oe(t,o,n,u),h?{tree:m,commit:u}:null}catch{return null}},le=async({file:e,user:t,repo:o,branch:n,message:s,newRepo:r,privateRepo:i,description:c,readmeContent:a})=>{try{(r||!await se(t,o))&&(r=!0,o=b(o,"-").toLowerCase(),await ie(t,o,i,c),await A(t,o,n,a));let p=await ce({user:t,repo:o,branch:n,file:e,message:s,initialize:r||!1,encoded:!0});return{tree:p?.commit?.tree?.sha,commit:p?.commit?.sha}}catch{return null}},pe=async(e,t="public")=>{let o=1,n=100,s=5,r=[];for(;o<=s;){let i=await fetch(`https://api.github.com/user/repos?type=${t}&per_page=${n}&page=${o}`,{method:"GET",cache:"no-store",headers:g(e)});if(o+=1,!i.ok)continue;let c=await i.json();r.push(...c.map(a=>a.name)),c.length<n&&(o=s+1)}return r};var me={title:"Untitled Project",description:"",head:`<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />`,htmlAttrs:'lang="en" class=""',tags:[],autoupdate:!0,autosave:!1,autotest:!1,delay:1500,formatOnsave:!1,mode:"full",theme:"dark",layout:"responsive",editorTheme:void 0,recoverUnsaved:!0,showSpacing:!1,welcome:!0,readonly:!1,allowLangChange:!0,activeEditor:void 0,languages:void 0,markup:{language:"html",content:""},style:{language:"css",content:""},script:{language:"javascript",content:""},stylesheets:[],scripts:[],cssPreset:"",imports:{},types:{},tests:{language:"typescript",content:""},tools:{enabled:"all",active:"",status:""},zoom:1,processors:[],customSettings:{},editor:void 0,fontFamily:void 0,fontSize:void 0,useTabs:!1,tabSize:2,lineNumbers:!0,wordWrap:!1,closeBrackets:!0,semicolons:!0,singleQuote:!1,trailingComma:!0,emmet:!0,enableAI:!1,editorMode:void 0,version:"30"};var Ge=({config:e,content:t,commitSource:o,singleFile:n,deps:s})=>{let r=[{path:"index.html",content:t.resultPage}];if(n||r.push({path:"style.css",content:t.style||""},{path:"script.js",content:t.script||""}),o){let i=oe(e,s);r.push(...Object.keys(i).map(c=>({path:"src/"+c,content:i[c].content})),{path:"src/livecodes.json",content:JSON.stringify(e,null,2)})}return r},ue=async({user:e,repo:t,config:o,content:n,message:s,commitSource:r=!0,singleFile:i,newRepo:c=!0,deps:a})=>{c&&(t=b(t,"-").toLowerCase());let p=Ge({config:o,content:n,commitSource:r,singleFile:i,deps:a}),l="gh-pages",m=r?`https://github.com/${e.username}/${t}/tree/gh-pages/src`:void 0,u=o.title!==me.title?o.title:"",h=Object.values(ne(o,e,m,!1))[0].content,y=await ae({files:p,user:e,repo:t,branch:l,message:s,newRepo:c,privateRepo:!1,description:u,readmeContent:h,clearPrevious:!0});return y?{url:`https://${e.username}.github.io/${t}/`,username:e.username,repo:t,tree:y.tree,commit:y.commit}:null},Je=async({file:e,user:t,repo:o,branch:n,message:s,description:r,readmeContent:i})=>{let c={path:`assets/${re()}/${e.path}`,content:e.content},a=await le({file:c,user:t,repo:o,branch:n,message:s,privateRepo:!1,description:r,readmeContent:i});return a?{url:`https://${t.username}.github.io/${o}/${c.path}`,username:t.username,repo:o,tree:a?.tree,commit:a?.commit}:null},de=(e,t)=>{let{url:o,username:n,repo:s,commit:r}=e,i=t?`
    <div class="description">
      <p>
        The source code is
        <a
          href="https://github.com/${n}/${s}/tree/${r}/src"
          target="_blank"
        >
          publicly available
        </a>
      </p>
      <p>
        Permanent link:
        <a
          href="https://livecodes.io/?config=https://raw.githubusercontent.com/${n}/${s}/${r}/src/livecodes.json"
          target="_blank"
        >
          Edit in LiveCodes
        </a>
      </p>
      <p>
        Check
        <a
          href="https://github.com/${n}/${s}/actions"
          target="_blank"
        >
          deployment status
        </a>
      </p>
    </div>
`:"",c=`
    <div id="deploy-container" class="modal-container">
      <div class="modal-title">Deployed Successfully!</div>
      <p>
        Your project has been deployed successfully to GitHub Pages, and will shortly be available (~1&nbsp;min) on: <br />
        <a href="${o}" target="_blank">${o}</a>
      </p>
      <div id="deploy-qrcode" class="qrcode-container">Generating...</div>
      ${i}
    </div>
  `,a=document.createElement("div");return a.innerHTML=c,a};var ge=async({container:e,url:t,title:o,logo:n})=>{let s=await U(()=>H(Q,"QRCode"));e.style.visibility="hidden";let r=new s(e,{text:t,logo:n,width:200,height:200,drawer:"canvas",onRenderingEnd:(i,c)=>{e.innerHTML="";let a=document.createElement("img");a.src=c,a.style.cursor="pointer",a.title="Click to download",a.onclick=()=>r.download(b(o||"LiveCodes","-")),e.appendChild(a),e.style.visibility="visible"}})};var fe=e=>e.querySelector("#new-repo-form"),xe=e=>e.querySelector("#new-repo-btn"),he=e=>e.querySelector("#new-repo-name"),ye=e=>e.querySelector("#new-repo-name-error"),be=e=>e.querySelector("#new-repo-message"),Ee=e=>e.querySelector("#new-repo-source");var Le=e=>e.querySelector("#existing-repo-form"),Te=e=>e.querySelector("#existing-repo-btn"),I=e=>e.querySelector("#existing-repo-name"),B=e=>e.querySelector("#existing-repo-message"),Se=e=>e.querySelector("#existing-repo-source");var Ve=(e,t)=>{let o=document.createElement("div");o.innerHTML=O;let n=o.firstChild,s=n.querySelectorAll("#deploy-tabs li");return s.forEach(r=>{e.addEventListener(r,"click",()=>{s.forEach(c=>c.classList.remove("active")),r.classList.add("active"),document.querySelectorAll("#deploy-screens > div").forEach(c=>{c.classList.remove("active")});let i=n.querySelector("#"+r.dataset.target);i?.classList.add("active"),i?.querySelector("input")?.focus()})}),t&&setTimeout(()=>{s[1].click();let r=I(n),i=B(n);r.value=t,i.focus()}),n},Lo=async({modal:e,notifications:t,eventsManager:o,user:n,deployRepo:s,deps:r})=>{let i=Ve(o,s),c=fe(i),a=xe(i),p=he(i),l=ye(i),m=be(i),u=Ee(i),h=Le(i),y=Te(i),w=I(i),we=B(i),Me=Se(i),$=async(T,d,E,f,S)=>{let C=r.getLanguageCompiler(r.getConfig().script.language)?.scriptType,F=C!=null&&C!=="module";l.innerHTML="";let ve=await r.getResultPage({forExport:!0,template:W,singleFile:F}),D=r.getCache(),q=await ue({user:T,repo:d,config:r.getContentConfig(r.getConfig()),content:{resultPage:ve,style:D.style.compiled||"",script:D.script.compiled||""},message:E,commitSource:f,singleFile:F,newRepo:S,deps:{getLanguageExtension:r.getLanguageExtension}}).catch(M=>{M.message==="Repo name already exists"&&(l.innerHTML=M.message)});if(l.innerHTML!=="")return!1;if(q){await r.setProjectDeployRepo(d);let M=de(q,f);return e.show(M,{size:"small"}),await ge({container:M.querySelector("#deploy-qrcode"),url:q.url,title:d}),!0}else return e.close(),t.error("Deployment failed!"),!0};o.addEventListener(c,"submit",async T=>{if(T.preventDefault(),!n)return;let d=p.value.replace(/[^A-Za-z0-9_.-]/g,"-"),E=m.value,f=u.checked,S=!0;if(!d){t.error("Repo name is required");return}a.innerHTML="Deploying...",a.disabled=!0,await $(n,d,E,f,S)||(a.innerHTML="Deploy",a.disabled=!1)}),o.addEventListener(h,"submit",async T=>{if(T.preventDefault(),!n)return;let d=w.value,E=we.value,f=Me.checked,S=!1;if(!d){t.error("Repo name is required");return}y.innerHTML="Deploying...",y.disabled=!0,await $(n,d,E,f,S)}),e.show(i,{isAsync:!0}),p.focus(),n&&U(()=>H(K,"autoComplete")).then(async T=>{let d=await pe(n);o.addEventListener(w,"init",()=>{s||w.focus()});let E="#"+w.id;if(!document.querySelector(E))return;let f=new T({selector:E,placeHolder:"Search your public repos...",data:{src:d},resultItem:{highlight:{render:!0}}});o.addEventListener(f.input,"selection",function(S){let k=S.detail;f.input.blur();let C=k.selection.value;f.input.value=C})})};export{Lo as createDeployUI,Je as deployFile};
