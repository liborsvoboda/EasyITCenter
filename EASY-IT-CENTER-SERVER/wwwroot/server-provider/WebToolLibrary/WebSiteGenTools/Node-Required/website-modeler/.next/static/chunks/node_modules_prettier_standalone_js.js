/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_prettier_standalone_js"],{

/***/ "./node_modules/prettier/standalone.js":
/*!*********************************************!*\
  !*** ./node_modules/prettier/standalone.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  var name = \"prettier\";\n  var version = \"1.19.1\";\n  var description = \"Prettier is an opinionated code formatter\";\n  var bin = {\n  \tprettier: \"./bin/prettier.js\"\n  };\n  var repository = \"prettier/prettier\";\n  var homepage = \"https://prettier.io\";\n  var author = \"James Long\";\n  var license = \"MIT\";\n  var main = \"./index.js\";\n  var engines = {\n  \tnode: \">=8\"\n  };\n  var dependencies = {\n  \t\"@angular/compiler\": \"8.2.13\",\n  \t\"@babel/code-frame\": \"7.5.5\",\n  \t\"@babel/parser\": \"7.7.3\",\n  \t\"@glimmer/syntax\": \"0.41.0\",\n  \t\"@iarna/toml\": \"2.2.3\",\n  \t\"@typescript-eslint/typescript-estree\": \"2.6.1\",\n  \t\"angular-estree-parser\": \"1.1.5\",\n  \t\"angular-html-parser\": \"1.3.0\",\n  \tcamelcase: \"5.3.1\",\n  \tchalk: \"2.4.2\",\n  \t\"cjk-regex\": \"2.0.0\",\n  \tcosmiconfig: \"5.2.1\",\n  \tdashify: \"2.0.0\",\n  \tdedent: \"0.7.0\",\n  \tdiff: \"4.0.1\",\n  \teditorconfig: \"0.15.3\",\n  \t\"editorconfig-to-prettier\": \"0.1.1\",\n  \t\"escape-string-regexp\": \"1.0.5\",\n  \tesutils: \"2.0.3\",\n  \t\"find-parent-dir\": \"0.3.0\",\n  \t\"find-project-root\": \"1.1.1\",\n  \t\"flow-parser\": \"0.111.3\",\n  \t\"get-stream\": \"4.1.0\",\n  \tglobby: \"6.1.0\",\n  \tgraphql: \"14.5.8\",\n  \t\"html-element-attributes\": \"2.2.0\",\n  \t\"html-styles\": \"1.0.0\",\n  \t\"html-tag-names\": \"1.1.4\",\n  \tignore: \"4.0.6\",\n  \t\"is-ci\": \"2.0.0\",\n  \t\"jest-docblock\": \"24.9.0\",\n  \t\"json-stable-stringify\": \"1.0.1\",\n  \tleven: \"3.1.0\",\n  \t\"lines-and-columns\": \"1.1.6\",\n  \t\"linguist-languages\": \"7.6.0\",\n  \t\"lodash.uniqby\": \"4.7.0\",\n  \tmem: \"5.1.1\",\n  \tminimatch: \"3.0.4\",\n  \tminimist: \"1.2.0\",\n  \t\"n-readlines\": \"1.0.0\",\n  \t\"normalize-path\": \"3.0.0\",\n  \t\"parse-srcset\": \"ikatyang/parse-srcset#54eb9c1cb21db5c62b4d0e275d7249516df6f0ee\",\n  \t\"postcss-less\": \"2.0.0\",\n  \t\"postcss-media-query-parser\": \"0.2.3\",\n  \t\"postcss-scss\": \"2.0.0\",\n  \t\"postcss-selector-parser\": \"2.2.3\",\n  \t\"postcss-values-parser\": \"1.5.0\",\n  \t\"regexp-util\": \"1.2.2\",\n  \t\"remark-math\": \"1.0.6\",\n  \t\"remark-parse\": \"5.0.0\",\n  \tresolve: \"1.12.0\",\n  \tsemver: \"6.3.0\",\n  \t\"string-width\": \"4.1.0\",\n  \ttypescript: \"3.7.2\",\n  \t\"unicode-regex\": \"3.0.0\",\n  \tunified: \"8.4.1\",\n  \tvnopts: \"1.0.2\",\n  \t\"yaml-unist-parser\": \"1.1.1\"\n  };\n  var devDependencies = {\n  \t\"@babel/core\": \"7.7.2\",\n  \t\"@babel/preset-env\": \"7.7.1\",\n  \t\"@rollup/plugin-alias\": \"2.2.0\",\n  \t\"@rollup/plugin-replace\": \"2.2.1\",\n  \t\"babel-loader\": \"8.0.6\",\n  \tbenchmark: \"2.1.4\",\n  \t\"builtin-modules\": \"3.1.0\",\n  \tcodecov: \"3.6.1\",\n  \t\"cross-env\": \"6.0.3\",\n  \teslint: \"6.6.0\",\n  \t\"eslint-config-prettier\": \"6.5.0\",\n  \t\"eslint-formatter-friendly\": \"7.0.0\",\n  \t\"eslint-plugin-import\": \"2.18.2\",\n  \t\"eslint-plugin-prettier\": \"3.1.1\",\n  \t\"eslint-plugin-react\": \"7.16.0\",\n  \texeca: \"3.2.0\",\n  \tjest: \"23.3.0\",\n  \t\"jest-junit\": \"9.0.0\",\n  \t\"jest-snapshot-serializer-ansi\": \"1.0.0\",\n  \t\"jest-snapshot-serializer-raw\": \"1.1.0\",\n  \t\"jest-watch-typeahead\": \"0.4.0\",\n  \tmkdirp: \"0.5.1\",\n  \tprettier: \"1.19.0\",\n  \tprettylint: \"1.0.0\",\n  \trimraf: \"3.0.0\",\n  \trollup: \"1.26.3\",\n  \t\"rollup-plugin-babel\": \"4.3.3\",\n  \t\"rollup-plugin-commonjs\": \"10.1.0\",\n  \t\"rollup-plugin-json\": \"4.0.0\",\n  \t\"rollup-plugin-node-globals\": \"1.4.0\",\n  \t\"rollup-plugin-node-resolve\": \"5.2.0\",\n  \t\"rollup-plugin-terser\": \"5.1.2\",\n  \tshelljs: \"0.8.3\",\n  \t\"snapshot-diff\": \"0.4.0\",\n  \t\"strip-ansi\": \"5.2.0\",\n  \t\"synchronous-promise\": \"2.0.10\",\n  \ttempy: \"0.2.1\",\n  \t\"terser-webpack-plugin\": \"2.2.1\",\n  \twebpack: \"4.41.2\"\n  };\n  var scripts = {\n  \tprepublishOnly: \"echo \\\"Error: must publish from dist/\\\" && exit 1\",\n  \t\"prepare-release\": \"yarn && yarn build && yarn test:dist\",\n  \ttest: \"jest\",\n  \t\"test:dist\": \"node ./scripts/test-dist.js\",\n  \t\"test-integration\": \"jest tests_integration\",\n  \t\"perf-repeat\": \"yarn && yarn build && cross-env NODE_ENV=production node ./dist/bin-prettier.js --debug-repeat ${PERF_REPEAT:-1000} --loglevel debug ${PERF_FILE:-./index.js} > /dev/null\",\n  \t\"perf-repeat-inspect\": \"yarn && yarn build && cross-env NODE_ENV=production node --inspect-brk ./dist/bin-prettier.js --debug-repeat ${PERF_REPEAT:-1000} --loglevel debug ${PERF_FILE:-./index.js} > /dev/null\",\n  \t\"perf-benchmark\": \"yarn && yarn build && cross-env NODE_ENV=production node ./dist/bin-prettier.js --debug-benchmark --loglevel debug ${PERF_FILE:-./index.js} > /dev/null\",\n  \t\"check-types\": \"tsc\",\n  \tlint: \"cross-env EFF_NO_LINK_RULES=true eslint . --format friendly\",\n  \t\"lint-docs\": \"prettylint {.,docs,website,website/blog}/*.md\",\n  \t\"lint-dist\": \"eslint --no-eslintrc --no-ignore --env=browser \\\"dist/!(bin-prettier|index|third-party).js\\\"\",\n  \tbuild: \"node --max-old-space-size=3072 ./scripts/build/build.js\",\n  \t\"build-docs\": \"node ./scripts/build-docs.js\",\n  \t\"check-deps\": \"node ./scripts/check-deps.js\",\n  \tspellcheck: \"npx -p cspell@4.0.31 cspell {bin,scripts,src}/**/*.js {docs,website/blog,changelog_unreleased}/**/*.md\"\n  };\n  var _package = {\n  \tname: name,\n  \tversion: version,\n  \tdescription: description,\n  \tbin: bin,\n  \trepository: repository,\n  \thomepage: homepage,\n  \tauthor: author,\n  \tlicense: license,\n  \tmain: main,\n  \tengines: engines,\n  \tdependencies: dependencies,\n  \tdevDependencies: devDependencies,\n  \tscripts: scripts\n  };\n\n  var _package$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name,\n    version: version,\n    description: description,\n    bin: bin,\n    repository: repository,\n    homepage: homepage,\n    author: author,\n    license: license,\n    main: main,\n    engines: engines,\n    dependencies: dependencies,\n    devDependencies: devDependencies,\n    scripts: scripts,\n    'default': _package\n  });\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _construct(Parent, args, Class) {\n    if (isNativeReflectConstruct()) {\n      _construct = Reflect.construct;\n    } else {\n      _construct = function _construct(Parent, args, Class) {\n        var a = [null];\n        a.push.apply(a, args);\n        var Constructor = Function.bind.apply(Parent, a);\n        var instance = new Constructor();\n        if (Class) _setPrototypeOf(instance, Class.prototype);\n        return instance;\n      };\n    }\n\n    return _construct.apply(null, arguments);\n  }\n\n  function _isNativeFunction(fn) {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n  }\n\n  function _wrapNativeSuper(Class) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n    _wrapNativeSuper = function _wrapNativeSuper(Class) {\n      if (Class === null || !_isNativeFunction(Class)) return Class;\n\n      if (typeof Class !== \"function\") {\n        throw new TypeError(\"Super expression must either be null or a function\");\n      }\n\n      if (typeof _cache !== \"undefined\") {\n        if (_cache.has(Class)) return _cache.get(Class);\n\n        _cache.set(Class, Wrapper);\n      }\n\n      function Wrapper() {\n        return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n      }\n\n      Wrapper.prototype = Object.create(Class.prototype, {\n        constructor: {\n          value: Wrapper,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n      return _setPrototypeOf(Wrapper, Class);\n    };\n\n    return _wrapNativeSuper(Class);\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  function _taggedTemplateLiteral(strings, raw) {\n    if (!raw) {\n      raw = strings.slice(0);\n    }\n\n    return Object.freeze(Object.defineProperties(strings, {\n      raw: {\n        value: Object.freeze(raw)\n      }\n    }));\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n      return;\n    }\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n\n  function Diff() {}\n\n  Diff.prototype = {\n    diff: function diff(oldString, newString) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var callback = options.callback;\n\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      this.options = options;\n      var self = this;\n\n      function done(value) {\n        if (callback) {\n          setTimeout(function () {\n            callback(undefined, value);\n          }, 0);\n          return true;\n        } else {\n          return value;\n        }\n      } // Allow subclasses to massage the input prior to running\n\n\n      oldString = this.castInput(oldString);\n      newString = this.castInput(newString);\n      oldString = this.removeEmpty(this.tokenize(oldString));\n      newString = this.removeEmpty(this.tokenize(newString));\n      var newLen = newString.length,\n          oldLen = oldString.length;\n      var editLength = 1;\n      var maxEditLength = newLen + oldLen;\n      var bestPath = [{\n        newPos: -1,\n        components: []\n      }]; // Seed editLength = 0, i.e. the content starts with the same values\n\n      var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n\n      if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n        // Identity per the equality and tokenizer\n        return done([{\n          value: this.join(newString),\n          count: newString.length\n        }]);\n      } // Main worker method. checks all permutations of a given edit length for acceptance.\n\n\n      function execEditLength() {\n        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n          var basePath = void 0;\n\n          var addPath = bestPath[diagonalPath - 1],\n              removePath = bestPath[diagonalPath + 1],\n              _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n\n          if (addPath) {\n            // No one else is going to attempt to use this value, clear it\n            bestPath[diagonalPath - 1] = undefined;\n          }\n\n          var canAdd = addPath && addPath.newPos + 1 < newLen,\n              canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;\n\n          if (!canAdd && !canRemove) {\n            // If this path is a terminal then prune\n            bestPath[diagonalPath] = undefined;\n            continue;\n          } // Select the diagonal that we want to branch from. We select the prior\n          // path whose position in the new string is the farthest from the origin\n          // and does not pass the bounds of the diff graph\n\n\n          if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {\n            basePath = clonePath(removePath);\n            self.pushComponent(basePath.components, undefined, true);\n          } else {\n            basePath = addPath; // No need to clone, we've pulled it from the list\n\n            basePath.newPos++;\n            self.pushComponent(basePath.components, true, undefined);\n          }\n\n          _oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath); // If we have hit the end of both strings, then we are done\n\n          if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {\n            return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));\n          } else {\n            // Otherwise track this path as a potential candidate and continue.\n            bestPath[diagonalPath] = basePath;\n          }\n        }\n\n        editLength++;\n      } // Performs the length of edit iteration. Is a bit fugly as this has to support the\n      // sync and async mode which is never fun. Loops over execEditLength until a value\n      // is produced.\n\n\n      if (callback) {\n        (function exec() {\n          setTimeout(function () {\n            // This should not happen, but we want to be safe.\n\n            /* istanbul ignore next */\n            if (editLength > maxEditLength) {\n              return callback();\n            }\n\n            if (!execEditLength()) {\n              exec();\n            }\n          }, 0);\n        })();\n      } else {\n        while (editLength <= maxEditLength) {\n          var ret = execEditLength();\n\n          if (ret) {\n            return ret;\n          }\n        }\n      }\n    },\n    pushComponent: function pushComponent(components, added, removed) {\n      var last = components[components.length - 1];\n\n      if (last && last.added === added && last.removed === removed) {\n        // We need to clone here as the component clone operation is just\n        // as shallow array clone\n        components[components.length - 1] = {\n          count: last.count + 1,\n          added: added,\n          removed: removed\n        };\n      } else {\n        components.push({\n          count: 1,\n          added: added,\n          removed: removed\n        });\n      }\n    },\n    extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {\n      var newLen = newString.length,\n          oldLen = oldString.length,\n          newPos = basePath.newPos,\n          oldPos = newPos - diagonalPath,\n          commonCount = 0;\n\n      while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n        newPos++;\n        oldPos++;\n        commonCount++;\n      }\n\n      if (commonCount) {\n        basePath.components.push({\n          count: commonCount\n        });\n      }\n\n      basePath.newPos = newPos;\n      return oldPos;\n    },\n    equals: function equals(left, right) {\n      if (this.options.comparator) {\n        return this.options.comparator(left, right);\n      } else {\n        return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();\n      }\n    },\n    removeEmpty: function removeEmpty(array) {\n      var ret = [];\n\n      for (var i = 0; i < array.length; i++) {\n        if (array[i]) {\n          ret.push(array[i]);\n        }\n      }\n\n      return ret;\n    },\n    castInput: function castInput(value) {\n      return value;\n    },\n    tokenize: function tokenize(value) {\n      return value.split('');\n    },\n    join: function join(chars) {\n      return chars.join('');\n    }\n  };\n\n  function buildValues(diff, components, newString, oldString, useLongestToken) {\n    var componentPos = 0,\n        componentLen = components.length,\n        newPos = 0,\n        oldPos = 0;\n\n    for (; componentPos < componentLen; componentPos++) {\n      var component = components[componentPos];\n\n      if (!component.removed) {\n        if (!component.added && useLongestToken) {\n          var value = newString.slice(newPos, newPos + component.count);\n          value = value.map(function (value, i) {\n            var oldValue = oldString[oldPos + i];\n            return oldValue.length > value.length ? oldValue : value;\n          });\n          component.value = diff.join(value);\n        } else {\n          component.value = diff.join(newString.slice(newPos, newPos + component.count));\n        }\n\n        newPos += component.count; // Common case\n\n        if (!component.added) {\n          oldPos += component.count;\n        }\n      } else {\n        component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\n        oldPos += component.count; // Reverse add and remove so removes are output first to match common convention\n        // The diffing algorithm is tied to add then remove output and this is the simplest\n        // route to get the desired output with minimal overhead.\n\n        if (componentPos && components[componentPos - 1].added) {\n          var tmp = components[componentPos - 1];\n          components[componentPos - 1] = components[componentPos];\n          components[componentPos] = tmp;\n        }\n      }\n    } // Special case handle for when one terminal is ignored (i.e. whitespace).\n    // For this case we merge the terminal into the prior string and drop the change.\n    // This is only available for string mode.\n\n\n    var lastComponent = components[componentLen - 1];\n\n    if (componentLen > 1 && typeof lastComponent.value === 'string' && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {\n      components[componentLen - 2].value += lastComponent.value;\n      components.pop();\n    }\n\n    return components;\n  }\n\n  function clonePath(path) {\n    return {\n      newPos: path.newPos,\n      components: path.components.slice(0)\n    };\n  }\n\n  var characterDiff = new Diff();\n\n  function diffChars(oldStr, newStr, options) {\n    return characterDiff.diff(oldStr, newStr, options);\n  }\n\n  function generateOptions(options, defaults) {\n    if (typeof options === 'function') {\n      defaults.callback = options;\n    } else if (options) {\n      for (var name in options) {\n        /* istanbul ignore else */\n        if (options.hasOwnProperty(name)) {\n          defaults[name] = options[name];\n        }\n      }\n    }\n\n    return defaults;\n  } //\n  // Ranges and exceptions:\n  // Latin-1 Supplement, 0080–00FF\n  //  - U+00D7  × Multiplication sign\n  //  - U+00F7  ÷ Division sign\n  // Latin Extended-A, 0100–017F\n  // Latin Extended-B, 0180–024F\n  // IPA Extensions, 0250–02AF\n  // Spacing Modifier Letters, 02B0–02FF\n  //  - U+02C7  ˇ &#711;  Caron\n  //  - U+02D8  ˘ &#728;  Breve\n  //  - U+02D9  ˙ &#729;  Dot Above\n  //  - U+02DA  ˚ &#730;  Ring Above\n  //  - U+02DB  ˛ &#731;  Ogonek\n  //  - U+02DC  ˜ &#732;  Small Tilde\n  //  - U+02DD  ˝ &#733;  Double Acute Accent\n  // Latin Extended Additional, 1E00–1EFF\n\n\n  var extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\n  var reWhitespace = /\\S/;\n  var wordDiff = new Diff();\n\n  wordDiff.equals = function (left, right) {\n    if (this.options.ignoreCase) {\n      left = left.toLowerCase();\n      right = right.toLowerCase();\n    }\n\n    return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\n  };\n\n  wordDiff.tokenize = function (value) {\n    var tokens = value.split(/(\\s+|[()[\\]{}'\"]|\\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n\n    for (var i = 0; i < tokens.length - 1; i++) {\n      // If we have an empty string in the next field and we have only word chars before and after, merge\n      if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\n        tokens[i] += tokens[i + 2];\n        tokens.splice(i + 1, 2);\n        i--;\n      }\n    }\n\n    return tokens;\n  };\n\n  function diffWords(oldStr, newStr, options) {\n    options = generateOptions(options, {\n      ignoreWhitespace: true\n    });\n    return wordDiff.diff(oldStr, newStr, options);\n  }\n\n  function diffWordsWithSpace(oldStr, newStr, options) {\n    return wordDiff.diff(oldStr, newStr, options);\n  }\n\n  var lineDiff = new Diff();\n\n  lineDiff.tokenize = function (value) {\n    var retLines = [],\n        linesAndNewlines = value.split(/(\\n|\\r\\n)/); // Ignore the final empty token that occurs if the string ends with a new line\n\n    if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n      linesAndNewlines.pop();\n    } // Merge the content and line separators into single tokens\n\n\n    for (var i = 0; i < linesAndNewlines.length; i++) {\n      var line = linesAndNewlines[i];\n\n      if (i % 2 && !this.options.newlineIsToken) {\n        retLines[retLines.length - 1] += line;\n      } else {\n        if (this.options.ignoreWhitespace) {\n          line = line.trim();\n        }\n\n        retLines.push(line);\n      }\n    }\n\n    return retLines;\n  };\n\n  function diffLines(oldStr, newStr, callback) {\n    return lineDiff.diff(oldStr, newStr, callback);\n  }\n\n  function diffTrimmedLines(oldStr, newStr, callback) {\n    var options = generateOptions(callback, {\n      ignoreWhitespace: true\n    });\n    return lineDiff.diff(oldStr, newStr, options);\n  }\n\n  var sentenceDiff = new Diff();\n\n  sentenceDiff.tokenize = function (value) {\n    return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\n  };\n\n  function diffSentences(oldStr, newStr, callback) {\n    return sentenceDiff.diff(oldStr, newStr, callback);\n  }\n\n  var cssDiff = new Diff();\n\n  cssDiff.tokenize = function (value) {\n    return value.split(/([{}:;,]|\\s+)/);\n  };\n\n  function diffCss(oldStr, newStr, callback) {\n    return cssDiff.diff(oldStr, newStr, callback);\n  }\n\n  function _typeof$1(obj) {\n    if (typeof Symbol === \"function\" && _typeof(Symbol.iterator) === \"symbol\") {\n      _typeof$1 = function _typeof$1(obj) {\n        return _typeof(obj);\n      };\n    } else {\n      _typeof$1 = function _typeof$1(obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof(obj);\n      };\n    }\n\n    return _typeof$1(obj);\n  }\n\n  function _toConsumableArray$1(arr) {\n    return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _nonIterableSpread$1();\n  }\n\n  function _arrayWithoutHoles$1(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    }\n  }\n\n  function _iterableToArray$1(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _nonIterableSpread$1() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  var objectPrototypeToString = Object.prototype.toString;\n  var jsonDiff = new Diff(); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n  // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\n\n  jsonDiff.useLongestToken = true;\n  jsonDiff.tokenize = lineDiff.tokenize;\n\n  jsonDiff.castInput = function (value) {\n    var _this$options = this.options,\n        undefinedReplacement = _this$options.undefinedReplacement,\n        _this$options$stringi = _this$options.stringifyReplacer,\n        stringifyReplacer = _this$options$stringi === void 0 ? function (k, v) {\n      return typeof v === 'undefined' ? undefinedReplacement : v;\n    } : _this$options$stringi;\n    return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');\n  };\n\n  jsonDiff.equals = function (left, right) {\n    return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\n  };\n\n  function diffJson(oldObj, newObj, options) {\n    return jsonDiff.diff(oldObj, newObj, options);\n  } // This function handles the presence of circular references by bailing out when encountering an\n  // object that is already on the \"stack\" of items being processed. Accepts an optional replacer\n\n\n  function canonicalize(obj, stack, replacementStack, replacer, key) {\n    stack = stack || [];\n    replacementStack = replacementStack || [];\n\n    if (replacer) {\n      obj = replacer(key, obj);\n    }\n\n    var i;\n\n    for (i = 0; i < stack.length; i += 1) {\n      if (stack[i] === obj) {\n        return replacementStack[i];\n      }\n    }\n\n    var canonicalizedObj;\n\n    if ('[object Array]' === objectPrototypeToString.call(obj)) {\n      stack.push(obj);\n      canonicalizedObj = new Array(obj.length);\n      replacementStack.push(canonicalizedObj);\n\n      for (i = 0; i < obj.length; i += 1) {\n        canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);\n      }\n\n      stack.pop();\n      replacementStack.pop();\n      return canonicalizedObj;\n    }\n\n    if (obj && obj.toJSON) {\n      obj = obj.toJSON();\n    }\n\n    if (_typeof$1(obj) === 'object' && obj !== null) {\n      stack.push(obj);\n      canonicalizedObj = {};\n      replacementStack.push(canonicalizedObj);\n\n      var sortedKeys = [],\n          _key;\n\n      for (_key in obj) {\n        /* istanbul ignore else */\n        if (obj.hasOwnProperty(_key)) {\n          sortedKeys.push(_key);\n        }\n      }\n\n      sortedKeys.sort();\n\n      for (i = 0; i < sortedKeys.length; i += 1) {\n        _key = sortedKeys[i];\n        canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);\n      }\n\n      stack.pop();\n      replacementStack.pop();\n    } else {\n      canonicalizedObj = obj;\n    }\n\n    return canonicalizedObj;\n  }\n\n  var arrayDiff = new Diff();\n\n  arrayDiff.tokenize = function (value) {\n    return value.slice();\n  };\n\n  arrayDiff.join = arrayDiff.removeEmpty = function (value) {\n    return value;\n  };\n\n  function diffArrays(oldArr, newArr, callback) {\n    return arrayDiff.diff(oldArr, newArr, callback);\n  }\n\n  function parsePatch(uniDiff) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var diffstr = uniDiff.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n        delimiters = uniDiff.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n        list = [],\n        i = 0;\n\n    function parseIndex() {\n      var index = {};\n      list.push(index); // Parse diff metadata\n\n      while (i < diffstr.length) {\n        var line = diffstr[i]; // File header found, end parsing diff metadata\n\n        if (/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/.test(line)) {\n          break;\n        } // Diff index\n\n\n        var header = /^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/.exec(line);\n\n        if (header) {\n          index.index = header[1];\n        }\n\n        i++;\n      } // Parse file headers if they are defined. Unified diff requires them, but\n      // there's no technical issues to have an isolated hunk without file header\n\n\n      parseFileHeader(index);\n      parseFileHeader(index); // Parse hunks\n\n      index.hunks = [];\n\n      while (i < diffstr.length) {\n        var _line = diffstr[i];\n\n        if (/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/.test(_line)) {\n          break;\n        } else if (/^@@/.test(_line)) {\n          index.hunks.push(parseHunk());\n        } else if (_line && options.strict) {\n          // Ignore unexpected content unless in strict mode\n          throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));\n        } else {\n          i++;\n        }\n      }\n    } // Parses the --- and +++ headers, if none are found, no lines\n    // are consumed.\n\n\n    function parseFileHeader(index) {\n      var fileHeader = /^(---|\\+\\+\\+)\\s+(.*)$/.exec(diffstr[i]);\n\n      if (fileHeader) {\n        var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';\n        var data = fileHeader[2].split('\\t', 2);\n        var fileName = data[0].replace(/\\\\\\\\/g, '\\\\');\n\n        if (/^\".*\"$/.test(fileName)) {\n          fileName = fileName.substr(1, fileName.length - 2);\n        }\n\n        index[keyPrefix + 'FileName'] = fileName;\n        index[keyPrefix + 'Header'] = (data[1] || '').trim();\n        i++;\n      }\n    } // Parses a hunk\n    // This assumes that we are at the start of a hunk.\n\n\n    function parseHunk() {\n      var chunkHeaderIndex = i,\n          chunkHeaderLine = diffstr[i++],\n          chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\n      var hunk = {\n        oldStart: +chunkHeader[1],\n        oldLines: +chunkHeader[2] || 1,\n        newStart: +chunkHeader[3],\n        newLines: +chunkHeader[4] || 1,\n        lines: [],\n        linedelimiters: []\n      };\n      var addCount = 0,\n          removeCount = 0;\n\n      for (; i < diffstr.length; i++) {\n        // Lines starting with '---' could be mistaken for the \"remove line\" operation\n        // But they could be the header for the next file. Therefore prune such cases out.\n        if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {\n          break;\n        }\n\n        var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];\n\n        if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\\\') {\n          hunk.lines.push(diffstr[i]);\n          hunk.linedelimiters.push(delimiters[i] || '\\n');\n\n          if (operation === '+') {\n            addCount++;\n          } else if (operation === '-') {\n            removeCount++;\n          } else if (operation === ' ') {\n            addCount++;\n            removeCount++;\n          }\n        } else {\n          break;\n        }\n      } // Handle the empty block count case\n\n\n      if (!addCount && hunk.newLines === 1) {\n        hunk.newLines = 0;\n      }\n\n      if (!removeCount && hunk.oldLines === 1) {\n        hunk.oldLines = 0;\n      } // Perform optional sanity checking\n\n\n      if (options.strict) {\n        if (addCount !== hunk.newLines) {\n          throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n        }\n\n        if (removeCount !== hunk.oldLines) {\n          throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n        }\n      }\n\n      return hunk;\n    }\n\n    while (i < diffstr.length) {\n      parseIndex();\n    }\n\n    return list;\n  } // Iterator that traverses in the range of [min, max], stepping\n  // by distance from a given start position. I.e. for [0, 4], with\n  // start of 2, this will iterate 2, 3, 1, 4, 0.\n\n\n  function distanceIterator(start, minLine, maxLine) {\n    var wantForward = true,\n        backwardExhausted = false,\n        forwardExhausted = false,\n        localOffset = 1;\n    return function iterator() {\n      if (wantForward && !forwardExhausted) {\n        if (backwardExhausted) {\n          localOffset++;\n        } else {\n          wantForward = false;\n        } // Check if trying to fit beyond text length, and if not, check it fits\n        // after offset location (or desired location on first iteration)\n\n\n        if (start + localOffset <= maxLine) {\n          return localOffset;\n        }\n\n        forwardExhausted = true;\n      }\n\n      if (!backwardExhausted) {\n        if (!forwardExhausted) {\n          wantForward = true;\n        } // Check if trying to fit before text beginning, and if not, check it fits\n        // before offset location\n\n\n        if (minLine <= start - localOffset) {\n          return -localOffset++;\n        }\n\n        backwardExhausted = true;\n        return iterator();\n      } // We tried to fit hunk before text beginning and beyond text length, then\n      // hunk can't fit on the text. Return undefined\n\n    };\n  }\n\n  function applyPatch(source, uniDiff) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (typeof uniDiff === 'string') {\n      uniDiff = parsePatch(uniDiff);\n    }\n\n    if (Array.isArray(uniDiff)) {\n      if (uniDiff.length > 1) {\n        throw new Error('applyPatch only works with a single input.');\n      }\n\n      uniDiff = uniDiff[0];\n    } // Apply the diff to the input\n\n\n    var lines = source.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n        delimiters = source.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n        hunks = uniDiff.hunks,\n        compareLine = options.compareLine || function (lineNumber, line, operation, patchContent) {\n      return line === patchContent;\n    },\n        errorCount = 0,\n        fuzzFactor = options.fuzzFactor || 0,\n        minLine = 0,\n        offset = 0,\n        removeEOFNL,\n        addEOFNL;\n    /**\n     * Checks if the hunk exactly fits on the provided location\n     */\n\n\n    function hunkFits(hunk, toPos) {\n      for (var j = 0; j < hunk.lines.length; j++) {\n        var line = hunk.lines[j],\n            operation = line.length > 0 ? line[0] : ' ',\n            content = line.length > 0 ? line.substr(1) : line;\n\n        if (operation === ' ' || operation === '-') {\n          // Context sanity check\n          if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\n            errorCount++;\n\n            if (errorCount > fuzzFactor) {\n              return false;\n            }\n          }\n\n          toPos++;\n        }\n      }\n\n      return true;\n    } // Search best fit offsets for each hunk based on the previous ones\n\n\n    for (var i = 0; i < hunks.length; i++) {\n      var hunk = hunks[i],\n          maxLine = lines.length - hunk.oldLines,\n          localOffset = 0,\n          toPos = offset + hunk.oldStart - 1;\n      var iterator = distanceIterator(toPos, minLine, maxLine);\n\n      for (; localOffset !== undefined; localOffset = iterator()) {\n        if (hunkFits(hunk, toPos + localOffset)) {\n          hunk.offset = offset += localOffset;\n          break;\n        }\n      }\n\n      if (localOffset === undefined) {\n        return false;\n      } // Set lower text limit to end of the current hunk, so next ones don't try\n      // to fit over already patched text\n\n\n      minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\n    } // Apply patch hunks\n\n\n    var diffOffset = 0;\n\n    for (var _i = 0; _i < hunks.length; _i++) {\n      var _hunk = hunks[_i],\n          _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;\n\n      diffOffset += _hunk.newLines - _hunk.oldLines;\n\n      if (_toPos < 0) {\n        // Creating a new file\n        _toPos = 0;\n      }\n\n      for (var j = 0; j < _hunk.lines.length; j++) {\n        var line = _hunk.lines[j],\n            operation = line.length > 0 ? line[0] : ' ',\n            content = line.length > 0 ? line.substr(1) : line,\n            delimiter = _hunk.linedelimiters[j];\n\n        if (operation === ' ') {\n          _toPos++;\n        } else if (operation === '-') {\n          lines.splice(_toPos, 1);\n          delimiters.splice(_toPos, 1);\n          /* istanbul ignore else */\n        } else if (operation === '+') {\n          lines.splice(_toPos, 0, content);\n          delimiters.splice(_toPos, 0, delimiter);\n          _toPos++;\n        } else if (operation === '\\\\') {\n          var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;\n\n          if (previousOperation === '+') {\n            removeEOFNL = true;\n          } else if (previousOperation === '-') {\n            addEOFNL = true;\n          }\n        }\n      }\n    } // Handle EOFNL insertion/removal\n\n\n    if (removeEOFNL) {\n      while (!lines[lines.length - 1]) {\n        lines.pop();\n        delimiters.pop();\n      }\n    } else if (addEOFNL) {\n      lines.push('');\n      delimiters.push('\\n');\n    }\n\n    for (var _k = 0; _k < lines.length - 1; _k++) {\n      lines[_k] = lines[_k] + delimiters[_k];\n    }\n\n    return lines.join('');\n  } // Wrapper that supports multiple file patches via callbacks.\n\n\n  function applyPatches(uniDiff, options) {\n    if (typeof uniDiff === 'string') {\n      uniDiff = parsePatch(uniDiff);\n    }\n\n    var currentIndex = 0;\n\n    function processIndex() {\n      var index = uniDiff[currentIndex++];\n\n      if (!index) {\n        return options.complete();\n      }\n\n      options.loadFile(index, function (err, data) {\n        if (err) {\n          return options.complete(err);\n        }\n\n        var updatedContent = applyPatch(data, index, options);\n        options.patched(index, updatedContent, function (err) {\n          if (err) {\n            return options.complete(err);\n          }\n\n          processIndex();\n        });\n      });\n    }\n\n    processIndex();\n  }\n\n  function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof options.context === 'undefined') {\n      options.context = 4;\n    }\n\n    var diff = diffLines(oldStr, newStr, options);\n    diff.push({\n      value: '',\n      lines: []\n    }); // Append an empty value to make cleanup easier\n\n    function contextLines(lines) {\n      return lines.map(function (entry) {\n        return ' ' + entry;\n      });\n    }\n\n    var hunks = [];\n    var oldRangeStart = 0,\n        newRangeStart = 0,\n        curRange = [],\n        oldLine = 1,\n        newLine = 1;\n\n    var _loop = function _loop(i) {\n      var current = diff[i],\n          lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n      current.lines = lines;\n\n      if (current.added || current.removed) {\n        var _curRange; // If we have previous context, start with that\n\n\n        if (!oldRangeStart) {\n          var prev = diff[i - 1];\n          oldRangeStart = oldLine;\n          newRangeStart = newLine;\n\n          if (prev) {\n            curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\n            oldRangeStart -= curRange.length;\n            newRangeStart -= curRange.length;\n          }\n        } // Output our changes\n\n\n        (_curRange = curRange).push.apply(_curRange, _toConsumableArray$1(lines.map(function (entry) {\n          return (current.added ? '+' : '-') + entry;\n        }))); // Track the updated file position\n\n\n        if (current.added) {\n          newLine += lines.length;\n        } else {\n          oldLine += lines.length;\n        }\n      } else {\n        // Identical context lines. Track line changes\n        if (oldRangeStart) {\n          // Close out any changes that have been output (or join overlapping)\n          if (lines.length <= options.context * 2 && i < diff.length - 2) {\n            var _curRange2; // Overlapping\n\n\n            (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray$1(contextLines(lines)));\n          } else {\n            var _curRange3; // end the range and output\n\n\n            var contextSize = Math.min(lines.length, options.context);\n\n            (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray$1(contextLines(lines.slice(0, contextSize))));\n\n            var hunk = {\n              oldStart: oldRangeStart,\n              oldLines: oldLine - oldRangeStart + contextSize,\n              newStart: newRangeStart,\n              newLines: newLine - newRangeStart + contextSize,\n              lines: curRange\n            };\n\n            if (i >= diff.length - 2 && lines.length <= options.context) {\n              // EOF is inside this hunk\n              var oldEOFNewline = /\\n$/.test(oldStr);\n              var newEOFNewline = /\\n$/.test(newStr);\n              var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;\n\n              if (!oldEOFNewline && noNlBeforeAdds) {\n                // special case: old has no eol and no trailing context; no-nl can end up before adds\n                curRange.splice(hunk.oldLines, 0, '\\\\ No newline at end of file');\n              }\n\n              if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {\n                curRange.push('\\\\ No newline at end of file');\n              }\n            }\n\n            hunks.push(hunk);\n            oldRangeStart = 0;\n            newRangeStart = 0;\n            curRange = [];\n          }\n        }\n\n        oldLine += lines.length;\n        newLine += lines.length;\n      }\n    };\n\n    for (var i = 0; i < diff.length; i++) {\n      _loop(i);\n    }\n\n    return {\n      oldFileName: oldFileName,\n      newFileName: newFileName,\n      oldHeader: oldHeader,\n      newHeader: newHeader,\n      hunks: hunks\n    };\n  }\n\n  function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n    var diff = structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options);\n    var ret = [];\n\n    if (oldFileName == newFileName) {\n      ret.push('Index: ' + oldFileName);\n    }\n\n    ret.push('===================================================================');\n    ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\\t' + diff.oldHeader));\n    ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\\t' + diff.newHeader));\n\n    for (var i = 0; i < diff.hunks.length; i++) {\n      var hunk = diff.hunks[i];\n      ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');\n      ret.push.apply(ret, hunk.lines);\n    }\n\n    return ret.join('\\n') + '\\n';\n  }\n\n  function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\n    return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\n  }\n\n  function arrayEqual(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    return arrayStartsWith(a, b);\n  }\n\n  function arrayStartsWith(array, start) {\n    if (start.length > array.length) {\n      return false;\n    }\n\n    for (var i = 0; i < start.length; i++) {\n      if (start[i] !== array[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function calcLineCount(hunk) {\n    var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines),\n        oldLines = _calcOldNewLineCount.oldLines,\n        newLines = _calcOldNewLineCount.newLines;\n\n    if (oldLines !== undefined) {\n      hunk.oldLines = oldLines;\n    } else {\n      delete hunk.oldLines;\n    }\n\n    if (newLines !== undefined) {\n      hunk.newLines = newLines;\n    } else {\n      delete hunk.newLines;\n    }\n  }\n\n  function merge(mine, theirs, base) {\n    mine = loadPatch(mine, base);\n    theirs = loadPatch(theirs, base);\n    var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.\n    // Leaving sanity checks on this to the API consumer that may know more about the\n    // meaning in their own context.\n\n    if (mine.index || theirs.index) {\n      ret.index = mine.index || theirs.index;\n    }\n\n    if (mine.newFileName || theirs.newFileName) {\n      if (!fileNameChanged(mine)) {\n        // No header or no change in ours, use theirs (and ours if theirs does not exist)\n        ret.oldFileName = theirs.oldFileName || mine.oldFileName;\n        ret.newFileName = theirs.newFileName || mine.newFileName;\n        ret.oldHeader = theirs.oldHeader || mine.oldHeader;\n        ret.newHeader = theirs.newHeader || mine.newHeader;\n      } else if (!fileNameChanged(theirs)) {\n        // No header or no change in theirs, use ours\n        ret.oldFileName = mine.oldFileName;\n        ret.newFileName = mine.newFileName;\n        ret.oldHeader = mine.oldHeader;\n        ret.newHeader = mine.newHeader;\n      } else {\n        // Both changed... figure it out\n        ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\n        ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\n        ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\n        ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\n      }\n    }\n\n    ret.hunks = [];\n    var mineIndex = 0,\n        theirsIndex = 0,\n        mineOffset = 0,\n        theirsOffset = 0;\n\n    while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {\n      var mineCurrent = mine.hunks[mineIndex] || {\n        oldStart: Infinity\n      },\n          theirsCurrent = theirs.hunks[theirsIndex] || {\n        oldStart: Infinity\n      };\n\n      if (hunkBefore(mineCurrent, theirsCurrent)) {\n        // This patch does not overlap with any of the others, yay.\n        ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\n        mineIndex++;\n        theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\n      } else if (hunkBefore(theirsCurrent, mineCurrent)) {\n        // This patch does not overlap with any of the others, yay.\n        ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\n        theirsIndex++;\n        mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\n      } else {\n        // Overlap, merge as best we can\n        var mergedHunk = {\n          oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\n          oldLines: 0,\n          newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\n          newLines: 0,\n          lines: []\n        };\n        mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\n        theirsIndex++;\n        mineIndex++;\n        ret.hunks.push(mergedHunk);\n      }\n    }\n\n    return ret;\n  }\n\n  function loadPatch(param, base) {\n    if (typeof param === 'string') {\n      if (/^@@/m.test(param) || /^Index:/m.test(param)) {\n        return parsePatch(param)[0];\n      }\n\n      if (!base) {\n        throw new Error('Must provide a base reference or pass in a patch');\n      }\n\n      return structuredPatch(undefined, undefined, base, param);\n    }\n\n    return param;\n  }\n\n  function fileNameChanged(patch) {\n    return patch.newFileName && patch.newFileName !== patch.oldFileName;\n  }\n\n  function selectField(index, mine, theirs) {\n    if (mine === theirs) {\n      return mine;\n    } else {\n      index.conflict = true;\n      return {\n        mine: mine,\n        theirs: theirs\n      };\n    }\n  }\n\n  function hunkBefore(test, check) {\n    return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;\n  }\n\n  function cloneHunk(hunk, offset) {\n    return {\n      oldStart: hunk.oldStart,\n      oldLines: hunk.oldLines,\n      newStart: hunk.newStart + offset,\n      newLines: hunk.newLines,\n      lines: hunk.lines\n    };\n  }\n\n  function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\n    // This will generally result in a conflicted hunk, but there are cases where the context\n    // is the only overlap where we can successfully merge the content here.\n    var mine = {\n      offset: mineOffset,\n      lines: mineLines,\n      index: 0\n    },\n        their = {\n      offset: theirOffset,\n      lines: theirLines,\n      index: 0\n    }; // Handle any leading content\n\n    insertLeading(hunk, mine, their);\n    insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.\n\n    while (mine.index < mine.lines.length && their.index < their.lines.length) {\n      var mineCurrent = mine.lines[mine.index],\n          theirCurrent = their.lines[their.index];\n\n      if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {\n        // Both modified ...\n        mutualChange(hunk, mine, their);\n      } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {\n        var _hunk$lines; // Mine inserted\n\n\n        (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray$1(collectChange(mine)));\n      } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {\n        var _hunk$lines2; // Theirs inserted\n\n\n        (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray$1(collectChange(their)));\n      } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {\n        // Mine removed or edited\n        removal(hunk, mine, their);\n      } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {\n        // Their removed or edited\n        removal(hunk, their, mine, true);\n      } else if (mineCurrent === theirCurrent) {\n        // Context identity\n        hunk.lines.push(mineCurrent);\n        mine.index++;\n        their.index++;\n      } else {\n        // Context mismatch\n        conflict(hunk, collectChange(mine), collectChange(their));\n      }\n    } // Now push anything that may be remaining\n\n\n    insertTrailing(hunk, mine);\n    insertTrailing(hunk, their);\n    calcLineCount(hunk);\n  }\n\n  function mutualChange(hunk, mine, their) {\n    var myChanges = collectChange(mine),\n        theirChanges = collectChange(their);\n\n    if (allRemoves(myChanges) && allRemoves(theirChanges)) {\n      // Special case for remove changes that are supersets of one another\n      if (arrayStartsWith(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\n        var _hunk$lines3;\n\n        (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray$1(myChanges));\n\n        return;\n      } else if (arrayStartsWith(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\n        var _hunk$lines4;\n\n        (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray$1(theirChanges));\n\n        return;\n      }\n    } else if (arrayEqual(myChanges, theirChanges)) {\n      var _hunk$lines5;\n\n      (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray$1(myChanges));\n\n      return;\n    }\n\n    conflict(hunk, myChanges, theirChanges);\n  }\n\n  function removal(hunk, mine, their, swap) {\n    var myChanges = collectChange(mine),\n        theirChanges = collectContext(their, myChanges);\n\n    if (theirChanges.merged) {\n      var _hunk$lines6;\n\n      (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray$1(theirChanges.merged));\n    } else {\n      conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\n    }\n  }\n\n  function conflict(hunk, mine, their) {\n    hunk.conflict = true;\n    hunk.lines.push({\n      conflict: true,\n      mine: mine,\n      theirs: their\n    });\n  }\n\n  function insertLeading(hunk, insert, their) {\n    while (insert.offset < their.offset && insert.index < insert.lines.length) {\n      var line = insert.lines[insert.index++];\n      hunk.lines.push(line);\n      insert.offset++;\n    }\n  }\n\n  function insertTrailing(hunk, insert) {\n    while (insert.index < insert.lines.length) {\n      var line = insert.lines[insert.index++];\n      hunk.lines.push(line);\n    }\n  }\n\n  function collectChange(state) {\n    var ret = [],\n        operation = state.lines[state.index][0];\n\n    while (state.index < state.lines.length) {\n      var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\n\n      if (operation === '-' && line[0] === '+') {\n        operation = '+';\n      }\n\n      if (operation === line[0]) {\n        ret.push(line);\n        state.index++;\n      } else {\n        break;\n      }\n    }\n\n    return ret;\n  }\n\n  function collectContext(state, matchChanges) {\n    var changes = [],\n        merged = [],\n        matchIndex = 0,\n        contextChanges = false,\n        conflicted = false;\n\n    while (matchIndex < matchChanges.length && state.index < state.lines.length) {\n      var change = state.lines[state.index],\n          match = matchChanges[matchIndex]; // Once we've hit our add, then we are done\n\n      if (match[0] === '+') {\n        break;\n      }\n\n      contextChanges = contextChanges || change[0] !== ' ';\n      merged.push(match);\n      matchIndex++; // Consume any additions in the other block as a conflict to attempt\n      // to pull in the remaining context after this\n\n      if (change[0] === '+') {\n        conflicted = true;\n\n        while (change[0] === '+') {\n          changes.push(change);\n          change = state.lines[++state.index];\n        }\n      }\n\n      if (match.substr(1) === change.substr(1)) {\n        changes.push(change);\n        state.index++;\n      } else {\n        conflicted = true;\n      }\n    }\n\n    if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {\n      conflicted = true;\n    }\n\n    if (conflicted) {\n      return changes;\n    }\n\n    while (matchIndex < matchChanges.length) {\n      merged.push(matchChanges[matchIndex++]);\n    }\n\n    return {\n      merged: merged,\n      changes: changes\n    };\n  }\n\n  function allRemoves(changes) {\n    return changes.reduce(function (prev, change) {\n      return prev && change[0] === '-';\n    }, true);\n  }\n\n  function skipRemoveSuperset(state, removeChanges, delta) {\n    for (var i = 0; i < delta; i++) {\n      var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\n\n      if (state.lines[state.index + i] !== ' ' + changeContent) {\n        return false;\n      }\n    }\n\n    state.index += delta;\n    return true;\n  }\n\n  function calcOldNewLineCount(lines) {\n    var oldLines = 0;\n    var newLines = 0;\n    lines.forEach(function (line) {\n      if (typeof line !== 'string') {\n        var myCount = calcOldNewLineCount(line.mine);\n        var theirCount = calcOldNewLineCount(line.theirs);\n\n        if (oldLines !== undefined) {\n          if (myCount.oldLines === theirCount.oldLines) {\n            oldLines += myCount.oldLines;\n          } else {\n            oldLines = undefined;\n          }\n        }\n\n        if (newLines !== undefined) {\n          if (myCount.newLines === theirCount.newLines) {\n            newLines += myCount.newLines;\n          } else {\n            newLines = undefined;\n          }\n        }\n      } else {\n        if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {\n          newLines++;\n        }\n\n        if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {\n          oldLines++;\n        }\n      }\n    });\n    return {\n      oldLines: oldLines,\n      newLines: newLines\n    };\n  } // See: http://code.google.com/p/google-diff-match-patch/wiki/API\n\n\n  function convertChangesToDMP(changes) {\n    var ret = [],\n        change,\n        operation;\n\n    for (var i = 0; i < changes.length; i++) {\n      change = changes[i];\n\n      if (change.added) {\n        operation = 1;\n      } else if (change.removed) {\n        operation = -1;\n      } else {\n        operation = 0;\n      }\n\n      ret.push([operation, change.value]);\n    }\n\n    return ret;\n  }\n\n  function convertChangesToXML(changes) {\n    var ret = [];\n\n    for (var i = 0; i < changes.length; i++) {\n      var change = changes[i];\n\n      if (change.added) {\n        ret.push('<ins>');\n      } else if (change.removed) {\n        ret.push('<del>');\n      }\n\n      ret.push(escapeHTML(change.value));\n\n      if (change.added) {\n        ret.push('</ins>');\n      } else if (change.removed) {\n        ret.push('</del>');\n      }\n    }\n\n    return ret.join('');\n  }\n\n  function escapeHTML(s) {\n    var n = s;\n    n = n.replace(/&/g, '&amp;');\n    n = n.replace(/</g, '&lt;');\n    n = n.replace(/>/g, '&gt;');\n    n = n.replace(/\"/g, '&quot;');\n    return n;\n  }\n\n  var index_es6 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Diff: Diff,\n    diffChars: diffChars,\n    diffWords: diffWords,\n    diffWordsWithSpace: diffWordsWithSpace,\n    diffLines: diffLines,\n    diffTrimmedLines: diffTrimmedLines,\n    diffSentences: diffSentences,\n    diffCss: diffCss,\n    diffJson: diffJson,\n    diffArrays: diffArrays,\n    structuredPatch: structuredPatch,\n    createTwoFilesPatch: createTwoFilesPatch,\n    createPatch: createPatch,\n    applyPatch: applyPatch,\n    applyPatches: applyPatches,\n    parsePatch: parsePatch,\n    merge: merge,\n    convertChangesToDMP: convertChangesToDMP,\n    convertChangesToXML: convertChangesToXML,\n    canonicalize: canonicalize\n  });\n\n  var _shim_fs = {};\n\n  var _shim_fs$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    'default': _shim_fs\n  });\n\n  /*!\n   * normalize-path <https://github.com/jonschlinkert/normalize-path>\n   *\n   * Copyright (c) 2014-2018, Jon Schlinkert.\n   * Released under the MIT License.\n   */\n  var normalizePath = function normalizePath(path, stripTrailing) {\n    if (typeof path !== 'string') {\n      throw new TypeError('expected path to be a string');\n    }\n\n    if (path === '\\\\' || path === '/') return '/';\n    var len = path.length;\n    if (len <= 1) return path; // ensure that win32 namespaces has two leading slashes, so that the path is\n    // handled properly by the win32 version of path.parse() after being normalized\n    // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces\n\n    var prefix = '';\n\n    if (len > 4 && path[3] === '\\\\') {\n      var ch = path[2];\n\n      if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\\\\\') {\n        path = path.slice(2);\n        prefix = '//';\n      }\n    }\n\n    var segs = path.split(/[/\\\\]+/);\n\n    if (stripTrailing !== false && segs[segs.length - 1] === '') {\n      segs.pop();\n    }\n\n    return prefix + segs.join('/');\n  };\n\n  var global$1 = typeof __webpack_require__.g !== \"undefined\" ? __webpack_require__.g : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {};\n\n  var lookup = [];\n  var revLookup = [];\n  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n  var inited = false;\n\n  function init() {\n    inited = true;\n    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    for (var i = 0, len = code.length; i < len; ++i) {\n      lookup[i] = code[i];\n      revLookup[code.charCodeAt(i)] = i;\n    }\n\n    revLookup['-'.charCodeAt(0)] = 62;\n    revLookup['_'.charCodeAt(0)] = 63;\n  }\n\n  function toByteArray(b64) {\n    if (!inited) {\n      init();\n    }\n\n    var i, j, l, tmp, placeHolders, arr;\n    var len = b64.length;\n\n    if (len % 4 > 0) {\n      throw new Error('Invalid string. Length must be a multiple of 4');\n    } // the number of equal signs (place holders)\n    // if there are two placeholders, than the two characters before it\n    // represent one byte\n    // if there is only one, then the three characters before it represent 2 bytes\n    // this is just a cheap hack to not do indexOf twice\n\n\n    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data\n\n    arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars\n\n    l = placeHolders > 0 ? len - 4 : len;\n    var L = 0;\n\n    for (i = 0, j = 0; i < l; i += 4, j += 3) {\n      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n      arr[L++] = tmp >> 16 & 0xFF;\n      arr[L++] = tmp >> 8 & 0xFF;\n      arr[L++] = tmp & 0xFF;\n    }\n\n    if (placeHolders === 2) {\n      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n      arr[L++] = tmp & 0xFF;\n    } else if (placeHolders === 1) {\n      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n      arr[L++] = tmp >> 8 & 0xFF;\n      arr[L++] = tmp & 0xFF;\n    }\n\n    return arr;\n  }\n\n  function tripletToBase64(num) {\n    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n  }\n\n  function encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n\n    for (var i = start; i < end; i += 3) {\n      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n      output.push(tripletToBase64(tmp));\n    }\n\n    return output.join('');\n  }\n\n  function fromByteArray(uint8) {\n    if (!inited) {\n      init();\n    }\n\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n    var output = '';\n    var parts = [];\n    var maxChunkLength = 16383; // must be multiple of 3\n    // go through the array every three bytes, we'll deal with trailing stuff later\n\n    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n    if (extraBytes === 1) {\n      tmp = uint8[len - 1];\n      output += lookup[tmp >> 2];\n      output += lookup[tmp << 4 & 0x3F];\n      output += '==';\n    } else if (extraBytes === 2) {\n      tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n      output += lookup[tmp >> 10];\n      output += lookup[tmp >> 4 & 0x3F];\n      output += lookup[tmp << 2 & 0x3F];\n      output += '=';\n    }\n\n    parts.push(output);\n    return parts.join('');\n  }\n\n  function read(buffer, offset, isLE, mLen, nBytes) {\n    var e, m;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var nBits = -7;\n    var i = isLE ? nBytes - 1 : 0;\n    var d = isLE ? -1 : 1;\n    var s = buffer[offset + i];\n    i += d;\n    e = s & (1 << -nBits) - 1;\n    s >>= -nBits;\n    nBits += eLen;\n\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n    m = e & (1 << -nBits) - 1;\n    e >>= -nBits;\n    nBits += mLen;\n\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n    if (e === 0) {\n      e = 1 - eBias;\n    } else if (e === eMax) {\n      return m ? NaN : (s ? -1 : 1) * Infinity;\n    } else {\n      m = m + Math.pow(2, mLen);\n      e = e - eBias;\n    }\n\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n  }\n  function write(buffer, value, offset, isLE, mLen, nBytes) {\n    var e, m, c;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n    var i = isLE ? 0 : nBytes - 1;\n    var d = isLE ? 1 : -1;\n    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n    value = Math.abs(value);\n\n    if (isNaN(value) || value === Infinity) {\n      m = isNaN(value) ? 1 : 0;\n      e = eMax;\n    } else {\n      e = Math.floor(Math.log(value) / Math.LN2);\n\n      if (value * (c = Math.pow(2, -e)) < 1) {\n        e--;\n        c *= 2;\n      }\n\n      if (e + eBias >= 1) {\n        value += rt / c;\n      } else {\n        value += rt * Math.pow(2, 1 - eBias);\n      }\n\n      if (value * c >= 2) {\n        e++;\n        c /= 2;\n      }\n\n      if (e + eBias >= eMax) {\n        m = 0;\n        e = eMax;\n      } else if (e + eBias >= 1) {\n        m = (value * c - 1) * Math.pow(2, mLen);\n        e = e + eBias;\n      } else {\n        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n        e = 0;\n      }\n    }\n\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n    e = e << mLen | m;\n    eLen += mLen;\n\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n    buffer[offset + i - d] |= s * 128;\n  }\n\n  var toString = {}.toString;\n  var isArray = Array.isArray || function (arr) {\n    return toString.call(arr) == '[object Array]';\n  };\n\n  var INSPECT_MAX_BYTES = 50;\n  /**\n   * If `Buffer.TYPED_ARRAY_SUPPORT`:\n   *   === true    Use Uint8Array implementation (fastest)\n   *   === false   Use Object implementation (most compatible, even IE6)\n   *\n   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n   * Opera 11.6+, iOS 4.2+.\n   *\n   * Due to various browser bugs, sometimes the Object implementation will be used even\n   * when the browser supports typed arrays.\n   *\n   * Note:\n   *\n   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n   *\n   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n   *\n   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n   *     incorrect length in some situations.\n\n   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n   * get the Object implementation, which is slower but behaves correctly.\n   */\n\n  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;\n\n  function kMaxLength() {\n    return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n  }\n\n  function createBuffer(that, length) {\n    if (kMaxLength() < length) {\n      throw new RangeError('Invalid typed array length');\n    }\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      // Return an augmented `Uint8Array` instance, for best performance\n      that = new Uint8Array(length);\n      that.__proto__ = Buffer.prototype;\n    } else {\n      // Fallback: Return an object instance of the Buffer class\n      if (that === null) {\n        that = new Buffer(length);\n      }\n\n      that.length = length;\n    }\n\n    return that;\n  }\n  /**\n   * The Buffer constructor returns instances of `Uint8Array` that have their\n   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n   * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n   * returns a single octet.\n   *\n   * The `Uint8Array` prototype remains unmodified.\n   */\n\n\n  function Buffer(arg, encodingOrOffset, length) {\n    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n      return new Buffer(arg, encodingOrOffset, length);\n    } // Common case.\n\n\n    if (typeof arg === 'number') {\n      if (typeof encodingOrOffset === 'string') {\n        throw new Error('If encoding is specified then the first argument must be a string');\n      }\n\n      return allocUnsafe(this, arg);\n    }\n\n    return from(this, arg, encodingOrOffset, length);\n  }\n  Buffer.poolSize = 8192; // not used by this implementation\n  // TODO: Legacy, not needed anymore. Remove in next major version.\n\n  Buffer._augment = function (arr) {\n    arr.__proto__ = Buffer.prototype;\n    return arr;\n  };\n\n  function from(that, value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('\"value\" argument must not be a number');\n    }\n\n    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, value, encodingOrOffset, length);\n    }\n\n    if (typeof value === 'string') {\n      return fromString(that, value, encodingOrOffset);\n    }\n\n    return fromObject(that, value);\n  }\n  /**\n   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n   * if value is a number.\n   * Buffer.from(str[, encoding])\n   * Buffer.from(array)\n   * Buffer.from(buffer)\n   * Buffer.from(arrayBuffer[, byteOffset[, length]])\n   **/\n\n\n  Buffer.from = function (value, encodingOrOffset, length) {\n    return from(null, value, encodingOrOffset, length);\n  };\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    Buffer.prototype.__proto__ = Uint8Array.prototype;\n    Buffer.__proto__ = Uint8Array;\n  }\n\n  function assertSize(size) {\n    if (typeof size !== 'number') {\n      throw new TypeError('\"size\" argument must be a number');\n    } else if (size < 0) {\n      throw new RangeError('\"size\" argument must not be negative');\n    }\n  }\n\n  function alloc(that, size, fill, encoding) {\n    assertSize(size);\n\n    if (size <= 0) {\n      return createBuffer(that, size);\n    }\n\n    if (fill !== undefined) {\n      // Only pay attention to encoding if it's a string. This\n      // prevents accidentally sending in a number that would\n      // be interpretted as a start offset.\n      return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\n    }\n\n    return createBuffer(that, size);\n  }\n  /**\n   * Creates a new filled Buffer instance.\n   * alloc(size[, fill[, encoding]])\n   **/\n\n\n  Buffer.alloc = function (size, fill, encoding) {\n    return alloc(null, size, fill, encoding);\n  };\n\n  function allocUnsafe(that, size) {\n    assertSize(size);\n    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n\n    if (!Buffer.TYPED_ARRAY_SUPPORT) {\n      for (var i = 0; i < size; ++i) {\n        that[i] = 0;\n      }\n    }\n\n    return that;\n  }\n  /**\n   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n   * */\n\n\n  Buffer.allocUnsafe = function (size) {\n    return allocUnsafe(null, size);\n  };\n  /**\n   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n   */\n\n\n  Buffer.allocUnsafeSlow = function (size) {\n    return allocUnsafe(null, size);\n  };\n\n  function fromString(that, string, encoding) {\n    if (typeof encoding !== 'string' || encoding === '') {\n      encoding = 'utf8';\n    }\n\n    if (!Buffer.isEncoding(encoding)) {\n      throw new TypeError('\"encoding\" must be a valid string encoding');\n    }\n\n    var length = byteLength(string, encoding) | 0;\n    that = createBuffer(that, length);\n    var actual = that.write(string, encoding);\n\n    if (actual !== length) {\n      // Writing a hex string, for example, that contains invalid characters will\n      // cause everything after the first invalid character to be ignored. (e.g.\n      // 'abxxcd' will be treated as 'ab')\n      that = that.slice(0, actual);\n    }\n\n    return that;\n  }\n\n  function fromArrayLike(that, array) {\n    var length = array.length < 0 ? 0 : checked(array.length) | 0;\n    that = createBuffer(that, length);\n\n    for (var i = 0; i < length; i += 1) {\n      that[i] = array[i] & 255;\n    }\n\n    return that;\n  }\n\n  function fromArrayBuffer(that, array, byteOffset, length) {\n    array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\n      throw new RangeError('\\'offset\\' is out of bounds');\n    }\n\n    if (array.byteLength < byteOffset + (length || 0)) {\n      throw new RangeError('\\'length\\' is out of bounds');\n    }\n\n    if (byteOffset === undefined && length === undefined) {\n      array = new Uint8Array(array);\n    } else if (length === undefined) {\n      array = new Uint8Array(array, byteOffset);\n    } else {\n      array = new Uint8Array(array, byteOffset, length);\n    }\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      // Return an augmented `Uint8Array` instance, for best performance\n      that = array;\n      that.__proto__ = Buffer.prototype;\n    } else {\n      // Fallback: Return an object instance of the Buffer class\n      that = fromArrayLike(that, array);\n    }\n\n    return that;\n  }\n\n  function fromObject(that, obj) {\n    if (internalIsBuffer(obj)) {\n      var len = checked(obj.length) | 0;\n      that = createBuffer(that, len);\n\n      if (that.length === 0) {\n        return that;\n      }\n\n      obj.copy(that, 0, 0, len);\n      return that;\n    }\n\n    if (obj) {\n      if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n        if (typeof obj.length !== 'number' || isnan(obj.length)) {\n          return createBuffer(that, 0);\n        }\n\n        return fromArrayLike(that, obj);\n      }\n\n      if (obj.type === 'Buffer' && isArray(obj.data)) {\n        return fromArrayLike(that, obj.data);\n      }\n    }\n\n    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n  }\n\n  function checked(length) {\n    // Note: cannot use `length < kMaxLength()` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= kMaxLength()) {\n      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\n    }\n\n    return length | 0;\n  }\n  Buffer.isBuffer = isBuffer;\n\n  function internalIsBuffer(b) {\n    return !!(b != null && b._isBuffer);\n  }\n\n  Buffer.compare = function compare(a, b) {\n    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n      throw new TypeError('Arguments must be Buffers');\n    }\n\n    if (a === b) return 0;\n    var x = a.length;\n    var y = b.length;\n\n    for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n      if (a[i] !== b[i]) {\n        x = a[i];\n        y = b[i];\n        break;\n      }\n    }\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  };\n\n  Buffer.isEncoding = function isEncoding(encoding) {\n    switch (String(encoding).toLowerCase()) {\n      case 'hex':\n      case 'utf8':\n      case 'utf-8':\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n      case 'base64':\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return true;\n\n      default:\n        return false;\n    }\n  };\n\n  Buffer.concat = function concat(list, length) {\n    if (!isArray(list)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n\n    if (list.length === 0) {\n      return Buffer.alloc(0);\n    }\n\n    var i;\n\n    if (length === undefined) {\n      length = 0;\n\n      for (i = 0; i < list.length; ++i) {\n        length += list[i].length;\n      }\n    }\n\n    var buffer = Buffer.allocUnsafe(length);\n    var pos = 0;\n\n    for (i = 0; i < list.length; ++i) {\n      var buf = list[i];\n\n      if (!internalIsBuffer(buf)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n      }\n\n      buf.copy(buffer, pos);\n      pos += buf.length;\n    }\n\n    return buffer;\n  };\n\n  function byteLength(string, encoding) {\n    if (internalIsBuffer(string)) {\n      return string.length;\n    }\n\n    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n      return string.byteLength;\n    }\n\n    if (typeof string !== 'string') {\n      string = '' + string;\n    }\n\n    var len = string.length;\n    if (len === 0) return 0; // Use a for loop to avoid recursion\n\n    var loweredCase = false;\n\n    for (;;) {\n      switch (encoding) {\n        case 'ascii':\n        case 'latin1':\n        case 'binary':\n          return len;\n\n        case 'utf8':\n        case 'utf-8':\n        case undefined:\n          return utf8ToBytes(string).length;\n\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return len * 2;\n\n        case 'hex':\n          return len >>> 1;\n\n        case 'base64':\n          return base64ToBytes(string).length;\n\n        default:\n          if (loweredCase) return utf8ToBytes(string).length; // assume utf8\n\n          encoding = ('' + encoding).toLowerCase();\n          loweredCase = true;\n      }\n    }\n  }\n\n  Buffer.byteLength = byteLength;\n\n  function slowToString(encoding, start, end) {\n    var loweredCase = false; // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\n    if (start === undefined || start < 0) {\n      start = 0;\n    } // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n\n\n    if (start > this.length) {\n      return '';\n    }\n\n    if (end === undefined || end > this.length) {\n      end = this.length;\n    }\n\n    if (end <= 0) {\n      return '';\n    } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\n\n    end >>>= 0;\n    start >>>= 0;\n\n    if (end <= start) {\n      return '';\n    }\n\n    if (!encoding) encoding = 'utf8';\n\n    while (true) {\n      switch (encoding) {\n        case 'hex':\n          return hexSlice(this, start, end);\n\n        case 'utf8':\n        case 'utf-8':\n          return utf8Slice(this, start, end);\n\n        case 'ascii':\n          return asciiSlice(this, start, end);\n\n        case 'latin1':\n        case 'binary':\n          return latin1Slice(this, start, end);\n\n        case 'base64':\n          return base64Slice(this, start, end);\n\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return utf16leSlice(this, start, end);\n\n        default:\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n          encoding = (encoding + '').toLowerCase();\n          loweredCase = true;\n      }\n    }\n  } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n  // Buffer instances.\n\n\n  Buffer.prototype._isBuffer = true;\n\n  function swap(b, n, m) {\n    var i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n  }\n\n  Buffer.prototype.swap16 = function swap16() {\n    var len = this.length;\n\n    if (len % 2 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 16-bits');\n    }\n\n    for (var i = 0; i < len; i += 2) {\n      swap(this, i, i + 1);\n    }\n\n    return this;\n  };\n\n  Buffer.prototype.swap32 = function swap32() {\n    var len = this.length;\n\n    if (len % 4 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 32-bits');\n    }\n\n    for (var i = 0; i < len; i += 4) {\n      swap(this, i, i + 3);\n      swap(this, i + 1, i + 2);\n    }\n\n    return this;\n  };\n\n  Buffer.prototype.swap64 = function swap64() {\n    var len = this.length;\n\n    if (len % 8 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 64-bits');\n    }\n\n    for (var i = 0; i < len; i += 8) {\n      swap(this, i, i + 7);\n      swap(this, i + 1, i + 6);\n      swap(this, i + 2, i + 5);\n      swap(this, i + 3, i + 4);\n    }\n\n    return this;\n  };\n\n  Buffer.prototype.toString = function toString() {\n    var length = this.length | 0;\n    if (length === 0) return '';\n    if (arguments.length === 0) return utf8Slice(this, 0, length);\n    return slowToString.apply(this, arguments);\n  };\n\n  Buffer.prototype.equals = function equals(b) {\n    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');\n    if (this === b) return true;\n    return Buffer.compare(this, b) === 0;\n  };\n\n  Buffer.prototype.inspect = function inspect() {\n    var str = '';\n    var max = INSPECT_MAX_BYTES;\n\n    if (this.length > 0) {\n      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n      if (this.length > max) str += ' ... ';\n    }\n\n    return '<Buffer ' + str + '>';\n  };\n\n  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n    if (!internalIsBuffer(target)) {\n      throw new TypeError('Argument must be a Buffer');\n    }\n\n    if (start === undefined) {\n      start = 0;\n    }\n\n    if (end === undefined) {\n      end = target ? target.length : 0;\n    }\n\n    if (thisStart === undefined) {\n      thisStart = 0;\n    }\n\n    if (thisEnd === undefined) {\n      thisEnd = this.length;\n    }\n\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n      throw new RangeError('out of range index');\n    }\n\n    if (thisStart >= thisEnd && start >= end) {\n      return 0;\n    }\n\n    if (thisStart >= thisEnd) {\n      return -1;\n    }\n\n    if (start >= end) {\n      return 1;\n    }\n\n    start >>>= 0;\n    end >>>= 0;\n    thisStart >>>= 0;\n    thisEnd >>>= 0;\n    if (this === target) return 0;\n    var x = thisEnd - thisStart;\n    var y = end - start;\n    var len = Math.min(x, y);\n    var thisCopy = this.slice(thisStart, thisEnd);\n    var targetCopy = target.slice(start, end);\n\n    for (var i = 0; i < len; ++i) {\n      if (thisCopy[i] !== targetCopy[i]) {\n        x = thisCopy[i];\n        y = targetCopy[i];\n        break;\n      }\n    }\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n  //\n  // Arguments:\n  // - buffer - a Buffer to search\n  // - val - a string, Buffer, or number\n  // - byteOffset - an index into `buffer`; will be clamped to an int32\n  // - encoding - an optional encoding, relevant is val is a string\n  // - dir - true for indexOf, false for lastIndexOf\n\n\n  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer.length === 0) return -1; // Normalize byteOffset\n\n    if (typeof byteOffset === 'string') {\n      encoding = byteOffset;\n      byteOffset = 0;\n    } else if (byteOffset > 0x7fffffff) {\n      byteOffset = 0x7fffffff;\n    } else if (byteOffset < -0x80000000) {\n      byteOffset = -0x80000000;\n    }\n\n    byteOffset = +byteOffset; // Coerce to Number.\n\n    if (isNaN(byteOffset)) {\n      // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n      byteOffset = dir ? 0 : buffer.length - 1;\n    } // Normalize byteOffset: negative offsets start from the end of the buffer\n\n\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\n    if (byteOffset >= buffer.length) {\n      if (dir) return -1;else byteOffset = buffer.length - 1;\n    } else if (byteOffset < 0) {\n      if (dir) byteOffset = 0;else return -1;\n    } // Normalize val\n\n\n    if (typeof val === 'string') {\n      val = Buffer.from(val, encoding);\n    } // Finally, search either indexOf (if dir is true) or lastIndexOf\n\n\n    if (internalIsBuffer(val)) {\n      // Special case: looking for empty string/buffer always fails\n      if (val.length === 0) {\n        return -1;\n      }\n\n      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n    } else if (typeof val === 'number') {\n      val = val & 0xFF; // Search for a byte value [0-255]\n\n      if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\n        if (dir) {\n          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n        } else {\n          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n        }\n      }\n\n      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n    }\n\n    throw new TypeError('val must be string, number or Buffer');\n  }\n\n  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    var indexSize = 1;\n    var arrLength = arr.length;\n    var valLength = val.length;\n\n    if (encoding !== undefined) {\n      encoding = String(encoding).toLowerCase();\n\n      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n        if (arr.length < 2 || val.length < 2) {\n          return -1;\n        }\n\n        indexSize = 2;\n        arrLength /= 2;\n        valLength /= 2;\n        byteOffset /= 2;\n      }\n    }\n\n    function read(buf, i) {\n      if (indexSize === 1) {\n        return buf[i];\n      } else {\n        return buf.readUInt16BE(i * indexSize);\n      }\n    }\n\n    var i;\n\n    if (dir) {\n      var foundIndex = -1;\n\n      for (i = byteOffset; i < arrLength; i++) {\n        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n          if (foundIndex === -1) foundIndex = i;\n          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n        } else {\n          if (foundIndex !== -1) i -= i - foundIndex;\n          foundIndex = -1;\n        }\n      }\n    } else {\n      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\n      for (i = byteOffset; i >= 0; i--) {\n        var found = true;\n\n        for (var j = 0; j < valLength; j++) {\n          if (read(arr, i + j) !== read(val, j)) {\n            found = false;\n            break;\n          }\n        }\n\n        if (found) return i;\n      }\n    }\n\n    return -1;\n  }\n\n  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1;\n  };\n\n  Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n  };\n\n  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n  };\n\n  function hexWrite(buf, string, offset, length) {\n    offset = Number(offset) || 0;\n    var remaining = buf.length - offset;\n\n    if (!length) {\n      length = remaining;\n    } else {\n      length = Number(length);\n\n      if (length > remaining) {\n        length = remaining;\n      }\n    } // must be an even number of digits\n\n\n    var strLen = string.length;\n    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\n\n    if (length > strLen / 2) {\n      length = strLen / 2;\n    }\n\n    for (var i = 0; i < length; ++i) {\n      var parsed = parseInt(string.substr(i * 2, 2), 16);\n      if (isNaN(parsed)) return i;\n      buf[offset + i] = parsed;\n    }\n\n    return i;\n  }\n\n  function utf8Write(buf, string, offset, length) {\n    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n  }\n\n  function asciiWrite(buf, string, offset, length) {\n    return blitBuffer(asciiToBytes(string), buf, offset, length);\n  }\n\n  function latin1Write(buf, string, offset, length) {\n    return asciiWrite(buf, string, offset, length);\n  }\n\n  function base64Write(buf, string, offset, length) {\n    return blitBuffer(base64ToBytes(string), buf, offset, length);\n  }\n\n  function ucs2Write(buf, string, offset, length) {\n    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n  }\n\n  Buffer.prototype.write = function write(string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n      encoding = 'utf8';\n      length = this.length;\n      offset = 0; // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === 'string') {\n      encoding = offset;\n      length = this.length;\n      offset = 0; // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n      offset = offset | 0;\n\n      if (isFinite(length)) {\n        length = length | 0;\n        if (encoding === undefined) encoding = 'utf8';\n      } else {\n        encoding = length;\n        length = undefined;\n      } // legacy write(string, encoding, offset, length) - remove in v0.13\n\n    } else {\n      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n    }\n\n    var remaining = this.length - offset;\n    if (length === undefined || length > remaining) length = remaining;\n\n    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n      throw new RangeError('Attempt to write outside buffer bounds');\n    }\n\n    if (!encoding) encoding = 'utf8';\n    var loweredCase = false;\n\n    for (;;) {\n      switch (encoding) {\n        case 'hex':\n          return hexWrite(this, string, offset, length);\n\n        case 'utf8':\n        case 'utf-8':\n          return utf8Write(this, string, offset, length);\n\n        case 'ascii':\n          return asciiWrite(this, string, offset, length);\n\n        case 'latin1':\n        case 'binary':\n          return latin1Write(this, string, offset, length);\n\n        case 'base64':\n          // Warning: maxLength not taken into account in base64Write\n          return base64Write(this, string, offset, length);\n\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return ucs2Write(this, string, offset, length);\n\n        default:\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n          encoding = ('' + encoding).toLowerCase();\n          loweredCase = true;\n      }\n    }\n  };\n\n  Buffer.prototype.toJSON = function toJSON() {\n    return {\n      type: 'Buffer',\n      data: Array.prototype.slice.call(this._arr || this, 0)\n    };\n  };\n\n  function base64Slice(buf, start, end) {\n    if (start === 0 && end === buf.length) {\n      return fromByteArray(buf);\n    } else {\n      return fromByteArray(buf.slice(start, end));\n    }\n  }\n\n  function utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end);\n    var res = [];\n    var i = start;\n\n    while (i < end) {\n      var firstByte = buf[i];\n      var codePoint = null;\n      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n      if (i + bytesPerSequence <= end) {\n        var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n        switch (bytesPerSequence) {\n          case 1:\n            if (firstByte < 0x80) {\n              codePoint = firstByte;\n            }\n\n            break;\n\n          case 2:\n            secondByte = buf[i + 1];\n\n            if ((secondByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n\n              if (tempCodePoint > 0x7F) {\n                codePoint = tempCodePoint;\n              }\n            }\n\n            break;\n\n          case 3:\n            secondByte = buf[i + 1];\n            thirdByte = buf[i + 2];\n\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n\n              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n                codePoint = tempCodePoint;\n              }\n            }\n\n            break;\n\n          case 4:\n            secondByte = buf[i + 1];\n            thirdByte = buf[i + 2];\n            fourthByte = buf[i + 3];\n\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n\n              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n                codePoint = tempCodePoint;\n              }\n            }\n\n        }\n      }\n\n      if (codePoint === null) {\n        // we did not generate a valid codePoint so insert a\n        // replacement char (U+FFFD) and advance only 1 byte\n        codePoint = 0xFFFD;\n        bytesPerSequence = 1;\n      } else if (codePoint > 0xFFFF) {\n        // encode to utf16 (surrogate pair dance)\n        codePoint -= 0x10000;\n        res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n        codePoint = 0xDC00 | codePoint & 0x3FF;\n      }\n\n      res.push(codePoint);\n      i += bytesPerSequence;\n    }\n\n    return decodeCodePointsArray(res);\n  } // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n  // the lowest limit is Chrome, with 0x10000 args.\n  // We go 1 magnitude less, for safety\n\n\n  var MAX_ARGUMENTS_LENGTH = 0x1000;\n\n  function decodeCodePointsArray(codePoints) {\n    var len = codePoints.length;\n\n    if (len <= MAX_ARGUMENTS_LENGTH) {\n      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n    } // Decode in chunks to avoid \"call stack size exceeded\".\n\n\n    var res = '';\n    var i = 0;\n\n    while (i < len) {\n      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n    }\n\n    return res;\n  }\n\n  function asciiSlice(buf, start, end) {\n    var ret = '';\n    end = Math.min(buf.length, end);\n\n    for (var i = start; i < end; ++i) {\n      ret += String.fromCharCode(buf[i] & 0x7F);\n    }\n\n    return ret;\n  }\n\n  function latin1Slice(buf, start, end) {\n    var ret = '';\n    end = Math.min(buf.length, end);\n\n    for (var i = start; i < end; ++i) {\n      ret += String.fromCharCode(buf[i]);\n    }\n\n    return ret;\n  }\n\n  function hexSlice(buf, start, end) {\n    var len = buf.length;\n    if (!start || start < 0) start = 0;\n    if (!end || end < 0 || end > len) end = len;\n    var out = '';\n\n    for (var i = start; i < end; ++i) {\n      out += toHex(buf[i]);\n    }\n\n    return out;\n  }\n\n  function utf16leSlice(buf, start, end) {\n    var bytes = buf.slice(start, end);\n    var res = '';\n\n    for (var i = 0; i < bytes.length; i += 2) {\n      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n    }\n\n    return res;\n  }\n\n  Buffer.prototype.slice = function slice(start, end) {\n    var len = this.length;\n    start = ~~start;\n    end = end === undefined ? len : ~~end;\n\n    if (start < 0) {\n      start += len;\n      if (start < 0) start = 0;\n    } else if (start > len) {\n      start = len;\n    }\n\n    if (end < 0) {\n      end += len;\n      if (end < 0) end = 0;\n    } else if (end > len) {\n      end = len;\n    }\n\n    if (end < start) end = start;\n    var newBuf;\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      newBuf = this.subarray(start, end);\n      newBuf.__proto__ = Buffer.prototype;\n    } else {\n      var sliceLen = end - start;\n      newBuf = new Buffer(sliceLen, undefined);\n\n      for (var i = 0; i < sliceLen; ++i) {\n        newBuf[i] = this[i + start];\n      }\n    }\n\n    return newBuf;\n  };\n  /*\n   * Need to make sure that buffer isn't trying to write out of bounds.\n   */\n\n\n  function checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n  }\n\n  Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    var val = this[offset];\n    var mul = 1;\n    var i = 0;\n\n    while (++i < byteLength && (mul *= 0x100)) {\n      val += this[offset + i] * mul;\n    }\n\n    return val;\n  };\n\n  Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n\n    if (!noAssert) {\n      checkOffset(offset, byteLength, this.length);\n    }\n\n    var val = this[offset + --byteLength];\n    var mul = 1;\n\n    while (byteLength > 0 && (mul *= 0x100)) {\n      val += this[offset + --byteLength] * mul;\n    }\n\n    return val;\n  };\n\n  Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    return this[offset];\n  };\n\n  Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] | this[offset + 1] << 8;\n  };\n\n  Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] << 8 | this[offset + 1];\n  };\n\n  Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n  };\n\n  Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n  };\n\n  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    var val = this[offset];\n    var mul = 1;\n    var i = 0;\n\n    while (++i < byteLength && (mul *= 0x100)) {\n      val += this[offset + i] * mul;\n    }\n\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n  };\n\n  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    var i = byteLength;\n    var mul = 1;\n    var val = this[offset + --i];\n\n    while (i > 0 && (mul *= 0x100)) {\n      val += this[offset + --i] * mul;\n    }\n\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n  };\n\n  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    if (!(this[offset] & 0x80)) return this[offset];\n    return (0xff - this[offset] + 1) * -1;\n  };\n\n  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    var val = this[offset] | this[offset + 1] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n  };\n\n  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    var val = this[offset + 1] | this[offset] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n  };\n\n  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n  };\n\n  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n  };\n\n  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return read(this, offset, true, 23, 4);\n  };\n\n  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return read(this, offset, false, 23, 4);\n  };\n\n  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return read(this, offset, true, 52, 8);\n  };\n\n  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return read(this, offset, false, 52, 8);\n  };\n\n  function checkInt(buf, value, offset, ext, max, min) {\n    if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n    if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  }\n\n  Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n\n    if (!noAssert) {\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n      checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n\n    var mul = 1;\n    var i = 0;\n    this[offset] = value & 0xFF;\n\n    while (++i < byteLength && (mul *= 0x100)) {\n      this[offset + i] = value / mul & 0xFF;\n    }\n\n    return offset + byteLength;\n  };\n\n  Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n\n    if (!noAssert) {\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n      checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n\n    var i = byteLength - 1;\n    var mul = 1;\n    this[offset + i] = value & 0xFF;\n\n    while (--i >= 0 && (mul *= 0x100)) {\n      this[offset + i] = value / mul & 0xFF;\n    }\n\n    return offset + byteLength;\n  };\n\n  Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n    this[offset] = value & 0xff;\n    return offset + 1;\n  };\n\n  function objectWriteUInt16(buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffff + value + 1;\n\n    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n      buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\n    }\n  }\n\n  Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value & 0xff;\n      this[offset + 1] = value >>> 8;\n    } else {\n      objectWriteUInt16(this, value, offset, true);\n    }\n\n    return offset + 2;\n  };\n\n  Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 0xff;\n    } else {\n      objectWriteUInt16(this, value, offset, false);\n    }\n\n    return offset + 2;\n  };\n\n  function objectWriteUInt32(buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffffffff + value + 1;\n\n    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n      buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\n    }\n  }\n\n  Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset + 3] = value >>> 24;\n      this[offset + 2] = value >>> 16;\n      this[offset + 1] = value >>> 8;\n      this[offset] = value & 0xff;\n    } else {\n      objectWriteUInt32(this, value, offset, true);\n    }\n\n    return offset + 4;\n  };\n\n  Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 0xff;\n    } else {\n      objectWriteUInt32(this, value, offset, false);\n    }\n\n    return offset + 4;\n  };\n\n  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n\n    if (!noAssert) {\n      var limit = Math.pow(2, 8 * byteLength - 1);\n      checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n\n    var i = 0;\n    var mul = 1;\n    var sub = 0;\n    this[offset] = value & 0xFF;\n\n    while (++i < byteLength && (mul *= 0x100)) {\n      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n        sub = 1;\n      }\n\n      this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n\n    return offset + byteLength;\n  };\n\n  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n\n    if (!noAssert) {\n      var limit = Math.pow(2, 8 * byteLength - 1);\n      checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n\n    var i = byteLength - 1;\n    var mul = 1;\n    var sub = 0;\n    this[offset + i] = value & 0xFF;\n\n    while (--i >= 0 && (mul *= 0x100)) {\n      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n        sub = 1;\n      }\n\n      this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n\n    return offset + byteLength;\n  };\n\n  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n    if (value < 0) value = 0xff + value + 1;\n    this[offset] = value & 0xff;\n    return offset + 1;\n  };\n\n  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value & 0xff;\n      this[offset + 1] = value >>> 8;\n    } else {\n      objectWriteUInt16(this, value, offset, true);\n    }\n\n    return offset + 2;\n  };\n\n  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 0xff;\n    } else {\n      objectWriteUInt16(this, value, offset, false);\n    }\n\n    return offset + 2;\n  };\n\n  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value & 0xff;\n      this[offset + 1] = value >>> 8;\n      this[offset + 2] = value >>> 16;\n      this[offset + 3] = value >>> 24;\n    } else {\n      objectWriteUInt32(this, value, offset, true);\n    }\n\n    return offset + 4;\n  };\n\n  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n    if (value < 0) value = 0xffffffff + value + 1;\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 0xff;\n    } else {\n      objectWriteUInt32(this, value, offset, false);\n    }\n\n    return offset + 4;\n  };\n\n  function checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError('Index out of range');\n    if (offset < 0) throw new RangeError('Index out of range');\n  }\n\n  function writeFloat(buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n      checkIEEE754(buf, value, offset, 4);\n    }\n\n    write(buf, value, offset, littleEndian, 23, 4);\n    return offset + 4;\n  }\n\n  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, true, noAssert);\n  };\n\n  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, false, noAssert);\n  };\n\n  function writeDouble(buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n      checkIEEE754(buf, value, offset, 8);\n    }\n\n    write(buf, value, offset, littleEndian, 52, 8);\n    return offset + 8;\n  }\n\n  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, true, noAssert);\n  };\n\n  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, false, noAssert);\n  }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\n\n  Buffer.prototype.copy = function copy(target, targetStart, start, end) {\n    if (!start) start = 0;\n    if (!end && end !== 0) end = this.length;\n    if (targetStart >= target.length) targetStart = target.length;\n    if (!targetStart) targetStart = 0;\n    if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\n\n    if (end === start) return 0;\n    if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\n\n    if (targetStart < 0) {\n      throw new RangeError('targetStart out of bounds');\n    }\n\n    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n    if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\n\n    if (end > this.length) end = this.length;\n\n    if (target.length - targetStart < end - start) {\n      end = target.length - targetStart + start;\n    }\n\n    var len = end - start;\n    var i;\n\n    if (this === target && start < targetStart && targetStart < end) {\n      // descending copy from end\n      for (i = len - 1; i >= 0; --i) {\n        target[i + targetStart] = this[i + start];\n      }\n    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n      // ascending copy from start\n      for (i = 0; i < len; ++i) {\n        target[i + targetStart] = this[i + start];\n      }\n    } else {\n      Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n    }\n\n    return len;\n  }; // Usage:\n  //    buffer.fill(number[, offset[, end]])\n  //    buffer.fill(buffer[, offset[, end]])\n  //    buffer.fill(string[, offset[, end]][, encoding])\n\n\n  Buffer.prototype.fill = function fill(val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === 'string') {\n      if (typeof start === 'string') {\n        encoding = start;\n        start = 0;\n        end = this.length;\n      } else if (typeof end === 'string') {\n        encoding = end;\n        end = this.length;\n      }\n\n      if (val.length === 1) {\n        var code = val.charCodeAt(0);\n\n        if (code < 256) {\n          val = code;\n        }\n      }\n\n      if (encoding !== undefined && typeof encoding !== 'string') {\n        throw new TypeError('encoding must be a string');\n      }\n\n      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n        throw new TypeError('Unknown encoding: ' + encoding);\n      }\n    } else if (typeof val === 'number') {\n      val = val & 255;\n    } // Invalid ranges are not set to a default, so can range check early.\n\n\n    if (start < 0 || this.length < start || this.length < end) {\n      throw new RangeError('Out of range index');\n    }\n\n    if (end <= start) {\n      return this;\n    }\n\n    start = start >>> 0;\n    end = end === undefined ? this.length : end >>> 0;\n    if (!val) val = 0;\n    var i;\n\n    if (typeof val === 'number') {\n      for (i = start; i < end; ++i) {\n        this[i] = val;\n      }\n    } else {\n      var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());\n      var len = bytes.length;\n\n      for (i = 0; i < end - start; ++i) {\n        this[i + start] = bytes[i % len];\n      }\n    }\n\n    return this;\n  }; // HELPER FUNCTIONS\n  // ================\n\n\n  var INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\n  function base64clean(str) {\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''\n\n    if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\n    while (str.length % 4 !== 0) {\n      str = str + '=';\n    }\n\n    return str;\n  }\n\n  function stringtrim(str) {\n    if (str.trim) return str.trim();\n    return str.replace(/^\\s+|\\s+$/g, '');\n  }\n\n  function toHex(n) {\n    if (n < 16) return '0' + n.toString(16);\n    return n.toString(16);\n  }\n\n  function utf8ToBytes(string, units) {\n    units = units || Infinity;\n    var codePoint;\n    var length = string.length;\n    var leadSurrogate = null;\n    var bytes = [];\n\n    for (var i = 0; i < length; ++i) {\n      codePoint = string.charCodeAt(i); // is surrogate component\n\n      if (codePoint > 0xD7FF && codePoint < 0xE000) {\n        // last char was a lead\n        if (!leadSurrogate) {\n          // no lead yet\n          if (codePoint > 0xDBFF) {\n            // unexpected trail\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n            continue;\n          } else if (i + 1 === length) {\n            // unpaired lead\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n            continue;\n          } // valid lead\n\n\n          leadSurrogate = codePoint;\n          continue;\n        } // 2 leads in a row\n\n\n        if (codePoint < 0xDC00) {\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          leadSurrogate = codePoint;\n          continue;\n        } // valid surrogate pair\n\n\n        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n      } else if (leadSurrogate) {\n        // valid bmp char, but last char was a lead\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n      }\n\n      leadSurrogate = null; // encode utf8\n\n      if (codePoint < 0x80) {\n        if ((units -= 1) < 0) break;\n        bytes.push(codePoint);\n      } else if (codePoint < 0x800) {\n        if ((units -= 2) < 0) break;\n        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n      } else if (codePoint < 0x10000) {\n        if ((units -= 3) < 0) break;\n        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n      } else if (codePoint < 0x110000) {\n        if ((units -= 4) < 0) break;\n        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n      } else {\n        throw new Error('Invalid code point');\n      }\n    }\n\n    return bytes;\n  }\n\n  function asciiToBytes(str) {\n    var byteArray = [];\n\n    for (var i = 0; i < str.length; ++i) {\n      // Node's code seems to be doing this and not & 0x7F..\n      byteArray.push(str.charCodeAt(i) & 0xFF);\n    }\n\n    return byteArray;\n  }\n\n  function utf16leToBytes(str, units) {\n    var c, hi, lo;\n    var byteArray = [];\n\n    for (var i = 0; i < str.length; ++i) {\n      if ((units -= 2) < 0) break;\n      c = str.charCodeAt(i);\n      hi = c >> 8;\n      lo = c % 256;\n      byteArray.push(lo);\n      byteArray.push(hi);\n    }\n\n    return byteArray;\n  }\n\n  function base64ToBytes(str) {\n    return toByteArray(base64clean(str));\n  }\n\n  function blitBuffer(src, dst, offset, length) {\n    for (var i = 0; i < length; ++i) {\n      if (i + offset >= dst.length || i >= src.length) break;\n      dst[i + offset] = src[i];\n    }\n\n    return i;\n  }\n\n  function isnan(val) {\n    return val !== val; // eslint-disable-line no-self-compare\n  } // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n  // The _isBuffer check is for Safari 5-7 support, because it's missing\n  // Object.prototype.constructor. Remove this eventually\n\n\n  function isBuffer(obj) {\n    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));\n  }\n\n  function isFastBuffer(obj) {\n    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);\n  } // For Node v0.10 support. Remove this eventually.\n\n\n  function isSlowBuffer(obj) {\n    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));\n  }\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\n  function unwrapExports (x) {\n  \treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n  }\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  function getCjsExportFromNamespace (n) {\n  \treturn n && n['default'] || n;\n  }\n\n  var fs = getCjsExportFromNamespace(_shim_fs$1);\n\n  /**\n   * @class\n   */\n\n\n  var LineByLine =\n  /*#__PURE__*/\n  function () {\n    function LineByLine(file, options) {\n      _classCallCheck(this, LineByLine);\n\n      options = options || {};\n      if (!options.readChunk) options.readChunk = 1024;\n\n      if (!options.newLineCharacter) {\n        options.newLineCharacter = 0x0a; //linux line ending\n      } else {\n        options.newLineCharacter = options.newLineCharacter.charCodeAt(0);\n      }\n\n      if (typeof file === 'number') {\n        this.fd = file;\n      } else {\n        this.fd = fs.openSync(file, 'r');\n      }\n\n      this.options = options;\n      this.newLineCharacter = options.newLineCharacter;\n      this.reset();\n    }\n\n    _createClass(LineByLine, [{\n      key: \"_searchInBuffer\",\n      value: function _searchInBuffer(buffer, hexNeedle) {\n        var found = -1;\n\n        for (var i = 0; i <= buffer.length; i++) {\n          var b_byte = buffer[i];\n\n          if (b_byte === hexNeedle) {\n            found = i;\n            break;\n          }\n        }\n\n        return found;\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this.eofReached = false;\n        this.linesCache = [];\n        this.fdPosition = 0;\n      }\n    }, {\n      key: \"close\",\n      value: function close() {\n        fs.closeSync(this.fd);\n        this.fd = null;\n      }\n    }, {\n      key: \"_extractLines\",\n      value: function _extractLines(buffer) {\n        var line;\n        var lines = [];\n        var bufferPosition = 0;\n        var lastNewLineBufferPosition = 0;\n\n        while (true) {\n          var bufferPositionValue = buffer[bufferPosition++];\n\n          if (bufferPositionValue === this.newLineCharacter) {\n            line = buffer.slice(lastNewLineBufferPosition, bufferPosition);\n            lines.push(line);\n            lastNewLineBufferPosition = bufferPosition;\n          } else if (!bufferPositionValue) {\n            break;\n          }\n        }\n\n        var leftovers = buffer.slice(lastNewLineBufferPosition, bufferPosition);\n\n        if (leftovers.length) {\n          lines.push(leftovers);\n        }\n\n        return lines;\n      }\n    }, {\n      key: \"_readChunk\",\n      value: function _readChunk(lineLeftovers) {\n        var totalBytesRead = 0;\n        var bytesRead;\n        var buffers = [];\n\n        do {\n          var readBuffer = new Buffer(this.options.readChunk);\n          bytesRead = fs.readSync(this.fd, readBuffer, 0, this.options.readChunk, this.fdPosition);\n          totalBytesRead = totalBytesRead + bytesRead;\n          this.fdPosition = this.fdPosition + bytesRead;\n          buffers.push(readBuffer);\n        } while (bytesRead && this._searchInBuffer(buffers[buffers.length - 1], this.options.newLineCharacter) === -1);\n\n        var bufferData = Buffer.concat(buffers);\n\n        if (bytesRead < this.options.readChunk) {\n          this.eofReached = true;\n          bufferData = bufferData.slice(0, totalBytesRead);\n        }\n\n        if (totalBytesRead) {\n          this.linesCache = this._extractLines(bufferData);\n\n          if (lineLeftovers) {\n            this.linesCache[0] = Buffer.concat([lineLeftovers, this.linesCache[0]]);\n          }\n        }\n\n        return totalBytesRead;\n      }\n    }, {\n      key: \"next\",\n      value: function next() {\n        if (!this.fd) return false;\n        var line = false;\n\n        if (this.eofReached && this.linesCache.length === 0) {\n          return line;\n        }\n\n        var bytesRead;\n\n        if (!this.linesCache.length) {\n          bytesRead = this._readChunk();\n        }\n\n        if (this.linesCache.length) {\n          line = this.linesCache.shift();\n          var lastLineCharacter = line[line.length - 1];\n\n          if (lastLineCharacter !== 0x0a) {\n            bytesRead = this._readChunk(line);\n\n            if (bytesRead) {\n              line = this.linesCache.shift();\n            }\n          }\n        }\n\n        if (this.eofReached && this.linesCache.length === 0) {\n          this.close();\n        }\n\n        if (line && line[line.length - 1] === this.newLineCharacter) {\n          line = line.slice(0, line.length - 1);\n        }\n\n        return line;\n      }\n    }]);\n\n    return LineByLine;\n  }();\n\n  var readlines = LineByLine;\n\n  var ConfigError =\n  /*#__PURE__*/\n  function (_Error) {\n    _inherits(ConfigError, _Error);\n\n    function ConfigError() {\n      _classCallCheck(this, ConfigError);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(ConfigError).apply(this, arguments));\n    }\n\n    return ConfigError;\n  }(_wrapNativeSuper(Error));\n\n  var DebugError =\n  /*#__PURE__*/\n  function (_Error2) {\n    _inherits(DebugError, _Error2);\n\n    function DebugError() {\n      _classCallCheck(this, DebugError);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(DebugError).apply(this, arguments));\n    }\n\n    return DebugError;\n  }(_wrapNativeSuper(Error));\n\n  var UndefinedParserError =\n  /*#__PURE__*/\n  function (_Error3) {\n    _inherits(UndefinedParserError, _Error3);\n\n    function UndefinedParserError() {\n      _classCallCheck(this, UndefinedParserError);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(UndefinedParserError).apply(this, arguments));\n    }\n\n    return UndefinedParserError;\n  }(_wrapNativeSuper(Error));\n\n  var errors = {\n    ConfigError: ConfigError,\n    DebugError: DebugError,\n    UndefinedParserError: UndefinedParserError\n  };\n\n  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\n  function defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n  }\n\n  function defaultClearTimeout() {\n    throw new Error('clearTimeout has not been defined');\n  }\n\n  var cachedSetTimeout = defaultSetTimout;\n  var cachedClearTimeout = defaultClearTimeout;\n\n  if (typeof global$1.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout;\n  }\n\n  if (typeof global$1.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout;\n  }\n\n  function runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n      //normal enviroments in sane situations\n      return setTimeout(fun, 0);\n    } // if setTimeout wasn't available but was latter defined\n\n\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n      cachedSetTimeout = setTimeout;\n      return setTimeout(fun, 0);\n    }\n\n    try {\n      // when when somebody has screwed with setTimeout but no I.E. maddness\n      return cachedSetTimeout(fun, 0);\n    } catch (e) {\n      try {\n        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n        return cachedSetTimeout.call(null, fun, 0);\n      } catch (e) {\n        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n        return cachedSetTimeout.call(this, fun, 0);\n      }\n    }\n  }\n\n  function runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n      //normal enviroments in sane situations\n      return clearTimeout(marker);\n    } // if clearTimeout wasn't available but was latter defined\n\n\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n      cachedClearTimeout = clearTimeout;\n      return clearTimeout(marker);\n    }\n\n    try {\n      // when when somebody has screwed with setTimeout but no I.E. maddness\n      return cachedClearTimeout(marker);\n    } catch (e) {\n      try {\n        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n        return cachedClearTimeout.call(null, marker);\n      } catch (e) {\n        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n        // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n        return cachedClearTimeout.call(this, marker);\n      }\n    }\n  }\n\n  var queue = [];\n  var draining = false;\n  var currentQueue;\n  var queueIndex = -1;\n\n  function cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n      return;\n    }\n\n    draining = false;\n\n    if (currentQueue.length) {\n      queue = currentQueue.concat(queue);\n    } else {\n      queueIndex = -1;\n    }\n\n    if (queue.length) {\n      drainQueue();\n    }\n  }\n\n  function drainQueue() {\n    if (draining) {\n      return;\n    }\n\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n    var len = queue.length;\n\n    while (len) {\n      currentQueue = queue;\n      queue = [];\n\n      while (++queueIndex < len) {\n        if (currentQueue) {\n          currentQueue[queueIndex].run();\n        }\n      }\n\n      queueIndex = -1;\n      len = queue.length;\n    }\n\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n  }\n\n  function nextTick(fun) {\n    var args = new Array(arguments.length - 1);\n\n    if (arguments.length > 1) {\n      for (var i = 1; i < arguments.length; i++) {\n        args[i - 1] = arguments[i];\n      }\n    }\n\n    queue.push(new Item(fun, args));\n\n    if (queue.length === 1 && !draining) {\n      runTimeout(drainQueue);\n    }\n  } // v8 likes predictible objects\n\n  function Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n  }\n\n  Item.prototype.run = function () {\n    this.fun.apply(null, this.array);\n  };\n\n  var title = 'browser';\n  var platform = 'browser';\n  var browser = true;\n  var env = {};\n  var argv = [];\n  var version$1 = ''; // empty string to avoid regexp issues\n\n  var versions = {};\n  var release = {};\n  var config = {};\n\n  function noop() {}\n\n  var on = noop;\n  var addListener = noop;\n  var once = noop;\n  var off = noop;\n  var removeListener = noop;\n  var removeAllListeners = noop;\n  var emit = noop;\n  function binding(name) {\n    throw new Error('process.binding is not supported');\n  }\n  function cwd() {\n    return '/';\n  }\n  function chdir(dir) {\n    throw new Error('process.chdir is not supported');\n  }\n  function umask() {\n    return 0;\n  } // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\n\n  var performance = global$1.performance || {};\n\n  var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {\n    return new Date().getTime();\n  }; // generate timestamp or delta\n  // see http://nodejs.org/api/process.html#process_process_hrtime\n\n\n  function hrtime(previousTimestamp) {\n    var clocktime = performanceNow.call(performance) * 1e-3;\n    var seconds = Math.floor(clocktime);\n    var nanoseconds = Math.floor(clocktime % 1 * 1e9);\n\n    if (previousTimestamp) {\n      seconds = seconds - previousTimestamp[0];\n      nanoseconds = nanoseconds - previousTimestamp[1];\n\n      if (nanoseconds < 0) {\n        seconds--;\n        nanoseconds += 1e9;\n      }\n    }\n\n    return [seconds, nanoseconds];\n  }\n  var startTime = new Date();\n  function uptime() {\n    var currentTime = new Date();\n    var dif = currentTime - startTime;\n    return dif / 1000;\n  }\n  var process = {\n    nextTick: nextTick,\n    title: title,\n    browser: browser,\n    env: env,\n    argv: argv,\n    version: version$1,\n    versions: versions,\n    on: on,\n    addListener: addListener,\n    once: once,\n    off: off,\n    removeListener: removeListener,\n    removeAllListeners: removeAllListeners,\n    emit: emit,\n    binding: binding,\n    cwd: cwd,\n    chdir: chdir,\n    umask: umask,\n    hrtime: hrtime,\n    platform: platform,\n    release: release,\n    config: config,\n    uptime: uptime\n  };\n\n  var semver = createCommonjsModule(function (module, exports) {\n    exports = module.exports = SemVer;\n    var debug;\n    /* istanbul ignore next */\n\n    if (_typeof(process) === 'object' && process.env && process.env.NODE_DEBUG && /\\bsemver\\b/i.test(process.env.NODE_DEBUG)) {\n      debug = function debug() {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift('SEMVER');\n        console.log.apply(console, args);\n      };\n    } else {\n      debug = function debug() {};\n    } // Note: this is the semver.org version of the spec that it implements\n    // Not necessarily the package version of this code.\n\n\n    exports.SEMVER_SPEC_VERSION = '2.0.0';\n    var MAX_LENGTH = 256;\n    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n    /* istanbul ignore next */\n    9007199254740991; // Max safe segment length for coercion.\n\n    var MAX_SAFE_COMPONENT_LENGTH = 16; // The actual regexps go on exports.re\n\n    var re = exports.re = [];\n    var src = exports.src = [];\n    var t = exports.tokens = {};\n    var R = 0;\n\n    function tok(n) {\n      t[n] = R++;\n    } // The following Regular Expressions can be used for tokenizing,\n    // validating, and parsing SemVer version strings.\n    // ## Numeric Identifier\n    // A single `0`, or a non-zero digit followed by zero or more digits.\n\n\n    tok('NUMERICIDENTIFIER');\n    src[t.NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\n    tok('NUMERICIDENTIFIERLOOSE');\n    src[t.NUMERICIDENTIFIERLOOSE] = '[0-9]+'; // ## Non-numeric Identifier\n    // Zero or more digits, followed by a letter or hyphen, and then zero or\n    // more letters, digits, or hyphens.\n\n    tok('NONNUMERICIDENTIFIER');\n    src[t.NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*'; // ## Main Version\n    // Three dot-separated numeric identifiers.\n\n    tok('MAINVERSION');\n    src[t.MAINVERSION] = '(' + src[t.NUMERICIDENTIFIER] + ')\\\\.' + '(' + src[t.NUMERICIDENTIFIER] + ')\\\\.' + '(' + src[t.NUMERICIDENTIFIER] + ')';\n    tok('MAINVERSIONLOOSE');\n    src[t.MAINVERSIONLOOSE] = '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\\\.' + '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\\\.' + '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')'; // ## Pre-release Version Identifier\n    // A numeric identifier, or a non-numeric identifier.\n\n    tok('PRERELEASEIDENTIFIER');\n    src[t.PRERELEASEIDENTIFIER] = '(?:' + src[t.NUMERICIDENTIFIER] + '|' + src[t.NONNUMERICIDENTIFIER] + ')';\n    tok('PRERELEASEIDENTIFIERLOOSE');\n    src[t.PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[t.NUMERICIDENTIFIERLOOSE] + '|' + src[t.NONNUMERICIDENTIFIER] + ')'; // ## Pre-release Version\n    // Hyphen, followed by one or more dot-separated pre-release version\n    // identifiers.\n\n    tok('PRERELEASE');\n    src[t.PRERELEASE] = '(?:-(' + src[t.PRERELEASEIDENTIFIER] + '(?:\\\\.' + src[t.PRERELEASEIDENTIFIER] + ')*))';\n    tok('PRERELEASELOOSE');\n    src[t.PRERELEASELOOSE] = '(?:-?(' + src[t.PRERELEASEIDENTIFIERLOOSE] + '(?:\\\\.' + src[t.PRERELEASEIDENTIFIERLOOSE] + ')*))'; // ## Build Metadata Identifier\n    // Any combination of digits, letters, or hyphens.\n\n    tok('BUILDIDENTIFIER');\n    src[t.BUILDIDENTIFIER] = '[0-9A-Za-z-]+'; // ## Build Metadata\n    // Plus sign, followed by one or more period-separated build metadata\n    // identifiers.\n\n    tok('BUILD');\n    src[t.BUILD] = '(?:\\\\+(' + src[t.BUILDIDENTIFIER] + '(?:\\\\.' + src[t.BUILDIDENTIFIER] + ')*))'; // ## Full Version String\n    // A main version, followed optionally by a pre-release version and\n    // build metadata.\n    // Note that the only major, minor, patch, and pre-release sections of\n    // the version string are capturing groups.  The build metadata is not a\n    // capturing group, because it should not ever be used in version\n    // comparison.\n\n    tok('FULL');\n    tok('FULLPLAIN');\n    src[t.FULLPLAIN] = 'v?' + src[t.MAINVERSION] + src[t.PRERELEASE] + '?' + src[t.BUILD] + '?';\n    src[t.FULL] = '^' + src[t.FULLPLAIN] + '$'; // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n    // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n    // common in the npm registry.\n\n    tok('LOOSEPLAIN');\n    src[t.LOOSEPLAIN] = '[v=\\\\s]*' + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + '?' + src[t.BUILD] + '?';\n    tok('LOOSE');\n    src[t.LOOSE] = '^' + src[t.LOOSEPLAIN] + '$';\n    tok('GTLT');\n    src[t.GTLT] = '((?:<|>)?=?)'; // Something like \"2.*\" or \"1.2.x\".\n    // Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n    // Only the first item is strictly required.\n\n    tok('XRANGEIDENTIFIERLOOSE');\n    src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\n    tok('XRANGEIDENTIFIER');\n    src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + '|x|X|\\\\*';\n    tok('XRANGEPLAIN');\n    src[t.XRANGEPLAIN] = '[v=\\\\s]*(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:\\\\.(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:\\\\.(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:' + src[t.PRERELEASE] + ')?' + src[t.BUILD] + '?' + ')?)?';\n    tok('XRANGEPLAINLOOSE');\n    src[t.XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:' + src[t.PRERELEASELOOSE] + ')?' + src[t.BUILD] + '?' + ')?)?';\n    tok('XRANGE');\n    src[t.XRANGE] = '^' + src[t.GTLT] + '\\\\s*' + src[t.XRANGEPLAIN] + '$';\n    tok('XRANGELOOSE');\n    src[t.XRANGELOOSE] = '^' + src[t.GTLT] + '\\\\s*' + src[t.XRANGEPLAINLOOSE] + '$'; // Coercion.\n    // Extract anything that could conceivably be a part of a valid semver\n\n    tok('COERCE');\n    src[t.COERCE] = '(^|[^\\\\d])' + '(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' + '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:$|[^\\\\d])';\n    tok('COERCERTL');\n    re[t.COERCERTL] = new RegExp(src[t.COERCE], 'g'); // Tilde ranges.\n    // Meaning is \"reasonably at or greater than\"\n\n    tok('LONETILDE');\n    src[t.LONETILDE] = '(?:~>?)';\n    tok('TILDETRIM');\n    src[t.TILDETRIM] = '(\\\\s*)' + src[t.LONETILDE] + '\\\\s+';\n    re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], 'g');\n    var tildeTrimReplace = '$1~';\n    tok('TILDE');\n    src[t.TILDE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAIN] + '$';\n    tok('TILDELOOSE');\n    src[t.TILDELOOSE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + '$'; // Caret ranges.\n    // Meaning is \"at least and backwards compatible with\"\n\n    tok('LONECARET');\n    src[t.LONECARET] = '(?:\\\\^)';\n    tok('CARETTRIM');\n    src[t.CARETTRIM] = '(\\\\s*)' + src[t.LONECARET] + '\\\\s+';\n    re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], 'g');\n    var caretTrimReplace = '$1^';\n    tok('CARET');\n    src[t.CARET] = '^' + src[t.LONECARET] + src[t.XRANGEPLAIN] + '$';\n    tok('CARETLOOSE');\n    src[t.CARETLOOSE] = '^' + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + '$'; // A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\n\n    tok('COMPARATORLOOSE');\n    src[t.COMPARATORLOOSE] = '^' + src[t.GTLT] + '\\\\s*(' + src[t.LOOSEPLAIN] + ')$|^$';\n    tok('COMPARATOR');\n    src[t.COMPARATOR] = '^' + src[t.GTLT] + '\\\\s*(' + src[t.FULLPLAIN] + ')$|^$'; // An expression to strip any whitespace between the gtlt and the thing\n    // it modifies, so that `> 1.2.3` ==> `>1.2.3`\n\n    tok('COMPARATORTRIM');\n    src[t.COMPARATORTRIM] = '(\\\\s*)' + src[t.GTLT] + '\\\\s*(' + src[t.LOOSEPLAIN] + '|' + src[t.XRANGEPLAIN] + ')'; // this one has to use the /g flag\n\n    re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], 'g');\n    var comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`\n    // Note that these all use the loose form, because they'll be\n    // checked against either the strict or loose comparator form\n    // later.\n\n    tok('HYPHENRANGE');\n    src[t.HYPHENRANGE] = '^\\\\s*(' + src[t.XRANGEPLAIN] + ')' + '\\\\s+-\\\\s+' + '(' + src[t.XRANGEPLAIN] + ')' + '\\\\s*$';\n    tok('HYPHENRANGELOOSE');\n    src[t.HYPHENRANGELOOSE] = '^\\\\s*(' + src[t.XRANGEPLAINLOOSE] + ')' + '\\\\s+-\\\\s+' + '(' + src[t.XRANGEPLAINLOOSE] + ')' + '\\\\s*$'; // Star ranges basically just allow anything at all.\n\n    tok('STAR');\n    src[t.STAR] = '(<|>)?=?\\\\s*\\\\*'; // Compile to actual regexp objects.\n    // All are flag-free, unless they were created above with a flag.\n\n    for (var i = 0; i < R; i++) {\n      debug(i, src[i]);\n\n      if (!re[i]) {\n        re[i] = new RegExp(src[i]);\n      }\n    }\n\n    exports.parse = parse;\n\n    function parse(version, options) {\n      if (!options || _typeof(options) !== 'object') {\n        options = {\n          loose: !!options,\n          includePrerelease: false\n        };\n      }\n\n      if (version instanceof SemVer) {\n        return version;\n      }\n\n      if (typeof version !== 'string') {\n        return null;\n      }\n\n      if (version.length > MAX_LENGTH) {\n        return null;\n      }\n\n      var r = options.loose ? re[t.LOOSE] : re[t.FULL];\n\n      if (!r.test(version)) {\n        return null;\n      }\n\n      try {\n        return new SemVer(version, options);\n      } catch (er) {\n        return null;\n      }\n    }\n\n    exports.valid = valid;\n\n    function valid(version, options) {\n      var v = parse(version, options);\n      return v ? v.version : null;\n    }\n\n    exports.clean = clean;\n\n    function clean(version, options) {\n      var s = parse(version.trim().replace(/^[=v]+/, ''), options);\n      return s ? s.version : null;\n    }\n\n    exports.SemVer = SemVer;\n\n    function SemVer(version, options) {\n      if (!options || _typeof(options) !== 'object') {\n        options = {\n          loose: !!options,\n          includePrerelease: false\n        };\n      }\n\n      if (version instanceof SemVer) {\n        if (version.loose === options.loose) {\n          return version;\n        } else {\n          version = version.version;\n        }\n      } else if (typeof version !== 'string') {\n        throw new TypeError('Invalid Version: ' + version);\n      }\n\n      if (version.length > MAX_LENGTH) {\n        throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters');\n      }\n\n      if (!(this instanceof SemVer)) {\n        return new SemVer(version, options);\n      }\n\n      debug('SemVer', version, options);\n      this.options = options;\n      this.loose = !!options.loose;\n      var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);\n\n      if (!m) {\n        throw new TypeError('Invalid Version: ' + version);\n      }\n\n      this.raw = version; // these are actually numbers\n\n      this.major = +m[1];\n      this.minor = +m[2];\n      this.patch = +m[3];\n\n      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n        throw new TypeError('Invalid major version');\n      }\n\n      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n        throw new TypeError('Invalid minor version');\n      }\n\n      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n        throw new TypeError('Invalid patch version');\n      } // numberify any prerelease numeric ids\n\n\n      if (!m[4]) {\n        this.prerelease = [];\n      } else {\n        this.prerelease = m[4].split('.').map(function (id) {\n          if (/^[0-9]+$/.test(id)) {\n            var num = +id;\n\n            if (num >= 0 && num < MAX_SAFE_INTEGER) {\n              return num;\n            }\n          }\n\n          return id;\n        });\n      }\n\n      this.build = m[5] ? m[5].split('.') : [];\n      this.format();\n    }\n\n    SemVer.prototype.format = function () {\n      this.version = this.major + '.' + this.minor + '.' + this.patch;\n\n      if (this.prerelease.length) {\n        this.version += '-' + this.prerelease.join('.');\n      }\n\n      return this.version;\n    };\n\n    SemVer.prototype.toString = function () {\n      return this.version;\n    };\n\n    SemVer.prototype.compare = function (other) {\n      debug('SemVer.compare', this.version, this.options, other);\n\n      if (!(other instanceof SemVer)) {\n        other = new SemVer(other, this.options);\n      }\n\n      return this.compareMain(other) || this.comparePre(other);\n    };\n\n    SemVer.prototype.compareMain = function (other) {\n      if (!(other instanceof SemVer)) {\n        other = new SemVer(other, this.options);\n      }\n\n      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);\n    };\n\n    SemVer.prototype.comparePre = function (other) {\n      if (!(other instanceof SemVer)) {\n        other = new SemVer(other, this.options);\n      } // NOT having a prerelease is > having one\n\n\n      if (this.prerelease.length && !other.prerelease.length) {\n        return -1;\n      } else if (!this.prerelease.length && other.prerelease.length) {\n        return 1;\n      } else if (!this.prerelease.length && !other.prerelease.length) {\n        return 0;\n      }\n\n      var i = 0;\n\n      do {\n        var a = this.prerelease[i];\n        var b = other.prerelease[i];\n        debug('prerelease compare', i, a, b);\n\n        if (a === undefined && b === undefined) {\n          return 0;\n        } else if (b === undefined) {\n          return 1;\n        } else if (a === undefined) {\n          return -1;\n        } else if (a === b) {\n          continue;\n        } else {\n          return compareIdentifiers(a, b);\n        }\n      } while (++i);\n    };\n\n    SemVer.prototype.compareBuild = function (other) {\n      if (!(other instanceof SemVer)) {\n        other = new SemVer(other, this.options);\n      }\n\n      var i = 0;\n\n      do {\n        var a = this.build[i];\n        var b = other.build[i];\n        debug('prerelease compare', i, a, b);\n\n        if (a === undefined && b === undefined) {\n          return 0;\n        } else if (b === undefined) {\n          return 1;\n        } else if (a === undefined) {\n          return -1;\n        } else if (a === b) {\n          continue;\n        } else {\n          return compareIdentifiers(a, b);\n        }\n      } while (++i);\n    }; // preminor will bump the version up to the next minor release, and immediately\n    // down to pre-release. premajor and prepatch work the same way.\n\n\n    SemVer.prototype.inc = function (release, identifier) {\n      switch (release) {\n        case 'premajor':\n          this.prerelease.length = 0;\n          this.patch = 0;\n          this.minor = 0;\n          this.major++;\n          this.inc('pre', identifier);\n          break;\n\n        case 'preminor':\n          this.prerelease.length = 0;\n          this.patch = 0;\n          this.minor++;\n          this.inc('pre', identifier);\n          break;\n\n        case 'prepatch':\n          // If this is already a prerelease, it will bump to the next version\n          // drop any prereleases that might already exist, since they are not\n          // relevant at this point.\n          this.prerelease.length = 0;\n          this.inc('patch', identifier);\n          this.inc('pre', identifier);\n          break;\n        // If the input is a non-prerelease version, this acts the same as\n        // prepatch.\n\n        case 'prerelease':\n          if (this.prerelease.length === 0) {\n            this.inc('patch', identifier);\n          }\n\n          this.inc('pre', identifier);\n          break;\n\n        case 'major':\n          // If this is a pre-major version, bump up to the same major version.\n          // Otherwise increment major.\n          // 1.0.0-5 bumps to 1.0.0\n          // 1.1.0 bumps to 2.0.0\n          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {\n            this.major++;\n          }\n\n          this.minor = 0;\n          this.patch = 0;\n          this.prerelease = [];\n          break;\n\n        case 'minor':\n          // If this is a pre-minor version, bump up to the same minor version.\n          // Otherwise increment minor.\n          // 1.2.0-5 bumps to 1.2.0\n          // 1.2.1 bumps to 1.3.0\n          if (this.patch !== 0 || this.prerelease.length === 0) {\n            this.minor++;\n          }\n\n          this.patch = 0;\n          this.prerelease = [];\n          break;\n\n        case 'patch':\n          // If this is not a pre-release version, it will increment the patch.\n          // If it is a pre-release it will bump up to the same patch version.\n          // 1.2.0-5 patches to 1.2.0\n          // 1.2.0 patches to 1.2.1\n          if (this.prerelease.length === 0) {\n            this.patch++;\n          }\n\n          this.prerelease = [];\n          break;\n        // This probably shouldn't be used publicly.\n        // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n\n        case 'pre':\n          if (this.prerelease.length === 0) {\n            this.prerelease = [0];\n          } else {\n            var i = this.prerelease.length;\n\n            while (--i >= 0) {\n              if (typeof this.prerelease[i] === 'number') {\n                this.prerelease[i]++;\n                i = -2;\n              }\n            }\n\n            if (i === -1) {\n              // didn't increment anything\n              this.prerelease.push(0);\n            }\n          }\n\n          if (identifier) {\n            // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n            // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n            if (this.prerelease[0] === identifier) {\n              if (isNaN(this.prerelease[1])) {\n                this.prerelease = [identifier, 0];\n              }\n            } else {\n              this.prerelease = [identifier, 0];\n            }\n          }\n\n          break;\n\n        default:\n          throw new Error('invalid increment argument: ' + release);\n      }\n\n      this.format();\n      this.raw = this.version;\n      return this;\n    };\n\n    exports.inc = inc;\n\n    function inc(version, release, loose, identifier) {\n      if (typeof loose === 'string') {\n        identifier = loose;\n        loose = undefined;\n      }\n\n      try {\n        return new SemVer(version, loose).inc(release, identifier).version;\n      } catch (er) {\n        return null;\n      }\n    }\n\n    exports.diff = diff;\n\n    function diff(version1, version2) {\n      if (eq(version1, version2)) {\n        return null;\n      } else {\n        var v1 = parse(version1);\n        var v2 = parse(version2);\n        var prefix = '';\n\n        if (v1.prerelease.length || v2.prerelease.length) {\n          prefix = 'pre';\n          var defaultResult = 'prerelease';\n        }\n\n        for (var key in v1) {\n          if (key === 'major' || key === 'minor' || key === 'patch') {\n            if (v1[key] !== v2[key]) {\n              return prefix + key;\n            }\n          }\n        }\n\n        return defaultResult; // may be undefined\n      }\n    }\n\n    exports.compareIdentifiers = compareIdentifiers;\n    var numeric = /^[0-9]+$/;\n\n    function compareIdentifiers(a, b) {\n      var anum = numeric.test(a);\n      var bnum = numeric.test(b);\n\n      if (anum && bnum) {\n        a = +a;\n        b = +b;\n      }\n\n      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;\n    }\n\n    exports.rcompareIdentifiers = rcompareIdentifiers;\n\n    function rcompareIdentifiers(a, b) {\n      return compareIdentifiers(b, a);\n    }\n\n    exports.major = major;\n\n    function major(a, loose) {\n      return new SemVer(a, loose).major;\n    }\n\n    exports.minor = minor;\n\n    function minor(a, loose) {\n      return new SemVer(a, loose).minor;\n    }\n\n    exports.patch = patch;\n\n    function patch(a, loose) {\n      return new SemVer(a, loose).patch;\n    }\n\n    exports.compare = compare;\n\n    function compare(a, b, loose) {\n      return new SemVer(a, loose).compare(new SemVer(b, loose));\n    }\n\n    exports.compareLoose = compareLoose;\n\n    function compareLoose(a, b) {\n      return compare(a, b, true);\n    }\n\n    exports.compareBuild = compareBuild;\n\n    function compareBuild(a, b, loose) {\n      var versionA = new SemVer(a, loose);\n      var versionB = new SemVer(b, loose);\n      return versionA.compare(versionB) || versionA.compareBuild(versionB);\n    }\n\n    exports.rcompare = rcompare;\n\n    function rcompare(a, b, loose) {\n      return compare(b, a, loose);\n    }\n\n    exports.sort = sort;\n\n    function sort(list, loose) {\n      return list.sort(function (a, b) {\n        return exports.compareBuild(a, b, loose);\n      });\n    }\n\n    exports.rsort = rsort;\n\n    function rsort(list, loose) {\n      return list.sort(function (a, b) {\n        return exports.compareBuild(b, a, loose);\n      });\n    }\n\n    exports.gt = gt;\n\n    function gt(a, b, loose) {\n      return compare(a, b, loose) > 0;\n    }\n\n    exports.lt = lt;\n\n    function lt(a, b, loose) {\n      return compare(a, b, loose) < 0;\n    }\n\n    exports.eq = eq;\n\n    function eq(a, b, loose) {\n      return compare(a, b, loose) === 0;\n    }\n\n    exports.neq = neq;\n\n    function neq(a, b, loose) {\n      return compare(a, b, loose) !== 0;\n    }\n\n    exports.gte = gte;\n\n    function gte(a, b, loose) {\n      return compare(a, b, loose) >= 0;\n    }\n\n    exports.lte = lte;\n\n    function lte(a, b, loose) {\n      return compare(a, b, loose) <= 0;\n    }\n\n    exports.cmp = cmp;\n\n    function cmp(a, op, b, loose) {\n      switch (op) {\n        case '===':\n          if (_typeof(a) === 'object') a = a.version;\n          if (_typeof(b) === 'object') b = b.version;\n          return a === b;\n\n        case '!==':\n          if (_typeof(a) === 'object') a = a.version;\n          if (_typeof(b) === 'object') b = b.version;\n          return a !== b;\n\n        case '':\n        case '=':\n        case '==':\n          return eq(a, b, loose);\n\n        case '!=':\n          return neq(a, b, loose);\n\n        case '>':\n          return gt(a, b, loose);\n\n        case '>=':\n          return gte(a, b, loose);\n\n        case '<':\n          return lt(a, b, loose);\n\n        case '<=':\n          return lte(a, b, loose);\n\n        default:\n          throw new TypeError('Invalid operator: ' + op);\n      }\n    }\n\n    exports.Comparator = Comparator;\n\n    function Comparator(comp, options) {\n      if (!options || _typeof(options) !== 'object') {\n        options = {\n          loose: !!options,\n          includePrerelease: false\n        };\n      }\n\n      if (comp instanceof Comparator) {\n        if (comp.loose === !!options.loose) {\n          return comp;\n        } else {\n          comp = comp.value;\n        }\n      }\n\n      if (!(this instanceof Comparator)) {\n        return new Comparator(comp, options);\n      }\n\n      debug('comparator', comp, options);\n      this.options = options;\n      this.loose = !!options.loose;\n      this.parse(comp);\n\n      if (this.semver === ANY) {\n        this.value = '';\n      } else {\n        this.value = this.operator + this.semver.version;\n      }\n\n      debug('comp', this);\n    }\n\n    var ANY = {};\n\n    Comparator.prototype.parse = function (comp) {\n      var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n      var m = comp.match(r);\n\n      if (!m) {\n        throw new TypeError('Invalid comparator: ' + comp);\n      }\n\n      this.operator = m[1] !== undefined ? m[1] : '';\n\n      if (this.operator === '=') {\n        this.operator = '';\n      } // if it literally is just '>' or '' then allow anything.\n\n\n      if (!m[2]) {\n        this.semver = ANY;\n      } else {\n        this.semver = new SemVer(m[2], this.options.loose);\n      }\n    };\n\n    Comparator.prototype.toString = function () {\n      return this.value;\n    };\n\n    Comparator.prototype.test = function (version) {\n      debug('Comparator.test', version, this.options.loose);\n\n      if (this.semver === ANY || version === ANY) {\n        return true;\n      }\n\n      if (typeof version === 'string') {\n        try {\n          version = new SemVer(version, this.options);\n        } catch (er) {\n          return false;\n        }\n      }\n\n      return cmp(version, this.operator, this.semver, this.options);\n    };\n\n    Comparator.prototype.intersects = function (comp, options) {\n      if (!(comp instanceof Comparator)) {\n        throw new TypeError('a Comparator is required');\n      }\n\n      if (!options || _typeof(options) !== 'object') {\n        options = {\n          loose: !!options,\n          includePrerelease: false\n        };\n      }\n\n      var rangeTmp;\n\n      if (this.operator === '') {\n        if (this.value === '') {\n          return true;\n        }\n\n        rangeTmp = new Range(comp.value, options);\n        return satisfies(this.value, rangeTmp, options);\n      } else if (comp.operator === '') {\n        if (comp.value === '') {\n          return true;\n        }\n\n        rangeTmp = new Range(this.value, options);\n        return satisfies(comp.semver, rangeTmp, options);\n      }\n\n      var sameDirectionIncreasing = (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');\n      var sameDirectionDecreasing = (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');\n      var sameSemVer = this.semver.version === comp.semver.version;\n      var differentDirectionsInclusive = (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');\n      var oppositeDirectionsLessThan = cmp(this.semver, '<', comp.semver, options) && (this.operator === '>=' || this.operator === '>') && (comp.operator === '<=' || comp.operator === '<');\n      var oppositeDirectionsGreaterThan = cmp(this.semver, '>', comp.semver, options) && (this.operator === '<=' || this.operator === '<') && (comp.operator === '>=' || comp.operator === '>');\n      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;\n    };\n\n    exports.Range = Range;\n\n    function Range(range, options) {\n      if (!options || _typeof(options) !== 'object') {\n        options = {\n          loose: !!options,\n          includePrerelease: false\n        };\n      }\n\n      if (range instanceof Range) {\n        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {\n          return range;\n        } else {\n          return new Range(range.raw, options);\n        }\n      }\n\n      if (range instanceof Comparator) {\n        return new Range(range.value, options);\n      }\n\n      if (!(this instanceof Range)) {\n        return new Range(range, options);\n      }\n\n      this.options = options;\n      this.loose = !!options.loose;\n      this.includePrerelease = !!options.includePrerelease; // First, split based on boolean or ||\n\n      this.raw = range;\n      this.set = range.split(/\\s*\\|\\|\\s*/).map(function (range) {\n        return this.parseRange(range.trim());\n      }, this).filter(function (c) {\n        // throw out any that are not relevant for whatever reason\n        return c.length;\n      });\n\n      if (!this.set.length) {\n        throw new TypeError('Invalid SemVer Range: ' + range);\n      }\n\n      this.format();\n    }\n\n    Range.prototype.format = function () {\n      this.range = this.set.map(function (comps) {\n        return comps.join(' ').trim();\n      }).join('||').trim();\n      return this.range;\n    };\n\n    Range.prototype.toString = function () {\n      return this.range;\n    };\n\n    Range.prototype.parseRange = function (range) {\n      var loose = this.options.loose;\n      range = range.trim(); // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n\n      var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];\n      range = range.replace(hr, hyphenReplace);\n      debug('hyphen replace', range); // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n\n      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);\n      debug('comparator trim', range, re[t.COMPARATORTRIM]); // `~ 1.2.3` => `~1.2.3`\n\n      range = range.replace(re[t.TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`\n\n      range = range.replace(re[t.CARETTRIM], caretTrimReplace); // normalize spaces\n\n      range = range.split(/\\s+/).join(' '); // At this point, the range is completely trimmed and\n      // ready to be split into comparators.\n\n      var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n      var set = range.split(' ').map(function (comp) {\n        return parseComparator(comp, this.options);\n      }, this).join(' ').split(/\\s+/);\n\n      if (this.options.loose) {\n        // in loose mode, throw out any that are not valid comparators\n        set = set.filter(function (comp) {\n          return !!comp.match(compRe);\n        });\n      }\n\n      set = set.map(function (comp) {\n        return new Comparator(comp, this.options);\n      }, this);\n      return set;\n    };\n\n    Range.prototype.intersects = function (range, options) {\n      if (!(range instanceof Range)) {\n        throw new TypeError('a Range is required');\n      }\n\n      return this.set.some(function (thisComparators) {\n        return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {\n          return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {\n            return rangeComparators.every(function (rangeComparator) {\n              return thisComparator.intersects(rangeComparator, options);\n            });\n          });\n        });\n      });\n    }; // take a set of comparators and determine whether there\n    // exists a version which can satisfy it\n\n\n    function isSatisfiable(comparators, options) {\n      var result = true;\n      var remainingComparators = comparators.slice();\n      var testComparator = remainingComparators.pop();\n\n      while (result && remainingComparators.length) {\n        result = remainingComparators.every(function (otherComparator) {\n          return testComparator.intersects(otherComparator, options);\n        });\n        testComparator = remainingComparators.pop();\n      }\n\n      return result;\n    } // Mostly just for testing and legacy API reasons\n\n\n    exports.toComparators = toComparators;\n\n    function toComparators(range, options) {\n      return new Range(range, options).set.map(function (comp) {\n        return comp.map(function (c) {\n          return c.value;\n        }).join(' ').trim().split(' ');\n      });\n    } // comprised of xranges, tildes, stars, and gtlt's at this point.\n    // already replaced the hyphen ranges\n    // turn into a set of JUST comparators.\n\n\n    function parseComparator(comp, options) {\n      debug('comp', comp, options);\n      comp = replaceCarets(comp, options);\n      debug('caret', comp);\n      comp = replaceTildes(comp, options);\n      debug('tildes', comp);\n      comp = replaceXRanges(comp, options);\n      debug('xrange', comp);\n      comp = replaceStars(comp, options);\n      debug('stars', comp);\n      return comp;\n    }\n\n    function isX(id) {\n      return !id || id.toLowerCase() === 'x' || id === '*';\n    } // ~, ~> --> * (any, kinda silly)\n    // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n    // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n    // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n    // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n    // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\n\n\n    function replaceTildes(comp, options) {\n      return comp.trim().split(/\\s+/).map(function (comp) {\n        return replaceTilde(comp, options);\n      }).join(' ');\n    }\n\n    function replaceTilde(comp, options) {\n      var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];\n      return comp.replace(r, function (_, M, m, p, pr) {\n        debug('tilde', comp, _, M, m, p, pr);\n        var ret;\n\n        if (isX(M)) {\n          ret = '';\n        } else if (isX(m)) {\n          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n        } else if (isX(p)) {\n          // ~1.2 == >=1.2.0 <1.3.0\n          ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n        } else if (pr) {\n          debug('replaceTilde pr', pr);\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';\n        } else {\n          // ~1.2.3 == >=1.2.3 <1.3.0\n          ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';\n        }\n\n        debug('tilde return', ret);\n        return ret;\n      });\n    } // ^ --> * (any, kinda silly)\n    // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n    // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n    // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n    // ^1.2.3 --> >=1.2.3 <2.0.0\n    // ^1.2.0 --> >=1.2.0 <2.0.0\n\n\n    function replaceCarets(comp, options) {\n      return comp.trim().split(/\\s+/).map(function (comp) {\n        return replaceCaret(comp, options);\n      }).join(' ');\n    }\n\n    function replaceCaret(comp, options) {\n      debug('caret', comp, options);\n      var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];\n      return comp.replace(r, function (_, M, m, p, pr) {\n        debug('caret', comp, _, M, m, p, pr);\n        var ret;\n\n        if (isX(M)) {\n          ret = '';\n        } else if (isX(m)) {\n          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n        } else if (isX(p)) {\n          if (M === '0') {\n            ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n          } else {\n            ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';\n          }\n        } else if (pr) {\n          debug('replaceCaret pr', pr);\n\n          if (M === '0') {\n            if (m === '0') {\n              ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + m + '.' + (+p + 1);\n            } else {\n              ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';\n            }\n          } else {\n            ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + (+M + 1) + '.0.0';\n          }\n        } else {\n          debug('no pr');\n\n          if (M === '0') {\n            if (m === '0') {\n              ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1);\n            } else {\n              ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';\n            }\n          } else {\n            ret = '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';\n          }\n        }\n\n        debug('caret return', ret);\n        return ret;\n      });\n    }\n\n    function replaceXRanges(comp, options) {\n      debug('replaceXRanges', comp, options);\n      return comp.split(/\\s+/).map(function (comp) {\n        return replaceXRange(comp, options);\n      }).join(' ');\n    }\n\n    function replaceXRange(comp, options) {\n      comp = comp.trim();\n      var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];\n      return comp.replace(r, function (ret, gtlt, M, m, p, pr) {\n        debug('xRange', comp, ret, gtlt, M, m, p, pr);\n        var xM = isX(M);\n        var xm = xM || isX(m);\n        var xp = xm || isX(p);\n        var anyX = xp;\n\n        if (gtlt === '=' && anyX) {\n          gtlt = '';\n        } // if we're including prereleases in the match, then we need\n        // to fix this to -0, the lowest possible prerelease value\n\n\n        pr = options.includePrerelease ? '-0' : '';\n\n        if (xM) {\n          if (gtlt === '>' || gtlt === '<') {\n            // nothing is allowed\n            ret = '<0.0.0-0';\n          } else {\n            // nothing is forbidden\n            ret = '*';\n          }\n        } else if (gtlt && anyX) {\n          // we know patch is an x, because we have any x at all.\n          // replace X with 0\n          if (xm) {\n            m = 0;\n          }\n\n          p = 0;\n\n          if (gtlt === '>') {\n            // >1 => >=2.0.0\n            // >1.2 => >=1.3.0\n            // >1.2.3 => >= 1.2.4\n            gtlt = '>=';\n\n            if (xm) {\n              M = +M + 1;\n              m = 0;\n              p = 0;\n            } else {\n              m = +m + 1;\n              p = 0;\n            }\n          } else if (gtlt === '<=') {\n            // <=0.7.x is actually <0.8.0, since any 0.7.x should\n            // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n            gtlt = '<';\n\n            if (xm) {\n              M = +M + 1;\n            } else {\n              m = +m + 1;\n            }\n          }\n\n          ret = gtlt + M + '.' + m + '.' + p + pr;\n        } else if (xm) {\n          ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr;\n        } else if (xp) {\n          ret = '>=' + M + '.' + m + '.0' + pr + ' <' + M + '.' + (+m + 1) + '.0' + pr;\n        }\n\n        debug('xRange return', ret);\n        return ret;\n      });\n    } // Because * is AND-ed with everything else in the comparator,\n    // and '' means \"any version\", just remove the *s entirely.\n\n\n    function replaceStars(comp, options) {\n      debug('replaceStars', comp, options); // Looseness is ignored here.  star is always as loose as it gets!\n\n      return comp.trim().replace(re[t.STAR], '');\n    } // This function is passed to string.replace(re[t.HYPHENRANGE])\n    // M, m, patch, prerelease, build\n    // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n    // 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n    // 1.2 - 3.4 => >=1.2.0 <3.5.0\n\n\n    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {\n      if (isX(fM)) {\n        from = '';\n      } else if (isX(fm)) {\n        from = '>=' + fM + '.0.0';\n      } else if (isX(fp)) {\n        from = '>=' + fM + '.' + fm + '.0';\n      } else {\n        from = '>=' + from;\n      }\n\n      if (isX(tM)) {\n        to = '';\n      } else if (isX(tm)) {\n        to = '<' + (+tM + 1) + '.0.0';\n      } else if (isX(tp)) {\n        to = '<' + tM + '.' + (+tm + 1) + '.0';\n      } else if (tpr) {\n        to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\n      } else {\n        to = '<=' + to;\n      }\n\n      return (from + ' ' + to).trim();\n    } // if ANY of the sets match ALL of its comparators, then pass\n\n\n    Range.prototype.test = function (version) {\n      if (!version) {\n        return false;\n      }\n\n      if (typeof version === 'string') {\n        try {\n          version = new SemVer(version, this.options);\n        } catch (er) {\n          return false;\n        }\n      }\n\n      for (var i = 0; i < this.set.length; i++) {\n        if (testSet(this.set[i], version, this.options)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    function testSet(set, version, options) {\n      for (var i = 0; i < set.length; i++) {\n        if (!set[i].test(version)) {\n          return false;\n        }\n      }\n\n      if (version.prerelease.length && !options.includePrerelease) {\n        // Find the set of versions that are allowed to have prereleases\n        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n        // That should allow `1.2.3-pr.2` to pass.\n        // However, `1.2.4-alpha.notready` should NOT be allowed,\n        // even though it's within the range set by the comparators.\n        for (i = 0; i < set.length; i++) {\n          debug(set[i].semver);\n\n          if (set[i].semver === ANY) {\n            continue;\n          }\n\n          if (set[i].semver.prerelease.length > 0) {\n            var allowed = set[i].semver;\n\n            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {\n              return true;\n            }\n          }\n        } // Version has a -pre, but it's not one of the ones we like.\n\n\n        return false;\n      }\n\n      return true;\n    }\n\n    exports.satisfies = satisfies;\n\n    function satisfies(version, range, options) {\n      try {\n        range = new Range(range, options);\n      } catch (er) {\n        return false;\n      }\n\n      return range.test(version);\n    }\n\n    exports.maxSatisfying = maxSatisfying;\n\n    function maxSatisfying(versions, range, options) {\n      var max = null;\n      var maxSV = null;\n\n      try {\n        var rangeObj = new Range(range, options);\n      } catch (er) {\n        return null;\n      }\n\n      versions.forEach(function (v) {\n        if (rangeObj.test(v)) {\n          // satisfies(v, range, options)\n          if (!max || maxSV.compare(v) === -1) {\n            // compare(max, v, true)\n            max = v;\n            maxSV = new SemVer(max, options);\n          }\n        }\n      });\n      return max;\n    }\n\n    exports.minSatisfying = minSatisfying;\n\n    function minSatisfying(versions, range, options) {\n      var min = null;\n      var minSV = null;\n\n      try {\n        var rangeObj = new Range(range, options);\n      } catch (er) {\n        return null;\n      }\n\n      versions.forEach(function (v) {\n        if (rangeObj.test(v)) {\n          // satisfies(v, range, options)\n          if (!min || minSV.compare(v) === 1) {\n            // compare(min, v, true)\n            min = v;\n            minSV = new SemVer(min, options);\n          }\n        }\n      });\n      return min;\n    }\n\n    exports.minVersion = minVersion;\n\n    function minVersion(range, loose) {\n      range = new Range(range, loose);\n      var minver = new SemVer('0.0.0');\n\n      if (range.test(minver)) {\n        return minver;\n      }\n\n      minver = new SemVer('0.0.0-0');\n\n      if (range.test(minver)) {\n        return minver;\n      }\n\n      minver = null;\n\n      for (var i = 0; i < range.set.length; ++i) {\n        var comparators = range.set[i];\n        comparators.forEach(function (comparator) {\n          // Clone to avoid manipulating the comparator's semver object.\n          var compver = new SemVer(comparator.semver.version);\n\n          switch (comparator.operator) {\n            case '>':\n              if (compver.prerelease.length === 0) {\n                compver.patch++;\n              } else {\n                compver.prerelease.push(0);\n              }\n\n              compver.raw = compver.format();\n\n            /* fallthrough */\n\n            case '':\n            case '>=':\n              if (!minver || gt(minver, compver)) {\n                minver = compver;\n              }\n\n              break;\n\n            case '<':\n            case '<=':\n              /* Ignore maximum versions */\n              break;\n\n            /* istanbul ignore next */\n\n            default:\n              throw new Error('Unexpected operation: ' + comparator.operator);\n          }\n        });\n      }\n\n      if (minver && range.test(minver)) {\n        return minver;\n      }\n\n      return null;\n    }\n\n    exports.validRange = validRange;\n\n    function validRange(range, options) {\n      try {\n        // Return '*' instead of '' so that truthiness works.\n        // This will throw if it's invalid anyway\n        return new Range(range, options).range || '*';\n      } catch (er) {\n        return null;\n      }\n    } // Determine if version is less than all the versions possible in the range\n\n\n    exports.ltr = ltr;\n\n    function ltr(version, range, options) {\n      return outside(version, range, '<', options);\n    } // Determine if version is greater than all the versions possible in the range.\n\n\n    exports.gtr = gtr;\n\n    function gtr(version, range, options) {\n      return outside(version, range, '>', options);\n    }\n\n    exports.outside = outside;\n\n    function outside(version, range, hilo, options) {\n      version = new SemVer(version, options);\n      range = new Range(range, options);\n      var gtfn, ltefn, ltfn, comp, ecomp;\n\n      switch (hilo) {\n        case '>':\n          gtfn = gt;\n          ltefn = lte;\n          ltfn = lt;\n          comp = '>';\n          ecomp = '>=';\n          break;\n\n        case '<':\n          gtfn = lt;\n          ltefn = gte;\n          ltfn = gt;\n          comp = '<';\n          ecomp = '<=';\n          break;\n\n        default:\n          throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n      } // If it satisifes the range it is not outside\n\n\n      if (satisfies(version, range, options)) {\n        return false;\n      } // From now on, variable terms are as if we're in \"gtr\" mode.\n      // but note that everything is flipped for the \"ltr\" function.\n\n\n      for (var i = 0; i < range.set.length; ++i) {\n        var comparators = range.set[i];\n        var high = null;\n        var low = null;\n        comparators.forEach(function (comparator) {\n          if (comparator.semver === ANY) {\n            comparator = new Comparator('>=0.0.0');\n          }\n\n          high = high || comparator;\n          low = low || comparator;\n\n          if (gtfn(comparator.semver, high.semver, options)) {\n            high = comparator;\n          } else if (ltfn(comparator.semver, low.semver, options)) {\n            low = comparator;\n          }\n        }); // If the edge version comparator has a operator then our version\n        // isn't outside it\n\n        if (high.operator === comp || high.operator === ecomp) {\n          return false;\n        } // If the lowest version comparator has an operator and our version\n        // is less than it then it isn't higher than the range\n\n\n        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {\n          return false;\n        } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    exports.prerelease = prerelease;\n\n    function prerelease(version, options) {\n      var parsed = parse(version, options);\n      return parsed && parsed.prerelease.length ? parsed.prerelease : null;\n    }\n\n    exports.intersects = intersects;\n\n    function intersects(r1, r2, options) {\n      r1 = new Range(r1, options);\n      r2 = new Range(r2, options);\n      return r1.intersects(r2);\n    }\n\n    exports.coerce = coerce;\n\n    function coerce(version, options) {\n      if (version instanceof SemVer) {\n        return version;\n      }\n\n      if (typeof version === 'number') {\n        version = String(version);\n      }\n\n      if (typeof version !== 'string') {\n        return null;\n      }\n\n      options = options || {};\n      var match = null;\n\n      if (!options.rtl) {\n        match = version.match(re[t.COERCE]);\n      } else {\n        // Find the right-most coercible string that does not share\n        // a terminus with a more left-ward coercible string.\n        // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n        //\n        // Walk through the string checking with a /g regexp\n        // Manually set the index so as to pick up overlapping matches.\n        // Stop when we get a match that ends at the string end, since no\n        // coercible string can be more right-ward without the same terminus.\n        var next;\n\n        while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {\n          if (!match || next.index + next[0].length !== match.index + match[0].length) {\n            match = next;\n          }\n\n          re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;\n        } // leave it in a clean state\n\n\n        re[t.COERCERTL].lastIndex = -1;\n      }\n\n      if (match === null) {\n        return null;\n      }\n\n      return parse(match[2] + '.' + (match[3] || '0') + '.' + (match[4] || '0'), options);\n    }\n  });\n  var semver_1 = semver.SEMVER_SPEC_VERSION;\n  var semver_2 = semver.re;\n  var semver_3 = semver.src;\n  var semver_4 = semver.tokens;\n  var semver_5 = semver.parse;\n  var semver_6 = semver.valid;\n  var semver_7 = semver.clean;\n  var semver_8 = semver.SemVer;\n  var semver_9 = semver.inc;\n  var semver_10 = semver.diff;\n  var semver_11 = semver.compareIdentifiers;\n  var semver_12 = semver.rcompareIdentifiers;\n  var semver_13 = semver.major;\n  var semver_14 = semver.minor;\n  var semver_15 = semver.patch;\n  var semver_16 = semver.compare;\n  var semver_17 = semver.compareLoose;\n  var semver_18 = semver.compareBuild;\n  var semver_19 = semver.rcompare;\n  var semver_20 = semver.sort;\n  var semver_21 = semver.rsort;\n  var semver_22 = semver.gt;\n  var semver_23 = semver.lt;\n  var semver_24 = semver.eq;\n  var semver_25 = semver.neq;\n  var semver_26 = semver.gte;\n  var semver_27 = semver.lte;\n  var semver_28 = semver.cmp;\n  var semver_29 = semver.Comparator;\n  var semver_30 = semver.Range;\n  var semver_31 = semver.toComparators;\n  var semver_32 = semver.satisfies;\n  var semver_33 = semver.maxSatisfying;\n  var semver_34 = semver.minSatisfying;\n  var semver_35 = semver.minVersion;\n  var semver_36 = semver.validRange;\n  var semver_37 = semver.ltr;\n  var semver_38 = semver.gtr;\n  var semver_39 = semver.outside;\n  var semver_40 = semver.prerelease;\n  var semver_41 = semver.intersects;\n  var semver_42 = semver.coerce;\n\n  var arrayify = function arrayify(object, keyName) {\n    return Object.keys(object).reduce(function (array, key) {\n      return array.concat(Object.assign(_defineProperty({}, keyName, key), object[key]));\n    }, []);\n  };\n\n  var dedent_1 = createCommonjsModule(function (module) {\n\n    function dedent(strings) {\n      var raw = void 0;\n\n      if (typeof strings === \"string\") {\n        // dedent can be used as a plain function\n        raw = [strings];\n      } else {\n        raw = strings.raw;\n      } // first, perform interpolation\n\n\n      var result = \"\";\n\n      for (var i = 0; i < raw.length; i++) {\n        result += raw[i]. // join lines when there is a suppressed newline\n        replace(/\\\\\\n[ \\t]*/g, \"\"). // handle escaped backticks\n        replace(/\\\\`/g, \"`\");\n\n        if (i < (arguments.length <= 1 ? 0 : arguments.length - 1)) {\n          result += arguments.length <= i + 1 ? undefined : arguments[i + 1];\n        }\n      } // now strip indentation\n\n\n      var lines = result.split(\"\\n\");\n      var mindent = null;\n      lines.forEach(function (l) {\n        var m = l.match(/^(\\s+)\\S+/);\n\n        if (m) {\n          var indent = m[1].length;\n\n          if (!mindent) {\n            // this is the first indented line\n            mindent = indent;\n          } else {\n            mindent = Math.min(mindent, indent);\n          }\n        }\n      });\n\n      if (mindent !== null) {\n        result = lines.map(function (l) {\n          return l[0] === \" \" ? l.slice(mindent) : l;\n        }).join(\"\\n\");\n      } // dedent eats leading and trailing whitespace too\n\n\n      result = result.trim(); // handle escaped newlines at the end to ensure they don't get stripped too\n\n      return result.replace(/\\\\n/g, \"\\n\");\n    }\n\n    {\n      module.exports = dedent;\n    }\n  });\n\n  function _templateObject6() {\n    var data = _taggedTemplateLiteral([\"\\n      Require either '@prettier' or '@format' to be present in the file's first docblock comment\\n      in order for it to be formatted.\\n    \"]);\n\n    _templateObject6 = function _templateObject6() {\n      return data;\n    };\n\n    return data;\n  }\n\n  function _templateObject5() {\n    var data = _taggedTemplateLiteral([\"\\n      Format code starting at a given character offset.\\n      The range will extend backwards to the start of the first line containing the selected statement.\\n      This option cannot be used with --cursor-offset.\\n    \"]);\n\n    _templateObject5 = function _templateObject5() {\n      return data;\n    };\n\n    return data;\n  }\n\n  function _templateObject4() {\n    var data = _taggedTemplateLiteral([\"\\n      Format code ending at a given character offset (exclusive).\\n      The range will extend forwards to the end of the selected statement.\\n      This option cannot be used with --cursor-offset.\\n    \"]);\n\n    _templateObject4 = function _templateObject4() {\n      return data;\n    };\n\n    return data;\n  }\n\n  function _templateObject3() {\n    var data = _taggedTemplateLiteral([\"\\n      Custom directory that contains prettier plugins in node_modules subdirectory.\\n      Overrides default behavior when plugins are searched relatively to the location of Prettier.\\n      Multiple values are accepted.\\n    \"]);\n\n    _templateObject3 = function _templateObject3() {\n      return data;\n    };\n\n    return data;\n  }\n\n  function _templateObject2() {\n    var data = _taggedTemplateLiteral([\"\\n          Maintain existing\\n          (mixed values within one file are normalised by looking at what's used after the first line)\\n        \"]);\n\n    _templateObject2 = function _templateObject2() {\n      return data;\n    };\n\n    return data;\n  }\n\n  function _templateObject() {\n    var data = _taggedTemplateLiteral([\"\\n      Print (to stderr) where a cursor at the given position would move to after formatting.\\n      This option cannot be used with --range-start and --range-end.\\n    \"]);\n\n    _templateObject = function _templateObject() {\n      return data;\n    };\n\n    return data;\n  }\n\n  var CATEGORY_CONFIG = \"Config\";\n  var CATEGORY_EDITOR = \"Editor\";\n  var CATEGORY_FORMAT = \"Format\";\n  var CATEGORY_OTHER = \"Other\";\n  var CATEGORY_OUTPUT = \"Output\";\n  var CATEGORY_GLOBAL = \"Global\";\n  var CATEGORY_SPECIAL = \"Special\";\n  /**\n   * @typedef {Object} OptionInfo\n   * @property {string} [since] - available since version\n   * @property {string} category\n   * @property {'int' | 'boolean' | 'choice' | 'path'} type\n   * @property {boolean} [array] - indicate it's an array of the specified type\n   * @property {OptionValueInfo} [default]\n   * @property {OptionRangeInfo} [range] - for type int\n   * @property {string} description\n   * @property {string} [deprecated] - deprecated since version\n   * @property {OptionRedirectInfo} [redirect] - redirect deprecated option\n   * @property {(value: any) => boolean} [exception]\n   * @property {OptionChoiceInfo[]} [choices] - for type choice\n   * @property {string} [cliName]\n   * @property {string} [cliCategory]\n   * @property {string} [cliDescription]\n   *\n   * @typedef {number | boolean | string} OptionValue\n   * @typedef {OptionValue | [{ value: OptionValue[] }] | Array<{ since: string, value: OptionValue}>} OptionValueInfo\n   *\n   * @typedef {Object} OptionRedirectInfo\n   * @property {string} option\n   * @property {OptionValue} value\n   *\n   * @typedef {Object} OptionRangeInfo\n   * @property {number} start - recommended range start\n   * @property {number} end - recommended range end\n   * @property {number} step - recommended range step\n   *\n   * @typedef {Object} OptionChoiceInfo\n   * @property {boolean | string} value - boolean for the option that is originally boolean type\n   * @property {string} description\n   * @property {string} [since] - undefined if available since the first version of the option\n   * @property {string} [deprecated] - deprecated since version\n   * @property {OptionValueInfo} [redirect] - redirect deprecated value\n   */\n\n  /** @type {{ [name: string]: OptionInfo }} */\n\n  var options = {\n    cursorOffset: {\n      since: \"1.4.0\",\n      category: CATEGORY_SPECIAL,\n      type: \"int\",\n      default: -1,\n      range: {\n        start: -1,\n        end: Infinity,\n        step: 1\n      },\n      description: dedent_1(_templateObject()),\n      cliCategory: CATEGORY_EDITOR\n    },\n    endOfLine: {\n      since: \"1.15.0\",\n      category: CATEGORY_GLOBAL,\n      type: \"choice\",\n      default: \"auto\",\n      description: \"Which end of line characters to apply.\",\n      choices: [{\n        value: \"auto\",\n        description: dedent_1(_templateObject2())\n      }, {\n        value: \"lf\",\n        description: \"Line Feed only (\\\\n), common on Linux and macOS as well as inside git repos\"\n      }, {\n        value: \"crlf\",\n        description: \"Carriage Return + Line Feed characters (\\\\r\\\\n), common on Windows\"\n      }, {\n        value: \"cr\",\n        description: \"Carriage Return character only (\\\\r), used very rarely\"\n      }]\n    },\n    filepath: {\n      since: \"1.4.0\",\n      category: CATEGORY_SPECIAL,\n      type: \"path\",\n      description: \"Specify the input filepath. This will be used to do parser inference.\",\n      cliName: \"stdin-filepath\",\n      cliCategory: CATEGORY_OTHER,\n      cliDescription: \"Path to the file to pretend that stdin comes from.\"\n    },\n    insertPragma: {\n      since: \"1.8.0\",\n      category: CATEGORY_SPECIAL,\n      type: \"boolean\",\n      default: false,\n      description: \"Insert @format pragma into file's first docblock comment.\",\n      cliCategory: CATEGORY_OTHER\n    },\n    parser: {\n      since: \"0.0.10\",\n      category: CATEGORY_GLOBAL,\n      type: \"choice\",\n      default: [{\n        since: \"0.0.10\",\n        value: \"babylon\"\n      }, {\n        since: \"1.13.0\",\n        value: undefined\n      }],\n      description: \"Which parser to use.\",\n      exception: function exception(value) {\n        return typeof value === \"string\" || typeof value === \"function\";\n      },\n      choices: [{\n        value: \"flow\",\n        description: \"Flow\"\n      }, {\n        value: \"babylon\",\n        description: \"JavaScript\",\n        deprecated: \"1.16.0\",\n        redirect: \"babel\"\n      }, {\n        value: \"babel\",\n        since: \"1.16.0\",\n        description: \"JavaScript\"\n      }, {\n        value: \"babel-flow\",\n        since: \"1.16.0\",\n        description: \"Flow\"\n      }, {\n        value: \"typescript\",\n        since: \"1.4.0\",\n        description: \"TypeScript\"\n      }, {\n        value: \"css\",\n        since: \"1.7.1\",\n        description: \"CSS\"\n      }, {\n        value: \"postcss\",\n        since: \"1.4.0\",\n        description: \"CSS/Less/SCSS\",\n        deprecated: \"1.7.1\",\n        redirect: \"css\"\n      }, {\n        value: \"less\",\n        since: \"1.7.1\",\n        description: \"Less\"\n      }, {\n        value: \"scss\",\n        since: \"1.7.1\",\n        description: \"SCSS\"\n      }, {\n        value: \"json\",\n        since: \"1.5.0\",\n        description: \"JSON\"\n      }, {\n        value: \"json5\",\n        since: \"1.13.0\",\n        description: \"JSON5\"\n      }, {\n        value: \"json-stringify\",\n        since: \"1.13.0\",\n        description: \"JSON.stringify\"\n      }, {\n        value: \"graphql\",\n        since: \"1.5.0\",\n        description: \"GraphQL\"\n      }, {\n        value: \"markdown\",\n        since: \"1.8.0\",\n        description: \"Markdown\"\n      }, {\n        value: \"mdx\",\n        since: \"1.15.0\",\n        description: \"MDX\"\n      }, {\n        value: \"vue\",\n        since: \"1.10.0\",\n        description: \"Vue\"\n      }, {\n        value: \"yaml\",\n        since: \"1.14.0\",\n        description: \"YAML\"\n      }, {\n        value: \"glimmer\",\n        since: null,\n        description: \"Handlebars\"\n      }, {\n        value: \"html\",\n        since: \"1.15.0\",\n        description: \"HTML\"\n      }, {\n        value: \"angular\",\n        since: \"1.15.0\",\n        description: \"Angular\"\n      }, {\n        value: \"lwc\",\n        since: \"1.17.0\",\n        description: \"Lightning Web Components\"\n      }]\n    },\n    plugins: {\n      since: \"1.10.0\",\n      type: \"path\",\n      array: true,\n      default: [{\n        value: []\n      }],\n      category: CATEGORY_GLOBAL,\n      description: \"Add a plugin. Multiple plugins can be passed as separate `--plugin`s.\",\n      exception: function exception(value) {\n        return typeof value === \"string\" || _typeof(value) === \"object\";\n      },\n      cliName: \"plugin\",\n      cliCategory: CATEGORY_CONFIG\n    },\n    pluginSearchDirs: {\n      since: \"1.13.0\",\n      type: \"path\",\n      array: true,\n      default: [{\n        value: []\n      }],\n      category: CATEGORY_GLOBAL,\n      description: dedent_1(_templateObject3()),\n      exception: function exception(value) {\n        return typeof value === \"string\" || _typeof(value) === \"object\";\n      },\n      cliName: \"plugin-search-dir\",\n      cliCategory: CATEGORY_CONFIG\n    },\n    printWidth: {\n      since: \"0.0.0\",\n      category: CATEGORY_GLOBAL,\n      type: \"int\",\n      default: 80,\n      description: \"The line length where Prettier will try wrap.\",\n      range: {\n        start: 0,\n        end: Infinity,\n        step: 1\n      }\n    },\n    rangeEnd: {\n      since: \"1.4.0\",\n      category: CATEGORY_SPECIAL,\n      type: \"int\",\n      default: Infinity,\n      range: {\n        start: 0,\n        end: Infinity,\n        step: 1\n      },\n      description: dedent_1(_templateObject4()),\n      cliCategory: CATEGORY_EDITOR\n    },\n    rangeStart: {\n      since: \"1.4.0\",\n      category: CATEGORY_SPECIAL,\n      type: \"int\",\n      default: 0,\n      range: {\n        start: 0,\n        end: Infinity,\n        step: 1\n      },\n      description: dedent_1(_templateObject5()),\n      cliCategory: CATEGORY_EDITOR\n    },\n    requirePragma: {\n      since: \"1.7.0\",\n      category: CATEGORY_SPECIAL,\n      type: \"boolean\",\n      default: false,\n      description: dedent_1(_templateObject6()),\n      cliCategory: CATEGORY_OTHER\n    },\n    tabWidth: {\n      type: \"int\",\n      category: CATEGORY_GLOBAL,\n      default: 2,\n      description: \"Number of spaces per indentation level.\",\n      range: {\n        start: 0,\n        end: Infinity,\n        step: 1\n      }\n    },\n    useFlowParser: {\n      since: \"0.0.0\",\n      category: CATEGORY_GLOBAL,\n      type: \"boolean\",\n      default: [{\n        since: \"0.0.0\",\n        value: false\n      }, {\n        since: \"1.15.0\",\n        value: undefined\n      }],\n      deprecated: \"0.0.10\",\n      description: \"Use flow parser.\",\n      redirect: {\n        option: \"parser\",\n        value: \"flow\"\n      },\n      cliName: \"flow-parser\"\n    },\n    useTabs: {\n      since: \"1.0.0\",\n      category: CATEGORY_GLOBAL,\n      type: \"boolean\",\n      default: false,\n      description: \"Indent with tabs instead of spaces.\"\n    }\n  };\n  var coreOptions = {\n    CATEGORY_CONFIG: CATEGORY_CONFIG,\n    CATEGORY_EDITOR: CATEGORY_EDITOR,\n    CATEGORY_FORMAT: CATEGORY_FORMAT,\n    CATEGORY_OTHER: CATEGORY_OTHER,\n    CATEGORY_OUTPUT: CATEGORY_OUTPUT,\n    CATEGORY_GLOBAL: CATEGORY_GLOBAL,\n    CATEGORY_SPECIAL: CATEGORY_SPECIAL,\n    options: options\n  };\n\n  var require$$0 = getCjsExportFromNamespace(_package$1);\n\n  var currentVersion = require$$0.version;\n  var coreOptions$1 = coreOptions.options;\n\n  function getSupportInfo(version, opts) {\n    opts = Object.assign({\n      plugins: [],\n      showUnreleased: false,\n      showDeprecated: false,\n      showInternal: false\n    }, opts);\n\n    if (!version) {\n      // pre-release version is smaller than the normal version in semver,\n      // we need to treat it as the normal one so as to test new features.\n      version = currentVersion.split(\"-\", 1)[0];\n    }\n\n    var plugins = opts.plugins;\n    var options = arrayify(Object.assign(plugins.reduce(function (currentOptions, plugin) {\n      return Object.assign(currentOptions, plugin.options);\n    }, {}), coreOptions$1), \"name\").sort(function (a, b) {\n      return a.name === b.name ? 0 : a.name < b.name ? -1 : 1;\n    }).filter(filterSince).filter(filterDeprecated).map(mapDeprecated).map(mapInternal).map(function (option) {\n      var newOption = Object.assign({}, option);\n\n      if (Array.isArray(newOption.default)) {\n        newOption.default = newOption.default.length === 1 ? newOption.default[0].value : newOption.default.filter(filterSince).sort(function (info1, info2) {\n          return semver.compare(info2.since, info1.since);\n        })[0].value;\n      }\n\n      if (Array.isArray(newOption.choices)) {\n        newOption.choices = newOption.choices.filter(filterSince).filter(filterDeprecated).map(mapDeprecated);\n      }\n\n      return newOption;\n    }).map(function (option) {\n      var filteredPlugins = plugins.filter(function (plugin) {\n        return plugin.defaultOptions && plugin.defaultOptions[option.name] !== undefined;\n      });\n      var pluginDefaults = filteredPlugins.reduce(function (reduced, plugin) {\n        reduced[plugin.name] = plugin.defaultOptions[option.name];\n        return reduced;\n      }, {});\n      return Object.assign(option, {\n        pluginDefaults: pluginDefaults\n      });\n    });\n    var usePostCssParser = semver.lt(version, \"1.7.1\");\n    var useBabylonParser = semver.lt(version, \"1.16.0\");\n    var languages = plugins.reduce(function (all, plugin) {\n      return all.concat(plugin.languages || []);\n    }, []).filter(filterSince).map(function (language) {\n      // Prevent breaking changes\n      if (language.name === \"Markdown\") {\n        return Object.assign({}, language, {\n          parsers: [\"markdown\"]\n        });\n      }\n\n      if (language.name === \"TypeScript\") {\n        return Object.assign({}, language, {\n          parsers: [\"typescript\"]\n        });\n      } // \"babylon\" was renamed to \"babel\" in 1.16.0\n\n\n      if (useBabylonParser && language.parsers.indexOf(\"babel\") !== -1) {\n        return Object.assign({}, language, {\n          parsers: language.parsers.map(function (parser) {\n            return parser === \"babel\" ? \"babylon\" : parser;\n          })\n        });\n      }\n\n      if (usePostCssParser && (language.name === \"CSS\" || language.group === \"CSS\")) {\n        return Object.assign({}, language, {\n          parsers: [\"postcss\"]\n        });\n      }\n\n      return language;\n    });\n    return {\n      languages: languages,\n      options: options\n    };\n\n    function filterSince(object) {\n      return opts.showUnreleased || !(\"since\" in object) || object.since && semver.gte(version, object.since);\n    }\n\n    function filterDeprecated(object) {\n      return opts.showDeprecated || !(\"deprecated\" in object) || object.deprecated && semver.lt(version, object.deprecated);\n    }\n\n    function mapDeprecated(object) {\n      if (!object.deprecated || opts.showDeprecated) {\n        return object;\n      }\n\n      var newObject = Object.assign({}, object);\n      delete newObject.deprecated;\n      delete newObject.redirect;\n      return newObject;\n    }\n\n    function mapInternal(object) {\n      if (opts.showInternal) {\n        return object;\n      }\n\n      var newObject = Object.assign({}, object);\n      delete newObject.cliName;\n      delete newObject.cliCategory;\n      delete newObject.cliDescription;\n      return newObject;\n    }\n  }\n\n  var support = {\n    getSupportInfo: getSupportInfo\n  };\n\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n  See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\n\n  /* global Reflect, Promise */\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  function __extends(d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n\n  var _assign = function __assign() {\n    _assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) {\n          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n      }\n\n      return t;\n    };\n\n    return _assign.apply(this, arguments);\n  };\n  function __rest(s, e) {\n    var t = {};\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    }\n\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n  }\n  function __decorate(decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n      if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    }\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  }\n  function __param(paramIndex, decorator) {\n    return function (target, key) {\n      decorator(target, key, paramIndex);\n    };\n  }\n  function __metadata(metadataKey, metadataValue) {\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n  }\n  function __awaiter(thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      function step(result) {\n        result.done ? resolve(result.value) : new P(function (resolve) {\n          resolve(result.value);\n        }).then(fulfilled, rejected);\n      }\n\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  }\n  function __generator(thisArg, body) {\n    var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n        f,\n        y,\n        t,\n        g;\n    return g = {\n      next: verb(0),\n      \"throw\": verb(1),\n      \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n      return this;\n    }), g;\n\n    function verb(n) {\n      return function (v) {\n        return step([n, v]);\n      };\n    }\n\n    function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n\n      while (_) {\n        try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n      }\n\n      if (op[0] & 5) throw op[1];\n      return {\n        value: op[0] ? op[1] : void 0,\n        done: true\n      };\n    }\n  }\n  function __exportStar(m, exports) {\n    for (var p in m) {\n      if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n    }\n  }\n  function __values(o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n        i = 0;\n    if (m) return m.call(o);\n    return {\n      next: function next() {\n        if (o && i >= o.length) o = void 0;\n        return {\n          value: o && o[i++],\n          done: !o\n        };\n      }\n    };\n  }\n  function __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o),\n        r,\n        ar = [],\n        e;\n\n    try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n        ar.push(r.value);\n      }\n    } catch (error) {\n      e = {\n        error: error\n      };\n    } finally {\n      try {\n        if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      } finally {\n        if (e) throw e.error;\n      }\n    }\n\n    return ar;\n  }\n  function __spread() {\n    for (var ar = [], i = 0; i < arguments.length; i++) {\n      ar = ar.concat(__read(arguments[i]));\n    }\n\n    return ar;\n  }\n  function __spreadArrays() {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n      s += arguments[i].length;\n    }\n\n    for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n        r[k] = a[j];\n      }\n    }\n\n    return r;\n  }\n  function __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n  }\n  function __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []),\n        i,\n        q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n      return this;\n    }, i;\n\n    function verb(n) {\n      if (g[n]) i[n] = function (v) {\n        return new Promise(function (a, b) {\n          q.push([n, v, a, b]) > 1 || resume(n, v);\n        });\n      };\n    }\n\n    function resume(n, v) {\n      try {\n        step(g[n](v));\n      } catch (e) {\n        settle(q[0][3], e);\n      }\n    }\n\n    function step(r) {\n      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n\n    function fulfill(value) {\n      resume(\"next\", value);\n    }\n\n    function reject(value) {\n      resume(\"throw\", value);\n    }\n\n    function settle(f, v) {\n      if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n  }\n  function __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) {\n      throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function () {\n      return this;\n    }, i;\n\n    function verb(n, f) {\n      i[n] = o[n] ? function (v) {\n        return (p = !p) ? {\n          value: __await(o[n](v)),\n          done: n === \"return\"\n        } : f ? f(v) : v;\n      } : f;\n    }\n  }\n  function __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator],\n        i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n      return this;\n    }, i);\n\n    function verb(n) {\n      i[n] = o[n] && function (v) {\n        return new Promise(function (resolve, reject) {\n          v = o[n](v), settle(resolve, reject, v.done, v.value);\n        });\n      };\n    }\n\n    function settle(resolve, reject, d, v) {\n      Promise.resolve(v).then(function (v) {\n        resolve({\n          value: v,\n          done: d\n        });\n      }, reject);\n    }\n  }\n  function __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n      Object.defineProperty(cooked, \"raw\", {\n        value: raw\n      });\n    } else {\n      cooked.raw = raw;\n    }\n\n    return cooked;\n  }\n  function __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) {\n      if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    }\n    result.default = mod;\n    return result;\n  }\n  function __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n      default: mod\n    };\n  }\n\n  var tslib_es6 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    __extends: __extends,\n    get __assign () { return _assign; },\n    __rest: __rest,\n    __decorate: __decorate,\n    __param: __param,\n    __metadata: __metadata,\n    __awaiter: __awaiter,\n    __generator: __generator,\n    __exportStar: __exportStar,\n    __values: __values,\n    __read: __read,\n    __spread: __spread,\n    __spreadArrays: __spreadArrays,\n    __await: __await,\n    __asyncGenerator: __asyncGenerator,\n    __asyncDelegator: __asyncDelegator,\n    __asyncValues: __asyncValues,\n    __makeTemplateObject: __makeTemplateObject,\n    __importStar: __importStar,\n    __importDefault: __importDefault\n  });\n\n  var api = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.apiDescriptor = {\n      key: function key(_key) {\n        return /^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(_key) ? _key : JSON.stringify(_key);\n      },\n      value: function value(_value) {\n        if (_value === null || _typeof(_value) !== 'object') {\n          return JSON.stringify(_value);\n        }\n\n        if (Array.isArray(_value)) {\n          return \"[\".concat(_value.map(function (subValue) {\n            return exports.apiDescriptor.value(subValue);\n          }).join(', '), \"]\");\n        }\n\n        var keys = Object.keys(_value);\n        return keys.length === 0 ? '{}' : \"{ \".concat(keys.map(function (key) {\n          return \"\".concat(exports.apiDescriptor.key(key), \": \").concat(exports.apiDescriptor.value(_value[key]));\n        }).join(', '), \" }\");\n      },\n      pair: function pair(_ref) {\n        var key = _ref.key,\n            value = _ref.value;\n        return exports.apiDescriptor.value(_defineProperty({}, key, value));\n      }\n    };\n  });\n  unwrapExports(api);\n  var api_1 = api.apiDescriptor;\n\n  var tslib_1 = getCjsExportFromNamespace(tslib_es6);\n\n  var descriptors = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    tslib_1.__exportStar(api, exports);\n  });\n  unwrapExports(descriptors);\n\n  var matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\n  var escapeStringRegexp = function escapeStringRegexp(str) {\n    if (typeof str !== 'string') {\n      throw new TypeError('Expected a string');\n    }\n\n    return str.replace(matchOperatorsRe, '\\\\$&');\n  };\n\n  var colorName = {\n    \"aliceblue\": [240, 248, 255],\n    \"antiquewhite\": [250, 235, 215],\n    \"aqua\": [0, 255, 255],\n    \"aquamarine\": [127, 255, 212],\n    \"azure\": [240, 255, 255],\n    \"beige\": [245, 245, 220],\n    \"bisque\": [255, 228, 196],\n    \"black\": [0, 0, 0],\n    \"blanchedalmond\": [255, 235, 205],\n    \"blue\": [0, 0, 255],\n    \"blueviolet\": [138, 43, 226],\n    \"brown\": [165, 42, 42],\n    \"burlywood\": [222, 184, 135],\n    \"cadetblue\": [95, 158, 160],\n    \"chartreuse\": [127, 255, 0],\n    \"chocolate\": [210, 105, 30],\n    \"coral\": [255, 127, 80],\n    \"cornflowerblue\": [100, 149, 237],\n    \"cornsilk\": [255, 248, 220],\n    \"crimson\": [220, 20, 60],\n    \"cyan\": [0, 255, 255],\n    \"darkblue\": [0, 0, 139],\n    \"darkcyan\": [0, 139, 139],\n    \"darkgoldenrod\": [184, 134, 11],\n    \"darkgray\": [169, 169, 169],\n    \"darkgreen\": [0, 100, 0],\n    \"darkgrey\": [169, 169, 169],\n    \"darkkhaki\": [189, 183, 107],\n    \"darkmagenta\": [139, 0, 139],\n    \"darkolivegreen\": [85, 107, 47],\n    \"darkorange\": [255, 140, 0],\n    \"darkorchid\": [153, 50, 204],\n    \"darkred\": [139, 0, 0],\n    \"darksalmon\": [233, 150, 122],\n    \"darkseagreen\": [143, 188, 143],\n    \"darkslateblue\": [72, 61, 139],\n    \"darkslategray\": [47, 79, 79],\n    \"darkslategrey\": [47, 79, 79],\n    \"darkturquoise\": [0, 206, 209],\n    \"darkviolet\": [148, 0, 211],\n    \"deeppink\": [255, 20, 147],\n    \"deepskyblue\": [0, 191, 255],\n    \"dimgray\": [105, 105, 105],\n    \"dimgrey\": [105, 105, 105],\n    \"dodgerblue\": [30, 144, 255],\n    \"firebrick\": [178, 34, 34],\n    \"floralwhite\": [255, 250, 240],\n    \"forestgreen\": [34, 139, 34],\n    \"fuchsia\": [255, 0, 255],\n    \"gainsboro\": [220, 220, 220],\n    \"ghostwhite\": [248, 248, 255],\n    \"gold\": [255, 215, 0],\n    \"goldenrod\": [218, 165, 32],\n    \"gray\": [128, 128, 128],\n    \"green\": [0, 128, 0],\n    \"greenyellow\": [173, 255, 47],\n    \"grey\": [128, 128, 128],\n    \"honeydew\": [240, 255, 240],\n    \"hotpink\": [255, 105, 180],\n    \"indianred\": [205, 92, 92],\n    \"indigo\": [75, 0, 130],\n    \"ivory\": [255, 255, 240],\n    \"khaki\": [240, 230, 140],\n    \"lavender\": [230, 230, 250],\n    \"lavenderblush\": [255, 240, 245],\n    \"lawngreen\": [124, 252, 0],\n    \"lemonchiffon\": [255, 250, 205],\n    \"lightblue\": [173, 216, 230],\n    \"lightcoral\": [240, 128, 128],\n    \"lightcyan\": [224, 255, 255],\n    \"lightgoldenrodyellow\": [250, 250, 210],\n    \"lightgray\": [211, 211, 211],\n    \"lightgreen\": [144, 238, 144],\n    \"lightgrey\": [211, 211, 211],\n    \"lightpink\": [255, 182, 193],\n    \"lightsalmon\": [255, 160, 122],\n    \"lightseagreen\": [32, 178, 170],\n    \"lightskyblue\": [135, 206, 250],\n    \"lightslategray\": [119, 136, 153],\n    \"lightslategrey\": [119, 136, 153],\n    \"lightsteelblue\": [176, 196, 222],\n    \"lightyellow\": [255, 255, 224],\n    \"lime\": [0, 255, 0],\n    \"limegreen\": [50, 205, 50],\n    \"linen\": [250, 240, 230],\n    \"magenta\": [255, 0, 255],\n    \"maroon\": [128, 0, 0],\n    \"mediumaquamarine\": [102, 205, 170],\n    \"mediumblue\": [0, 0, 205],\n    \"mediumorchid\": [186, 85, 211],\n    \"mediumpurple\": [147, 112, 219],\n    \"mediumseagreen\": [60, 179, 113],\n    \"mediumslateblue\": [123, 104, 238],\n    \"mediumspringgreen\": [0, 250, 154],\n    \"mediumturquoise\": [72, 209, 204],\n    \"mediumvioletred\": [199, 21, 133],\n    \"midnightblue\": [25, 25, 112],\n    \"mintcream\": [245, 255, 250],\n    \"mistyrose\": [255, 228, 225],\n    \"moccasin\": [255, 228, 181],\n    \"navajowhite\": [255, 222, 173],\n    \"navy\": [0, 0, 128],\n    \"oldlace\": [253, 245, 230],\n    \"olive\": [128, 128, 0],\n    \"olivedrab\": [107, 142, 35],\n    \"orange\": [255, 165, 0],\n    \"orangered\": [255, 69, 0],\n    \"orchid\": [218, 112, 214],\n    \"palegoldenrod\": [238, 232, 170],\n    \"palegreen\": [152, 251, 152],\n    \"paleturquoise\": [175, 238, 238],\n    \"palevioletred\": [219, 112, 147],\n    \"papayawhip\": [255, 239, 213],\n    \"peachpuff\": [255, 218, 185],\n    \"peru\": [205, 133, 63],\n    \"pink\": [255, 192, 203],\n    \"plum\": [221, 160, 221],\n    \"powderblue\": [176, 224, 230],\n    \"purple\": [128, 0, 128],\n    \"rebeccapurple\": [102, 51, 153],\n    \"red\": [255, 0, 0],\n    \"rosybrown\": [188, 143, 143],\n    \"royalblue\": [65, 105, 225],\n    \"saddlebrown\": [139, 69, 19],\n    \"salmon\": [250, 128, 114],\n    \"sandybrown\": [244, 164, 96],\n    \"seagreen\": [46, 139, 87],\n    \"seashell\": [255, 245, 238],\n    \"sienna\": [160, 82, 45],\n    \"silver\": [192, 192, 192],\n    \"skyblue\": [135, 206, 235],\n    \"slateblue\": [106, 90, 205],\n    \"slategray\": [112, 128, 144],\n    \"slategrey\": [112, 128, 144],\n    \"snow\": [255, 250, 250],\n    \"springgreen\": [0, 255, 127],\n    \"steelblue\": [70, 130, 180],\n    \"tan\": [210, 180, 140],\n    \"teal\": [0, 128, 128],\n    \"thistle\": [216, 191, 216],\n    \"tomato\": [255, 99, 71],\n    \"turquoise\": [64, 224, 208],\n    \"violet\": [238, 130, 238],\n    \"wheat\": [245, 222, 179],\n    \"white\": [255, 255, 255],\n    \"whitesmoke\": [245, 245, 245],\n    \"yellow\": [255, 255, 0],\n    \"yellowgreen\": [154, 205, 50]\n  };\n\n  var conversions = createCommonjsModule(function (module) {\n    /* MIT license */\n    // NOTE: conversions should only return primitive values (i.e. arrays, or\n    //       values that give correct `typeof` results).\n    //       do not use box values types (i.e. Number(), String(), etc.)\n    var reverseKeywords = {};\n\n    for (var key in colorName) {\n      if (colorName.hasOwnProperty(key)) {\n        reverseKeywords[colorName[key]] = key;\n      }\n    }\n\n    var convert = module.exports = {\n      rgb: {\n        channels: 3,\n        labels: 'rgb'\n      },\n      hsl: {\n        channels: 3,\n        labels: 'hsl'\n      },\n      hsv: {\n        channels: 3,\n        labels: 'hsv'\n      },\n      hwb: {\n        channels: 3,\n        labels: 'hwb'\n      },\n      cmyk: {\n        channels: 4,\n        labels: 'cmyk'\n      },\n      xyz: {\n        channels: 3,\n        labels: 'xyz'\n      },\n      lab: {\n        channels: 3,\n        labels: 'lab'\n      },\n      lch: {\n        channels: 3,\n        labels: 'lch'\n      },\n      hex: {\n        channels: 1,\n        labels: ['hex']\n      },\n      keyword: {\n        channels: 1,\n        labels: ['keyword']\n      },\n      ansi16: {\n        channels: 1,\n        labels: ['ansi16']\n      },\n      ansi256: {\n        channels: 1,\n        labels: ['ansi256']\n      },\n      hcg: {\n        channels: 3,\n        labels: ['h', 'c', 'g']\n      },\n      apple: {\n        channels: 3,\n        labels: ['r16', 'g16', 'b16']\n      },\n      gray: {\n        channels: 1,\n        labels: ['gray']\n      }\n    }; // hide .channels and .labels properties\n\n    for (var model in convert) {\n      if (convert.hasOwnProperty(model)) {\n        if (!('channels' in convert[model])) {\n          throw new Error('missing channels property: ' + model);\n        }\n\n        if (!('labels' in convert[model])) {\n          throw new Error('missing channel labels property: ' + model);\n        }\n\n        if (convert[model].labels.length !== convert[model].channels) {\n          throw new Error('channel and label counts mismatch: ' + model);\n        }\n\n        var channels = convert[model].channels;\n        var labels = convert[model].labels;\n        delete convert[model].channels;\n        delete convert[model].labels;\n        Object.defineProperty(convert[model], 'channels', {\n          value: channels\n        });\n        Object.defineProperty(convert[model], 'labels', {\n          value: labels\n        });\n      }\n    }\n\n    convert.rgb.hsl = function (rgb) {\n      var r = rgb[0] / 255;\n      var g = rgb[1] / 255;\n      var b = rgb[2] / 255;\n      var min = Math.min(r, g, b);\n      var max = Math.max(r, g, b);\n      var delta = max - min;\n      var h;\n      var s;\n      var l;\n\n      if (max === min) {\n        h = 0;\n      } else if (r === max) {\n        h = (g - b) / delta;\n      } else if (g === max) {\n        h = 2 + (b - r) / delta;\n      } else if (b === max) {\n        h = 4 + (r - g) / delta;\n      }\n\n      h = Math.min(h * 60, 360);\n\n      if (h < 0) {\n        h += 360;\n      }\n\n      l = (min + max) / 2;\n\n      if (max === min) {\n        s = 0;\n      } else if (l <= 0.5) {\n        s = delta / (max + min);\n      } else {\n        s = delta / (2 - max - min);\n      }\n\n      return [h, s * 100, l * 100];\n    };\n\n    convert.rgb.hsv = function (rgb) {\n      var r = rgb[0];\n      var g = rgb[1];\n      var b = rgb[2];\n      var min = Math.min(r, g, b);\n      var max = Math.max(r, g, b);\n      var delta = max - min;\n      var h;\n      var s;\n      var v;\n\n      if (max === 0) {\n        s = 0;\n      } else {\n        s = delta / max * 1000 / 10;\n      }\n\n      if (max === min) {\n        h = 0;\n      } else if (r === max) {\n        h = (g - b) / delta;\n      } else if (g === max) {\n        h = 2 + (b - r) / delta;\n      } else if (b === max) {\n        h = 4 + (r - g) / delta;\n      }\n\n      h = Math.min(h * 60, 360);\n\n      if (h < 0) {\n        h += 360;\n      }\n\n      v = max / 255 * 1000 / 10;\n      return [h, s, v];\n    };\n\n    convert.rgb.hwb = function (rgb) {\n      var r = rgb[0];\n      var g = rgb[1];\n      var b = rgb[2];\n      var h = convert.rgb.hsl(rgb)[0];\n      var w = 1 / 255 * Math.min(r, Math.min(g, b));\n      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n      return [h, w * 100, b * 100];\n    };\n\n    convert.rgb.cmyk = function (rgb) {\n      var r = rgb[0] / 255;\n      var g = rgb[1] / 255;\n      var b = rgb[2] / 255;\n      var c;\n      var m;\n      var y;\n      var k;\n      k = Math.min(1 - r, 1 - g, 1 - b);\n      c = (1 - r - k) / (1 - k) || 0;\n      m = (1 - g - k) / (1 - k) || 0;\n      y = (1 - b - k) / (1 - k) || 0;\n      return [c * 100, m * 100, y * 100, k * 100];\n    };\n    /**\n     * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n     * */\n\n\n    function comparativeDistance(x, y) {\n      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);\n    }\n\n    convert.rgb.keyword = function (rgb) {\n      var reversed = reverseKeywords[rgb];\n\n      if (reversed) {\n        return reversed;\n      }\n\n      var currentClosestDistance = Infinity;\n      var currentClosestKeyword;\n\n      for (var keyword in colorName) {\n        if (colorName.hasOwnProperty(keyword)) {\n          var value = colorName[keyword]; // Compute comparative distance\n\n          var distance = comparativeDistance(rgb, value); // Check if its less, if so set as closest\n\n          if (distance < currentClosestDistance) {\n            currentClosestDistance = distance;\n            currentClosestKeyword = keyword;\n          }\n        }\n      }\n\n      return currentClosestKeyword;\n    };\n\n    convert.keyword.rgb = function (keyword) {\n      return colorName[keyword];\n    };\n\n    convert.rgb.xyz = function (rgb) {\n      var r = rgb[0] / 255;\n      var g = rgb[1] / 255;\n      var b = rgb[2] / 255; // assume sRGB\n\n      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;\n      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;\n      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;\n      return [x * 100, y * 100, z * 100];\n    };\n\n    convert.rgb.lab = function (rgb) {\n      var xyz = convert.rgb.xyz(rgb);\n      var x = xyz[0];\n      var y = xyz[1];\n      var z = xyz[2];\n      var l;\n      var a;\n      var b;\n      x /= 95.047;\n      y /= 100;\n      z /= 108.883;\n      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n      l = 116 * y - 16;\n      a = 500 * (x - y);\n      b = 200 * (y - z);\n      return [l, a, b];\n    };\n\n    convert.hsl.rgb = function (hsl) {\n      var h = hsl[0] / 360;\n      var s = hsl[1] / 100;\n      var l = hsl[2] / 100;\n      var t1;\n      var t2;\n      var t3;\n      var rgb;\n      var val;\n\n      if (s === 0) {\n        val = l * 255;\n        return [val, val, val];\n      }\n\n      if (l < 0.5) {\n        t2 = l * (1 + s);\n      } else {\n        t2 = l + s - l * s;\n      }\n\n      t1 = 2 * l - t2;\n      rgb = [0, 0, 0];\n\n      for (var i = 0; i < 3; i++) {\n        t3 = h + 1 / 3 * -(i - 1);\n\n        if (t3 < 0) {\n          t3++;\n        }\n\n        if (t3 > 1) {\n          t3--;\n        }\n\n        if (6 * t3 < 1) {\n          val = t1 + (t2 - t1) * 6 * t3;\n        } else if (2 * t3 < 1) {\n          val = t2;\n        } else if (3 * t3 < 2) {\n          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n        } else {\n          val = t1;\n        }\n\n        rgb[i] = val * 255;\n      }\n\n      return rgb;\n    };\n\n    convert.hsl.hsv = function (hsl) {\n      var h = hsl[0];\n      var s = hsl[1] / 100;\n      var l = hsl[2] / 100;\n      var smin = s;\n      var lmin = Math.max(l, 0.01);\n      var sv;\n      var v;\n      l *= 2;\n      s *= l <= 1 ? l : 2 - l;\n      smin *= lmin <= 1 ? lmin : 2 - lmin;\n      v = (l + s) / 2;\n      sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);\n      return [h, sv * 100, v * 100];\n    };\n\n    convert.hsv.rgb = function (hsv) {\n      var h = hsv[0] / 60;\n      var s = hsv[1] / 100;\n      var v = hsv[2] / 100;\n      var hi = Math.floor(h) % 6;\n      var f = h - Math.floor(h);\n      var p = 255 * v * (1 - s);\n      var q = 255 * v * (1 - s * f);\n      var t = 255 * v * (1 - s * (1 - f));\n      v *= 255;\n\n      switch (hi) {\n        case 0:\n          return [v, t, p];\n\n        case 1:\n          return [q, v, p];\n\n        case 2:\n          return [p, v, t];\n\n        case 3:\n          return [p, q, v];\n\n        case 4:\n          return [t, p, v];\n\n        case 5:\n          return [v, p, q];\n      }\n    };\n\n    convert.hsv.hsl = function (hsv) {\n      var h = hsv[0];\n      var s = hsv[1] / 100;\n      var v = hsv[2] / 100;\n      var vmin = Math.max(v, 0.01);\n      var lmin;\n      var sl;\n      var l;\n      l = (2 - s) * v;\n      lmin = (2 - s) * vmin;\n      sl = s * vmin;\n      sl /= lmin <= 1 ? lmin : 2 - lmin;\n      sl = sl || 0;\n      l /= 2;\n      return [h, sl * 100, l * 100];\n    }; // http://dev.w3.org/csswg/css-color/#hwb-to-rgb\n\n\n    convert.hwb.rgb = function (hwb) {\n      var h = hwb[0] / 360;\n      var wh = hwb[1] / 100;\n      var bl = hwb[2] / 100;\n      var ratio = wh + bl;\n      var i;\n      var v;\n      var f;\n      var n; // wh + bl cant be > 1\n\n      if (ratio > 1) {\n        wh /= ratio;\n        bl /= ratio;\n      }\n\n      i = Math.floor(6 * h);\n      v = 1 - bl;\n      f = 6 * h - i;\n\n      if ((i & 0x01) !== 0) {\n        f = 1 - f;\n      }\n\n      n = wh + f * (v - wh); // linear interpolation\n\n      var r;\n      var g;\n      var b;\n\n      switch (i) {\n        default:\n        case 6:\n        case 0:\n          r = v;\n          g = n;\n          b = wh;\n          break;\n\n        case 1:\n          r = n;\n          g = v;\n          b = wh;\n          break;\n\n        case 2:\n          r = wh;\n          g = v;\n          b = n;\n          break;\n\n        case 3:\n          r = wh;\n          g = n;\n          b = v;\n          break;\n\n        case 4:\n          r = n;\n          g = wh;\n          b = v;\n          break;\n\n        case 5:\n          r = v;\n          g = wh;\n          b = n;\n          break;\n      }\n\n      return [r * 255, g * 255, b * 255];\n    };\n\n    convert.cmyk.rgb = function (cmyk) {\n      var c = cmyk[0] / 100;\n      var m = cmyk[1] / 100;\n      var y = cmyk[2] / 100;\n      var k = cmyk[3] / 100;\n      var r;\n      var g;\n      var b;\n      r = 1 - Math.min(1, c * (1 - k) + k);\n      g = 1 - Math.min(1, m * (1 - k) + k);\n      b = 1 - Math.min(1, y * (1 - k) + k);\n      return [r * 255, g * 255, b * 255];\n    };\n\n    convert.xyz.rgb = function (xyz) {\n      var x = xyz[0] / 100;\n      var y = xyz[1] / 100;\n      var z = xyz[2] / 100;\n      var r;\n      var g;\n      var b;\n      r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n      g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n      b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB\n\n      r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;\n      g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;\n      b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;\n      r = Math.min(Math.max(0, r), 1);\n      g = Math.min(Math.max(0, g), 1);\n      b = Math.min(Math.max(0, b), 1);\n      return [r * 255, g * 255, b * 255];\n    };\n\n    convert.xyz.lab = function (xyz) {\n      var x = xyz[0];\n      var y = xyz[1];\n      var z = xyz[2];\n      var l;\n      var a;\n      var b;\n      x /= 95.047;\n      y /= 100;\n      z /= 108.883;\n      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n      l = 116 * y - 16;\n      a = 500 * (x - y);\n      b = 200 * (y - z);\n      return [l, a, b];\n    };\n\n    convert.lab.xyz = function (lab) {\n      var l = lab[0];\n      var a = lab[1];\n      var b = lab[2];\n      var x;\n      var y;\n      var z;\n      y = (l + 16) / 116;\n      x = a / 500 + y;\n      z = y - b / 200;\n      var y2 = Math.pow(y, 3);\n      var x2 = Math.pow(x, 3);\n      var z2 = Math.pow(z, 3);\n      y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n      x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n      z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n      x *= 95.047;\n      y *= 100;\n      z *= 108.883;\n      return [x, y, z];\n    };\n\n    convert.lab.lch = function (lab) {\n      var l = lab[0];\n      var a = lab[1];\n      var b = lab[2];\n      var hr;\n      var h;\n      var c;\n      hr = Math.atan2(b, a);\n      h = hr * 360 / 2 / Math.PI;\n\n      if (h < 0) {\n        h += 360;\n      }\n\n      c = Math.sqrt(a * a + b * b);\n      return [l, c, h];\n    };\n\n    convert.lch.lab = function (lch) {\n      var l = lch[0];\n      var c = lch[1];\n      var h = lch[2];\n      var a;\n      var b;\n      var hr;\n      hr = h / 360 * 2 * Math.PI;\n      a = c * Math.cos(hr);\n      b = c * Math.sin(hr);\n      return [l, a, b];\n    };\n\n    convert.rgb.ansi16 = function (args) {\n      var r = args[0];\n      var g = args[1];\n      var b = args[2];\n      var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n      value = Math.round(value / 50);\n\n      if (value === 0) {\n        return 30;\n      }\n\n      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));\n\n      if (value === 2) {\n        ansi += 60;\n      }\n\n      return ansi;\n    };\n\n    convert.hsv.ansi16 = function (args) {\n      // optimization here; we already know the value and don't need to get\n      // it converted for us.\n      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n    };\n\n    convert.rgb.ansi256 = function (args) {\n      var r = args[0];\n      var g = args[1];\n      var b = args[2]; // we use the extended greyscale palette here, with the exception of\n      // black and white. normal palette only has 4 greyscale shades.\n\n      if (r === g && g === b) {\n        if (r < 8) {\n          return 16;\n        }\n\n        if (r > 248) {\n          return 231;\n        }\n\n        return Math.round((r - 8) / 247 * 24) + 232;\n      }\n\n      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);\n      return ansi;\n    };\n\n    convert.ansi16.rgb = function (args) {\n      var color = args % 10; // handle greyscale\n\n      if (color === 0 || color === 7) {\n        if (args > 50) {\n          color += 3.5;\n        }\n\n        color = color / 10.5 * 255;\n        return [color, color, color];\n      }\n\n      var mult = (~~(args > 50) + 1) * 0.5;\n      var r = (color & 1) * mult * 255;\n      var g = (color >> 1 & 1) * mult * 255;\n      var b = (color >> 2 & 1) * mult * 255;\n      return [r, g, b];\n    };\n\n    convert.ansi256.rgb = function (args) {\n      // handle greyscale\n      if (args >= 232) {\n        var c = (args - 232) * 10 + 8;\n        return [c, c, c];\n      }\n\n      args -= 16;\n      var rem;\n      var r = Math.floor(args / 36) / 5 * 255;\n      var g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n      var b = rem % 6 / 5 * 255;\n      return [r, g, b];\n    };\n\n    convert.rgb.hex = function (args) {\n      var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);\n      var string = integer.toString(16).toUpperCase();\n      return '000000'.substring(string.length) + string;\n    };\n\n    convert.hex.rgb = function (args) {\n      var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\n      if (!match) {\n        return [0, 0, 0];\n      }\n\n      var colorString = match[0];\n\n      if (match[0].length === 3) {\n        colorString = colorString.split('').map(function (char) {\n          return char + char;\n        }).join('');\n      }\n\n      var integer = parseInt(colorString, 16);\n      var r = integer >> 16 & 0xFF;\n      var g = integer >> 8 & 0xFF;\n      var b = integer & 0xFF;\n      return [r, g, b];\n    };\n\n    convert.rgb.hcg = function (rgb) {\n      var r = rgb[0] / 255;\n      var g = rgb[1] / 255;\n      var b = rgb[2] / 255;\n      var max = Math.max(Math.max(r, g), b);\n      var min = Math.min(Math.min(r, g), b);\n      var chroma = max - min;\n      var grayscale;\n      var hue;\n\n      if (chroma < 1) {\n        grayscale = min / (1 - chroma);\n      } else {\n        grayscale = 0;\n      }\n\n      if (chroma <= 0) {\n        hue = 0;\n      } else if (max === r) {\n        hue = (g - b) / chroma % 6;\n      } else if (max === g) {\n        hue = 2 + (b - r) / chroma;\n      } else {\n        hue = 4 + (r - g) / chroma + 4;\n      }\n\n      hue /= 6;\n      hue %= 1;\n      return [hue * 360, chroma * 100, grayscale * 100];\n    };\n\n    convert.hsl.hcg = function (hsl) {\n      var s = hsl[1] / 100;\n      var l = hsl[2] / 100;\n      var c = 1;\n      var f = 0;\n\n      if (l < 0.5) {\n        c = 2.0 * s * l;\n      } else {\n        c = 2.0 * s * (1.0 - l);\n      }\n\n      if (c < 1.0) {\n        f = (l - 0.5 * c) / (1.0 - c);\n      }\n\n      return [hsl[0], c * 100, f * 100];\n    };\n\n    convert.hsv.hcg = function (hsv) {\n      var s = hsv[1] / 100;\n      var v = hsv[2] / 100;\n      var c = s * v;\n      var f = 0;\n\n      if (c < 1.0) {\n        f = (v - c) / (1 - c);\n      }\n\n      return [hsv[0], c * 100, f * 100];\n    };\n\n    convert.hcg.rgb = function (hcg) {\n      var h = hcg[0] / 360;\n      var c = hcg[1] / 100;\n      var g = hcg[2] / 100;\n\n      if (c === 0.0) {\n        return [g * 255, g * 255, g * 255];\n      }\n\n      var pure = [0, 0, 0];\n      var hi = h % 1 * 6;\n      var v = hi % 1;\n      var w = 1 - v;\n      var mg = 0;\n\n      switch (Math.floor(hi)) {\n        case 0:\n          pure[0] = 1;\n          pure[1] = v;\n          pure[2] = 0;\n          break;\n\n        case 1:\n          pure[0] = w;\n          pure[1] = 1;\n          pure[2] = 0;\n          break;\n\n        case 2:\n          pure[0] = 0;\n          pure[1] = 1;\n          pure[2] = v;\n          break;\n\n        case 3:\n          pure[0] = 0;\n          pure[1] = w;\n          pure[2] = 1;\n          break;\n\n        case 4:\n          pure[0] = v;\n          pure[1] = 0;\n          pure[2] = 1;\n          break;\n\n        default:\n          pure[0] = 1;\n          pure[1] = 0;\n          pure[2] = w;\n      }\n\n      mg = (1.0 - c) * g;\n      return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];\n    };\n\n    convert.hcg.hsv = function (hcg) {\n      var c = hcg[1] / 100;\n      var g = hcg[2] / 100;\n      var v = c + g * (1.0 - c);\n      var f = 0;\n\n      if (v > 0.0) {\n        f = c / v;\n      }\n\n      return [hcg[0], f * 100, v * 100];\n    };\n\n    convert.hcg.hsl = function (hcg) {\n      var c = hcg[1] / 100;\n      var g = hcg[2] / 100;\n      var l = g * (1.0 - c) + 0.5 * c;\n      var s = 0;\n\n      if (l > 0.0 && l < 0.5) {\n        s = c / (2 * l);\n      } else if (l >= 0.5 && l < 1.0) {\n        s = c / (2 * (1 - l));\n      }\n\n      return [hcg[0], s * 100, l * 100];\n    };\n\n    convert.hcg.hwb = function (hcg) {\n      var c = hcg[1] / 100;\n      var g = hcg[2] / 100;\n      var v = c + g * (1.0 - c);\n      return [hcg[0], (v - c) * 100, (1 - v) * 100];\n    };\n\n    convert.hwb.hcg = function (hwb) {\n      var w = hwb[1] / 100;\n      var b = hwb[2] / 100;\n      var v = 1 - b;\n      var c = v - w;\n      var g = 0;\n\n      if (c < 1) {\n        g = (v - c) / (1 - c);\n      }\n\n      return [hwb[0], c * 100, g * 100];\n    };\n\n    convert.apple.rgb = function (apple) {\n      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];\n    };\n\n    convert.rgb.apple = function (rgb) {\n      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];\n    };\n\n    convert.gray.rgb = function (args) {\n      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n    };\n\n    convert.gray.hsl = convert.gray.hsv = function (args) {\n      return [0, 0, args[0]];\n    };\n\n    convert.gray.hwb = function (gray) {\n      return [0, 100, gray[0]];\n    };\n\n    convert.gray.cmyk = function (gray) {\n      return [0, 0, 0, gray[0]];\n    };\n\n    convert.gray.lab = function (gray) {\n      return [gray[0], 0, 0];\n    };\n\n    convert.gray.hex = function (gray) {\n      var val = Math.round(gray[0] / 100 * 255) & 0xFF;\n      var integer = (val << 16) + (val << 8) + val;\n      var string = integer.toString(16).toUpperCase();\n      return '000000'.substring(string.length) + string;\n    };\n\n    convert.rgb.gray = function (rgb) {\n      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n      return [val / 255 * 100];\n    };\n  });\n  var conversions_1 = conversions.rgb;\n  var conversions_2 = conversions.hsl;\n  var conversions_3 = conversions.hsv;\n  var conversions_4 = conversions.hwb;\n  var conversions_5 = conversions.cmyk;\n  var conversions_6 = conversions.xyz;\n  var conversions_7 = conversions.lab;\n  var conversions_8 = conversions.lch;\n  var conversions_9 = conversions.hex;\n  var conversions_10 = conversions.keyword;\n  var conversions_11 = conversions.ansi16;\n  var conversions_12 = conversions.ansi256;\n  var conversions_13 = conversions.hcg;\n  var conversions_14 = conversions.apple;\n  var conversions_15 = conversions.gray;\n\n  /*\n  \tthis function routes a model to all other models.\n\n  \tall functions that are routed have a property `.conversion` attached\n  \tto the returned synthetic function. This property is an array\n  \tof strings, each with the steps in between the 'from' and 'to'\n  \tcolor models (inclusive).\n\n  \tconversions that are not possible simply are not included.\n  */\n  // https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\n  var models = Object.keys(conversions);\n\n  function buildGraph() {\n    var graph = {};\n\n    for (var len = models.length, i = 0; i < len; i++) {\n      graph[models[i]] = {\n        // http://jsperf.com/1-vs-infinity\n        // micro-opt, but this is simple.\n        distance: -1,\n        parent: null\n      };\n    }\n\n    return graph;\n  } // https://en.wikipedia.org/wiki/Breadth-first_search\n\n\n  function deriveBFS(fromModel) {\n    var graph = buildGraph();\n    var queue = [fromModel]; // unshift -> queue -> pop\n\n    graph[fromModel].distance = 0;\n\n    while (queue.length) {\n      var current = queue.pop();\n      var adjacents = Object.keys(conversions[current]);\n\n      for (var len = adjacents.length, i = 0; i < len; i++) {\n        var adjacent = adjacents[i];\n        var node = graph[adjacent];\n\n        if (node.distance === -1) {\n          node.distance = graph[current].distance + 1;\n          node.parent = current;\n          queue.unshift(adjacent);\n        }\n      }\n    }\n\n    return graph;\n  }\n\n  function link(from, to) {\n    return function (args) {\n      return to(from(args));\n    };\n  }\n\n  function wrapConversion(toModel, graph) {\n    var path = [graph[toModel].parent, toModel];\n    var fn = conversions[graph[toModel].parent][toModel];\n    var cur = graph[toModel].parent;\n\n    while (graph[cur].parent) {\n      path.unshift(graph[cur].parent);\n      fn = link(conversions[graph[cur].parent][cur], fn);\n      cur = graph[cur].parent;\n    }\n\n    fn.conversion = path;\n    return fn;\n  }\n\n  var route = function route(fromModel) {\n    var graph = deriveBFS(fromModel);\n    var conversion = {};\n    var models = Object.keys(graph);\n\n    for (var len = models.length, i = 0; i < len; i++) {\n      var toModel = models[i];\n      var node = graph[toModel];\n\n      if (node.parent === null) {\n        // no possible conversion, or this node is the source model.\n        continue;\n      }\n\n      conversion[toModel] = wrapConversion(toModel, graph);\n    }\n\n    return conversion;\n  };\n\n  var convert = {};\n  var models$1 = Object.keys(conversions);\n\n  function wrapRaw(fn) {\n    var wrappedFn = function wrappedFn(args) {\n      if (args === undefined || args === null) {\n        return args;\n      }\n\n      if (arguments.length > 1) {\n        args = Array.prototype.slice.call(arguments);\n      }\n\n      return fn(args);\n    }; // preserve .conversion property if there is one\n\n\n    if ('conversion' in fn) {\n      wrappedFn.conversion = fn.conversion;\n    }\n\n    return wrappedFn;\n  }\n\n  function wrapRounded(fn) {\n    var wrappedFn = function wrappedFn(args) {\n      if (args === undefined || args === null) {\n        return args;\n      }\n\n      if (arguments.length > 1) {\n        args = Array.prototype.slice.call(arguments);\n      }\n\n      var result = fn(args); // we're assuming the result is an array here.\n      // see notice in conversions.js; don't use box types\n      // in conversion functions.\n\n      if (_typeof(result) === 'object') {\n        for (var len = result.length, i = 0; i < len; i++) {\n          result[i] = Math.round(result[i]);\n        }\n      }\n\n      return result;\n    }; // preserve .conversion property if there is one\n\n\n    if ('conversion' in fn) {\n      wrappedFn.conversion = fn.conversion;\n    }\n\n    return wrappedFn;\n  }\n\n  models$1.forEach(function (fromModel) {\n    convert[fromModel] = {};\n    Object.defineProperty(convert[fromModel], 'channels', {\n      value: conversions[fromModel].channels\n    });\n    Object.defineProperty(convert[fromModel], 'labels', {\n      value: conversions[fromModel].labels\n    });\n    var routes = route(fromModel);\n    var routeModels = Object.keys(routes);\n    routeModels.forEach(function (toModel) {\n      var fn = routes[toModel];\n      convert[fromModel][toModel] = wrapRounded(fn);\n      convert[fromModel][toModel].raw = wrapRaw(fn);\n    });\n  });\n  var colorConvert = convert;\n\n  var ansiStyles = createCommonjsModule(function (module) {\n\n    var wrapAnsi16 = function wrapAnsi16(fn, offset) {\n      return function () {\n        var code = fn.apply(colorConvert, arguments);\n        return \"\\x1B[\".concat(code + offset, \"m\");\n      };\n    };\n\n    var wrapAnsi256 = function wrapAnsi256(fn, offset) {\n      return function () {\n        var code = fn.apply(colorConvert, arguments);\n        return \"\\x1B[\".concat(38 + offset, \";5;\").concat(code, \"m\");\n      };\n    };\n\n    var wrapAnsi16m = function wrapAnsi16m(fn, offset) {\n      return function () {\n        var rgb = fn.apply(colorConvert, arguments);\n        return \"\\x1B[\".concat(38 + offset, \";2;\").concat(rgb[0], \";\").concat(rgb[1], \";\").concat(rgb[2], \"m\");\n      };\n    };\n\n    function assembleStyles() {\n      var codes = new Map();\n      var styles = {\n        modifier: {\n          reset: [0, 0],\n          // 21 isn't widely supported and 22 does the same thing\n          bold: [1, 22],\n          dim: [2, 22],\n          italic: [3, 23],\n          underline: [4, 24],\n          inverse: [7, 27],\n          hidden: [8, 28],\n          strikethrough: [9, 29]\n        },\n        color: {\n          black: [30, 39],\n          red: [31, 39],\n          green: [32, 39],\n          yellow: [33, 39],\n          blue: [34, 39],\n          magenta: [35, 39],\n          cyan: [36, 39],\n          white: [37, 39],\n          gray: [90, 39],\n          // Bright color\n          redBright: [91, 39],\n          greenBright: [92, 39],\n          yellowBright: [93, 39],\n          blueBright: [94, 39],\n          magentaBright: [95, 39],\n          cyanBright: [96, 39],\n          whiteBright: [97, 39]\n        },\n        bgColor: {\n          bgBlack: [40, 49],\n          bgRed: [41, 49],\n          bgGreen: [42, 49],\n          bgYellow: [43, 49],\n          bgBlue: [44, 49],\n          bgMagenta: [45, 49],\n          bgCyan: [46, 49],\n          bgWhite: [47, 49],\n          // Bright color\n          bgBlackBright: [100, 49],\n          bgRedBright: [101, 49],\n          bgGreenBright: [102, 49],\n          bgYellowBright: [103, 49],\n          bgBlueBright: [104, 49],\n          bgMagentaBright: [105, 49],\n          bgCyanBright: [106, 49],\n          bgWhiteBright: [107, 49]\n        }\n      }; // Fix humans\n\n      styles.color.grey = styles.color.gray;\n\n      for (var _i = 0, _Object$keys = Object.keys(styles); _i < _Object$keys.length; _i++) {\n        var groupName = _Object$keys[_i];\n        var group = styles[groupName];\n\n        for (var _i3 = 0, _Object$keys3 = Object.keys(group); _i3 < _Object$keys3.length; _i3++) {\n          var styleName = _Object$keys3[_i3];\n          var style = group[styleName];\n          styles[styleName] = {\n            open: \"\\x1B[\".concat(style[0], \"m\"),\n            close: \"\\x1B[\".concat(style[1], \"m\")\n          };\n          group[styleName] = styles[styleName];\n          codes.set(style[0], style[1]);\n        }\n\n        Object.defineProperty(styles, groupName, {\n          value: group,\n          enumerable: false\n        });\n        Object.defineProperty(styles, 'codes', {\n          value: codes,\n          enumerable: false\n        });\n      }\n\n      var ansi2ansi = function ansi2ansi(n) {\n        return n;\n      };\n\n      var rgb2rgb = function rgb2rgb(r, g, b) {\n        return [r, g, b];\n      };\n\n      styles.color.close = \"\\x1B[39m\";\n      styles.bgColor.close = \"\\x1B[49m\";\n      styles.color.ansi = {\n        ansi: wrapAnsi16(ansi2ansi, 0)\n      };\n      styles.color.ansi256 = {\n        ansi256: wrapAnsi256(ansi2ansi, 0)\n      };\n      styles.color.ansi16m = {\n        rgb: wrapAnsi16m(rgb2rgb, 0)\n      };\n      styles.bgColor.ansi = {\n        ansi: wrapAnsi16(ansi2ansi, 10)\n      };\n      styles.bgColor.ansi256 = {\n        ansi256: wrapAnsi256(ansi2ansi, 10)\n      };\n      styles.bgColor.ansi16m = {\n        rgb: wrapAnsi16m(rgb2rgb, 10)\n      };\n\n      for (var _i2 = 0, _Object$keys2 = Object.keys(colorConvert); _i2 < _Object$keys2.length; _i2++) {\n        var key = _Object$keys2[_i2];\n\n        if (_typeof(colorConvert[key]) !== 'object') {\n          continue;\n        }\n\n        var suite = colorConvert[key];\n\n        if (key === 'ansi16') {\n          key = 'ansi';\n        }\n\n        if ('ansi16' in suite) {\n          styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);\n          styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);\n        }\n\n        if ('ansi256' in suite) {\n          styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);\n          styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);\n        }\n\n        if ('rgb' in suite) {\n          styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);\n          styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);\n        }\n      }\n\n      return styles;\n    } // Make the export immutable\n\n\n    Object.defineProperty(module, 'exports', {\n      enumerable: true,\n      get: assembleStyles\n    });\n  });\n\n  var require$$0$1 = {\n    EOL: \"\\n\"\n  };\n\n  var hasFlag = function hasFlag(flag, argv) {\n    argv = argv || process.argv;\n    var prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';\n    var pos = argv.indexOf(prefix + flag);\n    var terminatorPos = argv.indexOf('--');\n    return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);\n  };\n\n  var env$1 = process.env;\n  var forceColor;\n\n  if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {\n    forceColor = false;\n  } else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {\n    forceColor = true;\n  }\n\n  if ('FORCE_COLOR' in env$1) {\n    forceColor = env$1.FORCE_COLOR.length === 0 || parseInt(env$1.FORCE_COLOR, 10) !== 0;\n  }\n\n  function translateLevel(level) {\n    if (level === 0) {\n      return false;\n    }\n\n    return {\n      level: level,\n      hasBasic: true,\n      has256: level >= 2,\n      has16m: level >= 3\n    };\n  }\n\n  function supportsColor(stream) {\n    if (forceColor === false) {\n      return 0;\n    }\n\n    if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {\n      return 3;\n    }\n\n    if (hasFlag('color=256')) {\n      return 2;\n    }\n\n    if (stream && !stream.isTTY && forceColor !== true) {\n      return 0;\n    }\n\n    var min = forceColor ? 1 : 0;\n\n    if (process.platform === 'win32') {\n      // Node.js 7.5.0 is the first version of Node.js to include a patch to\n      // libuv that enables 256 color output on Windows. Anything earlier and it\n      // won't work. However, here we target Node.js 8 at minimum as it is an LTS\n      // release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows\n      // release that supports 256 colors. Windows 10 build 14931 is the first release\n      // that supports 16m/TrueColor.\n      var osRelease = require$$0$1.release().split('.');\n\n      if (Number(process.versions.node.split('.')[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {\n        return Number(osRelease[2]) >= 14931 ? 3 : 2;\n      }\n\n      return 1;\n    }\n\n    if ('CI' in env$1) {\n      if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(function (sign) {\n        return sign in env$1;\n      }) || env$1.CI_NAME === 'codeship') {\n        return 1;\n      }\n\n      return min;\n    }\n\n    if ('TEAMCITY_VERSION' in env$1) {\n      return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env$1.TEAMCITY_VERSION) ? 1 : 0;\n    }\n\n    if (env$1.COLORTERM === 'truecolor') {\n      return 3;\n    }\n\n    if ('TERM_PROGRAM' in env$1) {\n      var version = parseInt((env$1.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n      switch (env$1.TERM_PROGRAM) {\n        case 'iTerm.app':\n          return version >= 3 ? 3 : 2;\n\n        case 'Apple_Terminal':\n          return 2;\n        // No default\n      }\n    }\n\n    if (/-256(color)?$/i.test(env$1.TERM)) {\n      return 2;\n    }\n\n    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env$1.TERM)) {\n      return 1;\n    }\n\n    if ('COLORTERM' in env$1) {\n      return 1;\n    }\n\n    if (env$1.TERM === 'dumb') {\n      return min;\n    }\n\n    return min;\n  }\n\n  function getSupportLevel(stream) {\n    var level = supportsColor(stream);\n    return translateLevel(level);\n  }\n\n  var supportsColor_1 = {\n    supportsColor: getSupportLevel,\n    stdout: getSupportLevel(process.stdout),\n    stderr: getSupportLevel(process.stderr)\n  };\n\n  var TEMPLATE_REGEX = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\n  var STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\n  var STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\n  var ESCAPE_REGEX = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n  var ESCAPES = new Map([['n', '\\n'], ['r', '\\r'], ['t', '\\t'], ['b', '\\b'], ['f', '\\f'], ['v', '\\v'], ['0', '\\0'], ['\\\\', '\\\\'], ['e', \"\\x1B\"], ['a', \"\\x07\"]]);\n\n  function unescape(c) {\n    if (c[0] === 'u' && c.length === 5 || c[0] === 'x' && c.length === 3) {\n      return String.fromCharCode(parseInt(c.slice(1), 16));\n    }\n\n    return ESCAPES.get(c) || c;\n  }\n\n  function parseArguments(name, args) {\n    var results = [];\n    var chunks = args.trim().split(/\\s*,\\s*/g);\n    var matches;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = chunks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var chunk = _step.value;\n\n        if (!isNaN(chunk)) {\n          results.push(Number(chunk));\n        } else if (matches = chunk.match(STRING_REGEX)) {\n          results.push(matches[2].replace(ESCAPE_REGEX, function (m, escape, chr) {\n            return escape ? unescape(escape) : chr;\n          }));\n        } else {\n          throw new Error(\"Invalid Chalk template style argument: \".concat(chunk, \" (in style '\").concat(name, \"')\"));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return results;\n  }\n\n  function parseStyle(style) {\n    STYLE_REGEX.lastIndex = 0;\n    var results = [];\n    var matches;\n\n    while ((matches = STYLE_REGEX.exec(style)) !== null) {\n      var name = matches[1];\n\n      if (matches[2]) {\n        var args = parseArguments(name, matches[2]);\n        results.push([name].concat(args));\n      } else {\n        results.push([name]);\n      }\n    }\n\n    return results;\n  }\n\n  function buildStyle(chalk, styles) {\n    var enabled = {};\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = styles[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var layer = _step2.value;\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = layer.styles[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var style = _step3.value;\n            enabled[style[0]] = layer.inverse ? null : style.slice(1);\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    var current = chalk;\n\n    for (var _i = 0, _Object$keys = Object.keys(enabled); _i < _Object$keys.length; _i++) {\n      var styleName = _Object$keys[_i];\n\n      if (Array.isArray(enabled[styleName])) {\n        if (!(styleName in current)) {\n          throw new Error(\"Unknown Chalk style: \".concat(styleName));\n        }\n\n        if (enabled[styleName].length > 0) {\n          current = current[styleName].apply(current, enabled[styleName]);\n        } else {\n          current = current[styleName];\n        }\n      }\n    }\n\n    return current;\n  }\n\n  var templates = function templates(chalk, tmp) {\n    var styles = [];\n    var chunks = [];\n    var chunk = []; // eslint-disable-next-line max-params\n\n    tmp.replace(TEMPLATE_REGEX, function (m, escapeChar, inverse, style, close, chr) {\n      if (escapeChar) {\n        chunk.push(unescape(escapeChar));\n      } else if (style) {\n        var str = chunk.join('');\n        chunk = [];\n        chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));\n        styles.push({\n          inverse: inverse,\n          styles: parseStyle(style)\n        });\n      } else if (close) {\n        if (styles.length === 0) {\n          throw new Error('Found extraneous } in Chalk template literal');\n        }\n\n        chunks.push(buildStyle(chalk, styles)(chunk.join('')));\n        chunk = [];\n        styles.pop();\n      } else {\n        chunk.push(chr);\n      }\n    });\n    chunks.push(chunk.join(''));\n\n    if (styles.length > 0) {\n      var errMsg = \"Chalk template literal is missing \".concat(styles.length, \" closing bracket\").concat(styles.length === 1 ? '' : 's', \" (`}`)\");\n      throw new Error(errMsg);\n    }\n\n    return chunks.join('');\n  };\n\n  var chalk = createCommonjsModule(function (module) {\n\n    var stdoutColor = supportsColor_1.stdout;\n    var isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm'); // `supportsColor.level` → `ansiStyles.color[name]` mapping\n\n    var levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m']; // `color-convert` models to exclude from the Chalk API due to conflicts and such\n\n    var skipModels = new Set(['gray']);\n    var styles = Object.create(null);\n\n    function applyOptions(obj, options) {\n      options = options || {}; // Detect level if not set manually\n\n      var scLevel = stdoutColor ? stdoutColor.level : 0;\n      obj.level = options.level === undefined ? scLevel : options.level;\n      obj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;\n    }\n\n    function Chalk(options) {\n      // We check for this.template here since calling `chalk.constructor()`\n      // by itself will have a `this` of a previously constructed chalk object\n      if (!this || !(this instanceof Chalk) || this.template) {\n        var _chalk = {};\n        applyOptions(_chalk, options);\n\n        _chalk.template = function () {\n          var args = [].slice.call(arguments);\n          return chalkTag.apply(null, [_chalk.template].concat(args));\n        };\n\n        Object.setPrototypeOf(_chalk, Chalk.prototype);\n        Object.setPrototypeOf(_chalk.template, _chalk);\n        _chalk.template.constructor = Chalk;\n        return _chalk.template;\n      }\n\n      applyOptions(this, options);\n    } // Use bright blue on Windows as the normal blue color is illegible\n\n\n    if (isSimpleWindowsTerm) {\n      ansiStyles.blue.open = \"\\x1B[94m\";\n    }\n\n    var _loop = function _loop() {\n      var key = _Object$keys[_i];\n      ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n      styles[key] = {\n        get: function get() {\n          var codes = ansiStyles[key];\n          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);\n        }\n      };\n    };\n\n    for (var _i = 0, _Object$keys = Object.keys(ansiStyles); _i < _Object$keys.length; _i++) {\n      _loop();\n    }\n\n    styles.visible = {\n      get: function get() {\n        return build.call(this, this._styles || [], true, 'visible');\n      }\n    };\n    ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');\n\n    var _loop2 = function _loop2() {\n      var model = _Object$keys2[_i2];\n\n      if (skipModels.has(model)) {\n        return \"continue\";\n      }\n\n      styles[model] = {\n        get: function get() {\n          var level = this.level;\n          return function () {\n            var open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);\n            var codes = {\n              open: open,\n              close: ansiStyles.color.close,\n              closeRe: ansiStyles.color.closeRe\n            };\n            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n          };\n        }\n      };\n    };\n\n    for (var _i2 = 0, _Object$keys2 = Object.keys(ansiStyles.color.ansi); _i2 < _Object$keys2.length; _i2++) {\n      var _ret = _loop2();\n\n      if (_ret === \"continue\") continue;\n    }\n\n    ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');\n\n    var _loop3 = function _loop3() {\n      var model = _Object$keys3[_i3];\n\n      if (skipModels.has(model)) {\n        return \"continue\";\n      }\n\n      var bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n      styles[bgModel] = {\n        get: function get() {\n          var level = this.level;\n          return function () {\n            var open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);\n            var codes = {\n              open: open,\n              close: ansiStyles.bgColor.close,\n              closeRe: ansiStyles.bgColor.closeRe\n            };\n            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n          };\n        }\n      };\n    };\n\n    for (var _i3 = 0, _Object$keys3 = Object.keys(ansiStyles.bgColor.ansi); _i3 < _Object$keys3.length; _i3++) {\n      var _ret2 = _loop3();\n\n      if (_ret2 === \"continue\") continue;\n    }\n\n    var proto = Object.defineProperties(function () {}, styles);\n\n    function build(_styles, _empty, key) {\n      var builder = function builder() {\n        return applyStyle.apply(builder, arguments);\n      };\n\n      builder._styles = _styles;\n      builder._empty = _empty;\n      var self = this;\n      Object.defineProperty(builder, 'level', {\n        enumerable: true,\n        get: function get() {\n          return self.level;\n        },\n        set: function set(level) {\n          self.level = level;\n        }\n      });\n      Object.defineProperty(builder, 'enabled', {\n        enumerable: true,\n        get: function get() {\n          return self.enabled;\n        },\n        set: function set(enabled) {\n          self.enabled = enabled;\n        }\n      }); // See below for fix regarding invisible grey/dim combination on Windows\n\n      builder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey'; // `__proto__` is used because we must return a function, but there is\n      // no way to create a function with a different prototype\n\n      builder.__proto__ = proto; // eslint-disable-line no-proto\n\n      return builder;\n    }\n\n    function applyStyle() {\n      // Support varags, but simply cast to string in case there's only one arg\n      var args = arguments;\n      var argsLen = args.length;\n      var str = String(arguments[0]);\n\n      if (argsLen === 0) {\n        return '';\n      }\n\n      if (argsLen > 1) {\n        // Don't slice `arguments`, it prevents V8 optimizations\n        for (var a = 1; a < argsLen; a++) {\n          str += ' ' + args[a];\n        }\n      }\n\n      if (!this.enabled || this.level <= 0 || !str) {\n        return this._empty ? '' : str;\n      } // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n      // see https://github.com/chalk/chalk/issues/58\n      // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n\n\n      var originalDim = ansiStyles.dim.open;\n\n      if (isSimpleWindowsTerm && this.hasGrey) {\n        ansiStyles.dim.open = '';\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._styles.slice().reverse()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var code = _step.value;\n          // Replace any instances already present with a re-opening code\n          // otherwise only the part of the string until said closing code\n          // will be colored, and the rest will simply be 'plain'.\n          str = code.open + str.replace(code.closeRe, code.open) + code.close; // Close the styling before a linebreak and reopen\n          // after next line to fix a bleed issue on macOS\n          // https://github.com/chalk/chalk/pull/92\n\n          str = str.replace(/\\r?\\n/g, \"\".concat(code.close, \"$&\").concat(code.open));\n        } // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      ansiStyles.dim.open = originalDim;\n      return str;\n    }\n\n    function chalkTag(chalk, strings) {\n      if (!Array.isArray(strings)) {\n        // If chalk() was called by itself or with a string,\n        // return the string itself as a string.\n        return [].slice.call(arguments, 1).join(' ');\n      }\n\n      var args = [].slice.call(arguments, 2);\n      var parts = [strings.raw[0]];\n\n      for (var i = 1; i < strings.length; i++) {\n        parts.push(String(args[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'));\n        parts.push(String(strings.raw[i]));\n      }\n\n      return templates(chalk, parts.join(''));\n    }\n\n    Object.defineProperties(Chalk.prototype, styles);\n    module.exports = Chalk(); // eslint-disable-line new-cap\n\n    module.exports.supportsColor = stdoutColor;\n    module.exports.default = module.exports; // For TypeScript\n  });\n  var chalk_1 = chalk.supportsColor;\n\n  var common = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    exports.commonDeprecatedHandler = function (keyOrPair, redirectTo, _ref) {\n      var descriptor = _ref.descriptor;\n      var messages = [\"\".concat(chalk.default.yellow(typeof keyOrPair === 'string' ? descriptor.key(keyOrPair) : descriptor.pair(keyOrPair)), \" is deprecated\")];\n\n      if (redirectTo) {\n        messages.push(\"we now treat it as \".concat(chalk.default.blue(typeof redirectTo === 'string' ? descriptor.key(redirectTo) : descriptor.pair(redirectTo))));\n      }\n\n      return messages.join('; ') + '.';\n    };\n  });\n  unwrapExports(common);\n  var common_1 = common.commonDeprecatedHandler;\n\n  var deprecated = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    tslib_1.__exportStar(common, exports);\n  });\n  unwrapExports(deprecated);\n\n  var common$1 = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    exports.commonInvalidHandler = function (key, value, utils) {\n      return [\"Invalid \".concat(chalk.default.red(utils.descriptor.key(key)), \" value.\"), \"Expected \".concat(chalk.default.blue(utils.schemas[key].expected(utils)), \",\"), \"but received \".concat(chalk.default.red(utils.descriptor.value(value)), \".\")].join(' ');\n    };\n  });\n  unwrapExports(common$1);\n  var common_1$1 = common$1.commonInvalidHandler;\n\n  var invalid = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    tslib_1.__exportStar(common$1, exports);\n  });\n  unwrapExports(invalid);\n\n  /* eslint-disable no-nested-ternary */\n\n  var arr = [];\n  var charCodeCache = [];\n\n  var leven = function leven(a, b) {\n    if (a === b) {\n      return 0;\n    }\n\n    var swap = a; // Swapping the strings if `a` is longer than `b` so we know which one is the\n    // shortest & which one is the longest\n\n    if (a.length > b.length) {\n      a = b;\n      b = swap;\n    }\n\n    var aLen = a.length;\n    var bLen = b.length;\n\n    if (aLen === 0) {\n      return bLen;\n    }\n\n    if (bLen === 0) {\n      return aLen;\n    } // Performing suffix trimming:\n    // We can linearly drop suffix common to both strings since they\n    // don't increase distance at all\n    // Note: `~-` is the bitwise way to perform a `- 1` operation\n\n\n    while (aLen > 0 && a.charCodeAt(~-aLen) === b.charCodeAt(~-bLen)) {\n      aLen--;\n      bLen--;\n    }\n\n    if (aLen === 0) {\n      return bLen;\n    } // Performing prefix trimming\n    // We can linearly drop prefix common to both strings since they\n    // don't increase distance at all\n\n\n    var start = 0;\n\n    while (start < aLen && a.charCodeAt(start) === b.charCodeAt(start)) {\n      start++;\n    }\n\n    aLen -= start;\n    bLen -= start;\n\n    if (aLen === 0) {\n      return bLen;\n    }\n\n    var bCharCode;\n    var ret;\n    var tmp;\n    var tmp2;\n    var i = 0;\n    var j = 0;\n\n    while (i < aLen) {\n      charCodeCache[start + i] = a.charCodeAt(start + i);\n      arr[i] = ++i;\n    }\n\n    while (j < bLen) {\n      bCharCode = b.charCodeAt(start + j);\n      tmp = j++;\n      ret = j;\n\n      for (i = 0; i < aLen; i++) {\n        tmp2 = bCharCode === charCodeCache[start + i] ? tmp : tmp + 1;\n        tmp = arr[i];\n        ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;\n      }\n    }\n\n    return ret;\n  };\n\n  var leven_1 = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    exports.levenUnknownHandler = function (key, value, _ref) {\n      var descriptor = _ref.descriptor,\n          logger = _ref.logger,\n          schemas = _ref.schemas;\n      var messages = [\"Ignored unknown option \".concat(chalk.default.yellow(descriptor.pair({\n        key: key,\n        value: value\n      })), \".\")];\n      var suggestion = Object.keys(schemas).sort().find(function (knownKey) {\n        return leven(key, knownKey) < 3;\n      });\n\n      if (suggestion) {\n        messages.push(\"Did you mean \".concat(chalk.default.blue(descriptor.key(suggestion)), \"?\"));\n      }\n\n      logger.warn(messages.join(' '));\n    };\n  });\n  unwrapExports(leven_1);\n  var leven_2 = leven_1.levenUnknownHandler;\n\n  var unknown = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    tslib_1.__exportStar(leven_1, exports);\n  });\n  unwrapExports(unknown);\n\n  var handlers = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    tslib_1.__exportStar(deprecated, exports);\n\n    tslib_1.__exportStar(invalid, exports);\n\n    tslib_1.__exportStar(unknown, exports);\n  });\n  unwrapExports(handlers);\n\n  var schema = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var HANDLER_KEYS = ['default', 'expected', 'validate', 'deprecated', 'forward', 'redirect', 'overlap', 'preprocess', 'postprocess'];\n\n    function createSchema(SchemaConstructor, parameters) {\n      var schema = new SchemaConstructor(parameters);\n      var subSchema = Object.create(schema);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = HANDLER_KEYS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var handlerKey = _step.value;\n\n          if (handlerKey in parameters) {\n            subSchema[handlerKey] = normalizeHandler(parameters[handlerKey], schema, Schema.prototype[handlerKey].length);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return subSchema;\n    }\n\n    exports.createSchema = createSchema;\n\n    var Schema =\n    /*#__PURE__*/\n    function () {\n      function Schema(parameters) {\n        _classCallCheck(this, Schema);\n\n        this.name = parameters.name;\n      }\n\n      _createClass(Schema, [{\n        key: \"default\",\n        value: function _default(_utils) {\n          return undefined;\n        } // istanbul ignore next: this is actually an abstract method but we need a placeholder to get `function.length`\n\n      }, {\n        key: \"expected\",\n        value: function expected(_utils) {\n          return 'nothing';\n        } // istanbul ignore next: this is actually an abstract method but we need a placeholder to get `function.length`\n\n      }, {\n        key: \"validate\",\n        value: function validate(_value, _utils) {\n          return false;\n        }\n      }, {\n        key: \"deprecated\",\n        value: function deprecated(_value, _utils) {\n          return false;\n        }\n      }, {\n        key: \"forward\",\n        value: function forward(_value, _utils) {\n          return undefined;\n        }\n      }, {\n        key: \"redirect\",\n        value: function redirect(_value, _utils) {\n          return undefined;\n        }\n      }, {\n        key: \"overlap\",\n        value: function overlap(currentValue, _newValue, _utils) {\n          return currentValue;\n        }\n      }, {\n        key: \"preprocess\",\n        value: function preprocess(value, _utils) {\n          return value;\n        }\n      }, {\n        key: \"postprocess\",\n        value: function postprocess(value, _utils) {\n          return value;\n        }\n      }], [{\n        key: \"create\",\n        value: function create(parameters) {\n          // @ts-ignore: https://github.com/Microsoft/TypeScript/issues/5863\n          return createSchema(this, parameters);\n        }\n      }]);\n\n      return Schema;\n    }();\n\n    exports.Schema = Schema;\n\n    function normalizeHandler(handler, superSchema, handlerArgumentsLength) {\n      return typeof handler === 'function' ? function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return handler.apply(void 0, _toConsumableArray(args.slice(0, handlerArgumentsLength - 1)).concat([superSchema], _toConsumableArray(args.slice(handlerArgumentsLength - 1))));\n      } : function () {\n        return handler;\n      };\n    }\n  });\n  unwrapExports(schema);\n  var schema_1 = schema.createSchema;\n  var schema_2 = schema.Schema;\n\n  var alias = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var AliasSchema =\n    /*#__PURE__*/\n    function (_schema_1$Schema) {\n      _inherits(AliasSchema, _schema_1$Schema);\n\n      function AliasSchema(parameters) {\n        var _this;\n\n        _classCallCheck(this, AliasSchema);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(AliasSchema).call(this, parameters));\n        _this._sourceName = parameters.sourceName;\n        return _this;\n      }\n\n      _createClass(AliasSchema, [{\n        key: \"expected\",\n        value: function expected(utils) {\n          return utils.schemas[this._sourceName].expected(utils);\n        }\n      }, {\n        key: \"validate\",\n        value: function validate(value, utils) {\n          return utils.schemas[this._sourceName].validate(value, utils);\n        }\n      }, {\n        key: \"redirect\",\n        value: function redirect(_value, _utils) {\n          return this._sourceName;\n        }\n      }]);\n\n      return AliasSchema;\n    }(schema.Schema);\n\n    exports.AliasSchema = AliasSchema;\n  });\n  unwrapExports(alias);\n  var alias_1 = alias.AliasSchema;\n\n  var any = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var AnySchema =\n    /*#__PURE__*/\n    function (_schema_1$Schema) {\n      _inherits(AnySchema, _schema_1$Schema);\n\n      function AnySchema() {\n        _classCallCheck(this, AnySchema);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(AnySchema).apply(this, arguments));\n      }\n\n      _createClass(AnySchema, [{\n        key: \"expected\",\n        value: function expected() {\n          return 'anything';\n        }\n      }, {\n        key: \"validate\",\n        value: function validate() {\n          return true;\n        }\n      }]);\n\n      return AnySchema;\n    }(schema.Schema);\n\n    exports.AnySchema = AnySchema;\n  });\n  unwrapExports(any);\n  var any_1 = any.AnySchema;\n\n  var array = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var ArraySchema =\n    /*#__PURE__*/\n    function (_schema_1$Schema) {\n      _inherits(ArraySchema, _schema_1$Schema);\n\n      function ArraySchema(_a) {\n        var _this;\n\n        _classCallCheck(this, ArraySchema);\n\n        var valueSchema = _a.valueSchema,\n            _a$name = _a.name,\n            name = _a$name === void 0 ? valueSchema.name : _a$name,\n            handlers = tslib_1.__rest(_a, [\"valueSchema\", \"name\"]);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(ArraySchema).call(this, Object.assign({}, handlers, {\n          name: name\n        })));\n        _this._valueSchema = valueSchema;\n        return _this;\n      }\n\n      _createClass(ArraySchema, [{\n        key: \"expected\",\n        value: function expected(utils) {\n          return \"an array of \".concat(this._valueSchema.expected(utils));\n        }\n      }, {\n        key: \"validate\",\n        value: function validate(value, utils) {\n          if (!Array.isArray(value)) {\n            return false;\n          }\n\n          var invalidValues = [];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var subValue = _step.value;\n              var subValidateResult = utils.normalizeValidateResult(this._valueSchema.validate(subValue, utils), subValue);\n\n              if (subValidateResult !== true) {\n                invalidValues.push(subValidateResult.value);\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          return invalidValues.length === 0 ? true : {\n            value: invalidValues\n          };\n        }\n      }, {\n        key: \"deprecated\",\n        value: function deprecated(value, utils) {\n          var deprecatedResult = [];\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = value[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var subValue = _step2.value;\n              var subDeprecatedResult = utils.normalizeDeprecatedResult(this._valueSchema.deprecated(subValue, utils), subValue);\n\n              if (subDeprecatedResult !== false) {\n                deprecatedResult.push.apply(deprecatedResult, _toConsumableArray(subDeprecatedResult.map(function (_ref) {\n                  var deprecatedValue = _ref.value;\n                  return {\n                    value: [deprecatedValue]\n                  };\n                })));\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          return deprecatedResult;\n        }\n      }, {\n        key: \"forward\",\n        value: function forward(value, utils) {\n          var forwardResult = [];\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = value[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var subValue = _step3.value;\n              var subForwardResult = utils.normalizeForwardResult(this._valueSchema.forward(subValue, utils), subValue);\n              forwardResult.push.apply(forwardResult, _toConsumableArray(subForwardResult.map(wrapTransferResult)));\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          return forwardResult;\n        }\n      }, {\n        key: \"redirect\",\n        value: function redirect(value, utils) {\n          var remain = [];\n          var redirect = [];\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = value[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var subValue = _step4.value;\n              var subRedirectResult = utils.normalizeRedirectResult(this._valueSchema.redirect(subValue, utils), subValue);\n\n              if ('remain' in subRedirectResult) {\n                remain.push(subRedirectResult.remain);\n              }\n\n              redirect.push.apply(redirect, _toConsumableArray(subRedirectResult.redirect.map(wrapTransferResult)));\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n\n          return remain.length === 0 ? {\n            redirect: redirect\n          } : {\n            redirect: redirect,\n            remain: remain\n          };\n        }\n      }, {\n        key: \"overlap\",\n        value: function overlap(currentValue, newValue) {\n          return currentValue.concat(newValue);\n        }\n      }]);\n\n      return ArraySchema;\n    }(schema.Schema);\n\n    exports.ArraySchema = ArraySchema;\n\n    function wrapTransferResult(_ref2) {\n      var from = _ref2.from,\n          to = _ref2.to;\n      return {\n        from: [from],\n        to: to\n      };\n    }\n  });\n  unwrapExports(array);\n  var array_1 = array.ArraySchema;\n\n  var boolean_1 = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var BooleanSchema =\n    /*#__PURE__*/\n    function (_schema_1$Schema) {\n      _inherits(BooleanSchema, _schema_1$Schema);\n\n      function BooleanSchema() {\n        _classCallCheck(this, BooleanSchema);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(BooleanSchema).apply(this, arguments));\n      }\n\n      _createClass(BooleanSchema, [{\n        key: \"expected\",\n        value: function expected() {\n          return 'true or false';\n        }\n      }, {\n        key: \"validate\",\n        value: function validate(value) {\n          return typeof value === 'boolean';\n        }\n      }]);\n\n      return BooleanSchema;\n    }(schema.Schema);\n\n    exports.BooleanSchema = BooleanSchema;\n  });\n  unwrapExports(boolean_1);\n  var boolean_2 = boolean_1.BooleanSchema;\n\n  var utils = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    function recordFromArray(array, mainKey) {\n      var record = Object.create(null);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = array[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var value = _step.value;\n          var key = value[mainKey]; // istanbul ignore next\n\n          if (record[key]) {\n            throw new Error(\"Duplicate \".concat(mainKey, \" \").concat(JSON.stringify(key)));\n          } // @ts-ignore\n\n\n          record[key] = value;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return record;\n    }\n\n    exports.recordFromArray = recordFromArray;\n\n    function mapFromArray(array, mainKey) {\n      var map = new Map();\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = array[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var value = _step2.value;\n          var key = value[mainKey]; // istanbul ignore next\n\n          if (map.has(key)) {\n            throw new Error(\"Duplicate \".concat(mainKey, \" \").concat(JSON.stringify(key)));\n          }\n\n          map.set(key, value);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return map;\n    }\n\n    exports.mapFromArray = mapFromArray;\n\n    function createAutoChecklist() {\n      var map = Object.create(null);\n      return function (id) {\n        var idString = JSON.stringify(id);\n\n        if (map[idString]) {\n          return true;\n        }\n\n        map[idString] = true;\n        return false;\n      };\n    }\n\n    exports.createAutoChecklist = createAutoChecklist;\n\n    function partition(array, predicate) {\n      var trueArray = [];\n      var falseArray = [];\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = array[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var value = _step3.value;\n\n          if (predicate(value)) {\n            trueArray.push(value);\n          } else {\n            falseArray.push(value);\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return [trueArray, falseArray];\n    }\n\n    exports.partition = partition;\n\n    function isInt(value) {\n      return value === Math.floor(value);\n    }\n\n    exports.isInt = isInt;\n\n    function comparePrimitive(a, b) {\n      if (a === b) {\n        return 0;\n      }\n\n      var typeofA = _typeof(a);\n\n      var typeofB = _typeof(b);\n\n      var orders = ['undefined', 'object', 'boolean', 'number', 'string'];\n\n      if (typeofA !== typeofB) {\n        return orders.indexOf(typeofA) - orders.indexOf(typeofB);\n      }\n\n      if (typeofA !== 'string') {\n        return Number(a) - Number(b);\n      }\n\n      return a.localeCompare(b);\n    }\n\n    exports.comparePrimitive = comparePrimitive;\n\n    function normalizeDefaultResult(result) {\n      return result === undefined ? {} : result;\n    }\n\n    exports.normalizeDefaultResult = normalizeDefaultResult;\n\n    function normalizeValidateResult(result, value) {\n      return result === true ? true : result === false ? {\n        value: value\n      } : result;\n    }\n\n    exports.normalizeValidateResult = normalizeValidateResult;\n\n    function normalizeDeprecatedResult(result, value) {\n      var doNotNormalizeTrue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return result === false ? false : result === true ? doNotNormalizeTrue ? true : [{\n        value: value\n      }] : 'value' in result ? [result] : result.length === 0 ? false : result;\n    }\n\n    exports.normalizeDeprecatedResult = normalizeDeprecatedResult;\n\n    function normalizeTransferResult(result, value) {\n      return typeof result === 'string' || 'key' in result ? {\n        from: value,\n        to: result\n      } : 'from' in result ? {\n        from: result.from,\n        to: result.to\n      } : {\n        from: value,\n        to: result.to\n      };\n    }\n\n    exports.normalizeTransferResult = normalizeTransferResult;\n\n    function normalizeForwardResult(result, value) {\n      return result === undefined ? [] : Array.isArray(result) ? result.map(function (transferResult) {\n        return normalizeTransferResult(transferResult, value);\n      }) : [normalizeTransferResult(result, value)];\n    }\n\n    exports.normalizeForwardResult = normalizeForwardResult;\n\n    function normalizeRedirectResult(result, value) {\n      var redirect = normalizeForwardResult(_typeof(result) === 'object' && 'redirect' in result ? result.redirect : result, value);\n      return redirect.length === 0 ? {\n        remain: value,\n        redirect: redirect\n      } : _typeof(result) === 'object' && 'remain' in result ? {\n        remain: result.remain,\n        redirect: redirect\n      } : {\n        redirect: redirect\n      };\n    }\n\n    exports.normalizeRedirectResult = normalizeRedirectResult;\n  });\n  unwrapExports(utils);\n  var utils_1 = utils.recordFromArray;\n  var utils_2 = utils.mapFromArray;\n  var utils_3 = utils.createAutoChecklist;\n  var utils_4 = utils.partition;\n  var utils_5 = utils.isInt;\n  var utils_6 = utils.comparePrimitive;\n  var utils_7 = utils.normalizeDefaultResult;\n  var utils_8 = utils.normalizeValidateResult;\n  var utils_9 = utils.normalizeDeprecatedResult;\n  var utils_10 = utils.normalizeTransferResult;\n  var utils_11 = utils.normalizeForwardResult;\n  var utils_12 = utils.normalizeRedirectResult;\n\n  var choice = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var ChoiceSchema =\n    /*#__PURE__*/\n    function (_schema_1$Schema) {\n      _inherits(ChoiceSchema, _schema_1$Schema);\n\n      function ChoiceSchema(parameters) {\n        var _this;\n\n        _classCallCheck(this, ChoiceSchema);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(ChoiceSchema).call(this, parameters));\n        _this._choices = utils.mapFromArray(parameters.choices.map(function (choice) {\n          return choice && _typeof(choice) === 'object' ? choice : {\n            value: choice\n          };\n        }), 'value');\n        return _this;\n      }\n\n      _createClass(ChoiceSchema, [{\n        key: \"expected\",\n        value: function expected(_ref) {\n          var _this2 = this;\n\n          var descriptor = _ref.descriptor;\n          var choiceValues = Array.from(this._choices.keys()).map(function (value) {\n            return _this2._choices.get(value);\n          }).filter(function (choiceInfo) {\n            return !choiceInfo.deprecated;\n          }).map(function (choiceInfo) {\n            return choiceInfo.value;\n          }).sort(utils.comparePrimitive).map(descriptor.value);\n          var head = choiceValues.slice(0, -2);\n          var tail = choiceValues.slice(-2);\n          return head.concat(tail.join(' or ')).join(', ');\n        }\n      }, {\n        key: \"validate\",\n        value: function validate(value) {\n          return this._choices.has(value);\n        }\n      }, {\n        key: \"deprecated\",\n        value: function deprecated(value) {\n          var choiceInfo = this._choices.get(value);\n\n          return choiceInfo && choiceInfo.deprecated ? {\n            value: value\n          } : false;\n        }\n      }, {\n        key: \"forward\",\n        value: function forward(value) {\n          var choiceInfo = this._choices.get(value);\n\n          return choiceInfo ? choiceInfo.forward : undefined;\n        }\n      }, {\n        key: \"redirect\",\n        value: function redirect(value) {\n          var choiceInfo = this._choices.get(value);\n\n          return choiceInfo ? choiceInfo.redirect : undefined;\n        }\n      }]);\n\n      return ChoiceSchema;\n    }(schema.Schema);\n\n    exports.ChoiceSchema = ChoiceSchema;\n  });\n  unwrapExports(choice);\n  var choice_1 = choice.ChoiceSchema;\n\n  var number = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var NumberSchema =\n    /*#__PURE__*/\n    function (_schema_1$Schema) {\n      _inherits(NumberSchema, _schema_1$Schema);\n\n      function NumberSchema() {\n        _classCallCheck(this, NumberSchema);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(NumberSchema).apply(this, arguments));\n      }\n\n      _createClass(NumberSchema, [{\n        key: \"expected\",\n        value: function expected() {\n          return 'a number';\n        }\n      }, {\n        key: \"validate\",\n        value: function validate(value, _utils) {\n          return typeof value === 'number';\n        }\n      }]);\n\n      return NumberSchema;\n    }(schema.Schema);\n\n    exports.NumberSchema = NumberSchema;\n  });\n  unwrapExports(number);\n  var number_1 = number.NumberSchema;\n\n  var integer = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var IntegerSchema =\n    /*#__PURE__*/\n    function (_number_1$NumberSchem) {\n      _inherits(IntegerSchema, _number_1$NumberSchem);\n\n      function IntegerSchema() {\n        _classCallCheck(this, IntegerSchema);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(IntegerSchema).apply(this, arguments));\n      }\n\n      _createClass(IntegerSchema, [{\n        key: \"expected\",\n        value: function expected() {\n          return 'an integer';\n        }\n      }, {\n        key: \"validate\",\n        value: function validate(value, utils$1) {\n          return utils$1.normalizeValidateResult(_get(_getPrototypeOf(IntegerSchema.prototype), \"validate\", this).call(this, value, utils$1), value) === true && utils.isInt(value);\n        }\n      }]);\n\n      return IntegerSchema;\n    }(number.NumberSchema);\n\n    exports.IntegerSchema = IntegerSchema;\n  });\n  unwrapExports(integer);\n  var integer_1 = integer.IntegerSchema;\n\n  var string = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var StringSchema =\n    /*#__PURE__*/\n    function (_schema_1$Schema) {\n      _inherits(StringSchema, _schema_1$Schema);\n\n      function StringSchema() {\n        _classCallCheck(this, StringSchema);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(StringSchema).apply(this, arguments));\n      }\n\n      _createClass(StringSchema, [{\n        key: \"expected\",\n        value: function expected() {\n          return 'a string';\n        }\n      }, {\n        key: \"validate\",\n        value: function validate(value) {\n          return typeof value === 'string';\n        }\n      }]);\n\n      return StringSchema;\n    }(schema.Schema);\n\n    exports.StringSchema = StringSchema;\n  });\n  unwrapExports(string);\n  var string_1 = string.StringSchema;\n\n  var schemas = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    tslib_1.__exportStar(alias, exports);\n\n    tslib_1.__exportStar(any, exports);\n\n    tslib_1.__exportStar(array, exports);\n\n    tslib_1.__exportStar(boolean_1, exports);\n\n    tslib_1.__exportStar(choice, exports);\n\n    tslib_1.__exportStar(integer, exports);\n\n    tslib_1.__exportStar(number, exports);\n\n    tslib_1.__exportStar(string, exports);\n  });\n  unwrapExports(schemas);\n\n  var defaults = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.defaultDescriptor = api.apiDescriptor;\n    exports.defaultUnknownHandler = leven_1.levenUnknownHandler;\n    exports.defaultInvalidHandler = invalid.commonInvalidHandler;\n    exports.defaultDeprecatedHandler = common.commonDeprecatedHandler;\n  });\n  unwrapExports(defaults);\n  var defaults_1 = defaults.defaultDescriptor;\n  var defaults_2 = defaults.defaultUnknownHandler;\n  var defaults_3 = defaults.defaultInvalidHandler;\n  var defaults_4 = defaults.defaultDeprecatedHandler;\n\n  var normalize = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    exports.normalize = function (options, schemas, opts) {\n      return new Normalizer(schemas, opts).normalize(options);\n    };\n\n    var Normalizer =\n    /*#__PURE__*/\n    function () {\n      function Normalizer(schemas, opts) {\n        _classCallCheck(this, Normalizer);\n\n        // istanbul ignore next\n        var _ref = opts || {},\n            _ref$logger = _ref.logger,\n            logger = _ref$logger === void 0 ? console : _ref$logger,\n            _ref$descriptor = _ref.descriptor,\n            descriptor = _ref$descriptor === void 0 ? defaults.defaultDescriptor : _ref$descriptor,\n            _ref$unknown = _ref.unknown,\n            unknown = _ref$unknown === void 0 ? defaults.defaultUnknownHandler : _ref$unknown,\n            _ref$invalid = _ref.invalid,\n            invalid = _ref$invalid === void 0 ? defaults.defaultInvalidHandler : _ref$invalid,\n            _ref$deprecated = _ref.deprecated,\n            deprecated = _ref$deprecated === void 0 ? defaults.defaultDeprecatedHandler : _ref$deprecated;\n\n        this._utils = {\n          descriptor: descriptor,\n          logger:\n          /* istanbul ignore next */\n          logger || {\n            warn: function warn() {}\n          },\n          schemas: utils.recordFromArray(schemas, 'name'),\n          normalizeDefaultResult: utils.normalizeDefaultResult,\n          normalizeDeprecatedResult: utils.normalizeDeprecatedResult,\n          normalizeForwardResult: utils.normalizeForwardResult,\n          normalizeRedirectResult: utils.normalizeRedirectResult,\n          normalizeValidateResult: utils.normalizeValidateResult\n        };\n        this._unknownHandler = unknown;\n        this._invalidHandler = invalid;\n        this._deprecatedHandler = deprecated;\n        this.cleanHistory();\n      }\n\n      _createClass(Normalizer, [{\n        key: \"cleanHistory\",\n        value: function cleanHistory() {\n          this._hasDeprecationWarned = utils.createAutoChecklist();\n        }\n      }, {\n        key: \"normalize\",\n        value: function normalize(options) {\n          var _this = this;\n\n          var normalized = {};\n          var restOptionsArray = [options];\n\n          var applyNormalization = function applyNormalization() {\n            while (restOptionsArray.length !== 0) {\n              var currentOptions = restOptionsArray.shift();\n\n              var transferredOptionsArray = _this._applyNormalization(currentOptions, normalized);\n\n              restOptionsArray.push.apply(restOptionsArray, _toConsumableArray(transferredOptionsArray));\n            }\n          };\n\n          applyNormalization();\n\n          for (var _i = 0, _Object$keys = Object.keys(this._utils.schemas); _i < _Object$keys.length; _i++) {\n            var key = _Object$keys[_i];\n            var schema = this._utils.schemas[key];\n\n            if (!(key in normalized)) {\n              var defaultResult = utils.normalizeDefaultResult(schema.default(this._utils));\n\n              if ('value' in defaultResult) {\n                restOptionsArray.push(_defineProperty({}, key, defaultResult.value));\n              }\n            }\n          }\n\n          applyNormalization();\n\n          for (var _i2 = 0, _Object$keys2 = Object.keys(this._utils.schemas); _i2 < _Object$keys2.length; _i2++) {\n            var _key = _Object$keys2[_i2];\n            var _schema = this._utils.schemas[_key];\n\n            if (_key in normalized) {\n              normalized[_key] = _schema.postprocess(normalized[_key], this._utils);\n            }\n          }\n\n          return normalized;\n        }\n      }, {\n        key: \"_applyNormalization\",\n        value: function _applyNormalization(options, normalized) {\n          var _this2 = this;\n\n          var transferredOptionsArray = [];\n\n          var _utils_1$partition = utils.partition(Object.keys(options), function (key) {\n            return key in _this2._utils.schemas;\n          }),\n              _utils_1$partition2 = _slicedToArray(_utils_1$partition, 2),\n              knownOptionNames = _utils_1$partition2[0],\n              unknownOptionNames = _utils_1$partition2[1];\n\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            var _loop = function _loop() {\n              var key = _step.value;\n              var schema = _this2._utils.schemas[key];\n              var value = schema.preprocess(options[key], _this2._utils);\n              var validateResult = utils.normalizeValidateResult(schema.validate(value, _this2._utils), value);\n\n              if (validateResult !== true) {\n                var invalidValue = validateResult.value;\n\n                var errorMessageOrError = _this2._invalidHandler(key, invalidValue, _this2._utils);\n\n                throw typeof errorMessageOrError === 'string' ? new Error(errorMessageOrError) :\n                /* istanbul ignore next*/\n                errorMessageOrError;\n              }\n\n              var appendTransferredOptions = function appendTransferredOptions(_ref2) {\n                var from = _ref2.from,\n                    to = _ref2.to;\n                transferredOptionsArray.push(typeof to === 'string' ? _defineProperty({}, to, from) : _defineProperty({}, to.key, to.value));\n              };\n\n              var warnDeprecated = function warnDeprecated(_ref5) {\n                var currentValue = _ref5.value,\n                    redirectTo = _ref5.redirectTo;\n                var deprecatedResult = utils.normalizeDeprecatedResult(schema.deprecated(currentValue, _this2._utils), value,\n                /* doNotNormalizeTrue */\n                true);\n\n                if (deprecatedResult === false) {\n                  return;\n                }\n\n                if (deprecatedResult === true) {\n                  if (!_this2._hasDeprecationWarned(key)) {\n                    _this2._utils.logger.warn(_this2._deprecatedHandler(key, redirectTo, _this2._utils));\n                  }\n                } else {\n                  var _iteratorNormalCompletion3 = true;\n                  var _didIteratorError3 = false;\n                  var _iteratorError3 = undefined;\n\n                  try {\n                    for (var _iterator3 = deprecatedResult[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                      var deprecatedValue = _step3.value.value;\n                      var pair = {\n                        key: key,\n                        value: deprecatedValue\n                      };\n\n                      if (!_this2._hasDeprecationWarned(pair)) {\n                        var redirectToPair = typeof redirectTo === 'string' ? {\n                          key: redirectTo,\n                          value: deprecatedValue\n                        } : redirectTo;\n\n                        _this2._utils.logger.warn(_this2._deprecatedHandler(pair, redirectToPair, _this2._utils));\n                      }\n                    }\n                  } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                        _iterator3.return();\n                      }\n                    } finally {\n                      if (_didIteratorError3) {\n                        throw _iteratorError3;\n                      }\n                    }\n                  }\n                }\n              };\n\n              var forwardResult = utils.normalizeForwardResult(schema.forward(value, _this2._utils), value);\n              forwardResult.forEach(appendTransferredOptions);\n              var redirectResult = utils.normalizeRedirectResult(schema.redirect(value, _this2._utils), value);\n              redirectResult.redirect.forEach(appendTransferredOptions);\n\n              if ('remain' in redirectResult) {\n                var remainingValue = redirectResult.remain;\n                normalized[key] = key in normalized ? schema.overlap(normalized[key], remainingValue, _this2._utils) : remainingValue;\n                warnDeprecated({\n                  value: remainingValue\n                });\n              }\n\n              var _iteratorNormalCompletion4 = true;\n              var _didIteratorError4 = false;\n              var _iteratorError4 = undefined;\n\n              try {\n                for (var _iterator4 = redirectResult.redirect[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                  var _step4$value = _step4.value,\n                      from = _step4$value.from,\n                      to = _step4$value.to;\n                  warnDeprecated({\n                    value: from,\n                    redirectTo: to\n                  });\n                }\n              } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                    _iterator4.return();\n                  }\n                } finally {\n                  if (_didIteratorError4) {\n                    throw _iteratorError4;\n                  }\n                }\n              }\n            };\n\n            for (var _iterator = knownOptionNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              _loop();\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = unknownOptionNames[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var key = _step2.value;\n              var value = options[key];\n\n              var unknownResult = this._unknownHandler(key, value, this._utils);\n\n              if (unknownResult) {\n                for (var _i3 = 0, _Object$keys3 = Object.keys(unknownResult); _i3 < _Object$keys3.length; _i3++) {\n                  var unknownKey = _Object$keys3[_i3];\n\n                  var unknownOption = _defineProperty({}, unknownKey, unknownResult[unknownKey]);\n\n                  if (unknownKey in this._utils.schemas) {\n                    transferredOptionsArray.push(unknownOption);\n                  } else {\n                    Object.assign(normalized, unknownOption);\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          return transferredOptionsArray;\n        }\n      }]);\n\n      return Normalizer;\n    }();\n\n    exports.Normalizer = Normalizer;\n  });\n  unwrapExports(normalize);\n  var normalize_1 = normalize.normalize;\n  var normalize_2 = normalize.Normalizer;\n\n  var lib = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    tslib_1.__exportStar(descriptors, exports);\n\n    tslib_1.__exportStar(handlers, exports);\n\n    tslib_1.__exportStar(schemas, exports);\n\n    tslib_1.__exportStar(normalize, exports);\n\n    tslib_1.__exportStar(schema, exports);\n  });\n  unwrapExports(lib);\n\n  var array$1 = [];\n  var charCodeCache$1 = [];\n\n  var leven$1 = function leven(left, right) {\n    if (left === right) {\n      return 0;\n    }\n\n    var swap = left; // Swapping the strings if `a` is longer than `b` so we know which one is the\n    // shortest & which one is the longest\n\n    if (left.length > right.length) {\n      left = right;\n      right = swap;\n    }\n\n    var leftLength = left.length;\n    var rightLength = right.length; // Performing suffix trimming:\n    // We can linearly drop suffix common to both strings since they\n    // don't increase distance at all\n    // Note: `~-` is the bitwise way to perform a `- 1` operation\n\n    while (leftLength > 0 && left.charCodeAt(~-leftLength) === right.charCodeAt(~-rightLength)) {\n      leftLength--;\n      rightLength--;\n    } // Performing prefix trimming\n    // We can linearly drop prefix common to both strings since they\n    // don't increase distance at all\n\n\n    var start = 0;\n\n    while (start < leftLength && left.charCodeAt(start) === right.charCodeAt(start)) {\n      start++;\n    }\n\n    leftLength -= start;\n    rightLength -= start;\n\n    if (leftLength === 0) {\n      return rightLength;\n    }\n\n    var bCharCode;\n    var result;\n    var temp;\n    var temp2;\n    var i = 0;\n    var j = 0;\n\n    while (i < leftLength) {\n      charCodeCache$1[i] = left.charCodeAt(start + i);\n      array$1[i] = ++i;\n    }\n\n    while (j < rightLength) {\n      bCharCode = right.charCodeAt(start + j);\n      temp = j++;\n      result = j;\n\n      for (i = 0; i < leftLength; i++) {\n        temp2 = bCharCode === charCodeCache$1[i] ? temp : temp + 1;\n        temp = array$1[i]; // eslint-disable-next-line no-multi-assign\n\n        result = array$1[i] = temp > result ? temp2 > result ? result + 1 : temp2 : temp2 > temp ? temp + 1 : temp2;\n      }\n    }\n\n    return result;\n  };\n\n  var leven_1$1 = leven$1; // TODO: Remove this for the next major release\n\n  var default_1 = leven$1;\n  leven_1$1.default = default_1;\n\n  var cliDescriptor = {\n    key: function key(_key) {\n      return _key.length === 1 ? \"-\".concat(_key) : \"--\".concat(_key);\n    },\n    value: function value(_value) {\n      return lib.apiDescriptor.value(_value);\n    },\n    pair: function pair(_ref) {\n      var key = _ref.key,\n          value = _ref.value;\n      return value === false ? \"--no-\".concat(key) : value === true ? cliDescriptor.key(key) : value === \"\" ? \"\".concat(cliDescriptor.key(key), \" without an argument\") : \"\".concat(cliDescriptor.key(key), \"=\").concat(value);\n    }\n  };\n\n  var FlagSchema =\n  /*#__PURE__*/\n  function (_vnopts$ChoiceSchema) {\n    _inherits(FlagSchema, _vnopts$ChoiceSchema);\n\n    function FlagSchema(_ref2) {\n      var _this;\n\n      var name = _ref2.name,\n          flags = _ref2.flags;\n\n      _classCallCheck(this, FlagSchema);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(FlagSchema).call(this, {\n        name: name,\n        choices: flags\n      }));\n      _this._flags = flags.slice().sort();\n      return _this;\n    }\n\n    _createClass(FlagSchema, [{\n      key: \"preprocess\",\n      value: function preprocess(value, utils) {\n        if (typeof value === \"string\" && value.length !== 0 && this._flags.indexOf(value) === -1) {\n          var suggestion = this._flags.find(function (flag) {\n            return leven_1$1(flag, value) < 3;\n          });\n\n          if (suggestion) {\n            utils.logger.warn([\"Unknown flag \".concat(chalk.yellow(utils.descriptor.value(value)), \",\"), \"did you mean \".concat(chalk.blue(utils.descriptor.value(suggestion)), \"?\")].join(\" \"));\n            return suggestion;\n          }\n        }\n\n        return value;\n      }\n    }, {\n      key: \"expected\",\n      value: function expected() {\n        return \"a flag\";\n      }\n    }]);\n\n    return FlagSchema;\n  }(lib.ChoiceSchema);\n\n  var hasDeprecationWarned;\n\n  function normalizeOptions(options, optionInfos) {\n    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        logger = _ref3.logger,\n        _ref3$isCLI = _ref3.isCLI,\n        isCLI = _ref3$isCLI === void 0 ? false : _ref3$isCLI,\n        _ref3$passThrough = _ref3.passThrough,\n        passThrough = _ref3$passThrough === void 0 ? false : _ref3$passThrough;\n\n    var unknown = !passThrough ? lib.levenUnknownHandler : Array.isArray(passThrough) ? function (key, value) {\n      return passThrough.indexOf(key) === -1 ? undefined : _defineProperty({}, key, value);\n    } : function (key, value) {\n      return _defineProperty({}, key, value);\n    };\n    var descriptor = isCLI ? cliDescriptor : lib.apiDescriptor;\n    var schemas = optionInfosToSchemas(optionInfos, {\n      isCLI: isCLI\n    });\n    var normalizer = new lib.Normalizer(schemas, {\n      logger: logger,\n      unknown: unknown,\n      descriptor: descriptor\n    });\n    var shouldSuppressDuplicateDeprecationWarnings = logger !== false;\n\n    if (shouldSuppressDuplicateDeprecationWarnings && hasDeprecationWarned) {\n      normalizer._hasDeprecationWarned = hasDeprecationWarned;\n    }\n\n    var normalized = normalizer.normalize(options);\n\n    if (shouldSuppressDuplicateDeprecationWarnings) {\n      hasDeprecationWarned = normalizer._hasDeprecationWarned;\n    }\n\n    return normalized;\n  }\n\n  function optionInfosToSchemas(optionInfos, _ref6) {\n    var isCLI = _ref6.isCLI;\n    var schemas = [];\n\n    if (isCLI) {\n      schemas.push(lib.AnySchema.create({\n        name: \"_\"\n      }));\n    }\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = optionInfos[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var optionInfo = _step.value;\n        schemas.push(optionInfoToSchema(optionInfo, {\n          isCLI: isCLI,\n          optionInfos: optionInfos\n        }));\n\n        if (optionInfo.alias && isCLI) {\n          schemas.push(lib.AliasSchema.create({\n            name: optionInfo.alias,\n            sourceName: optionInfo.name\n          }));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return schemas;\n  }\n\n  function optionInfoToSchema(optionInfo, _ref7) {\n    var isCLI = _ref7.isCLI,\n        optionInfos = _ref7.optionInfos;\n    var SchemaConstructor;\n    var parameters = {\n      name: optionInfo.name\n    };\n    var handlers = {};\n\n    switch (optionInfo.type) {\n      case \"int\":\n        SchemaConstructor = lib.IntegerSchema;\n\n        if (isCLI) {\n          parameters.preprocess = function (value) {\n            return Number(value);\n          };\n        }\n\n        break;\n\n      case \"string\":\n        SchemaConstructor = lib.StringSchema;\n        break;\n\n      case \"choice\":\n        SchemaConstructor = lib.ChoiceSchema;\n        parameters.choices = optionInfo.choices.map(function (choiceInfo) {\n          return _typeof(choiceInfo) === \"object\" && choiceInfo.redirect ? Object.assign({}, choiceInfo, {\n            redirect: {\n              to: {\n                key: optionInfo.name,\n                value: choiceInfo.redirect\n              }\n            }\n          }) : choiceInfo;\n        });\n        break;\n\n      case \"boolean\":\n        SchemaConstructor = lib.BooleanSchema;\n        break;\n\n      case \"flag\":\n        SchemaConstructor = FlagSchema;\n        parameters.flags = optionInfos.map(function (optionInfo) {\n          return [].concat(optionInfo.alias || [], optionInfo.description ? optionInfo.name : [], optionInfo.oppositeDescription ? \"no-\".concat(optionInfo.name) : []);\n        }).reduce(function (a, b) {\n          return a.concat(b);\n        }, []);\n        break;\n\n      case \"path\":\n        SchemaConstructor = lib.StringSchema;\n        break;\n\n      default:\n        throw new Error(\"Unexpected type \".concat(optionInfo.type));\n    }\n\n    if (optionInfo.exception) {\n      parameters.validate = function (value, schema, utils) {\n        return optionInfo.exception(value) || schema.validate(value, utils);\n      };\n    } else {\n      parameters.validate = function (value, schema, utils) {\n        return value === undefined || schema.validate(value, utils);\n      };\n    }\n\n    if (optionInfo.redirect) {\n      handlers.redirect = function (value) {\n        return !value ? undefined : {\n          to: {\n            key: optionInfo.redirect.option,\n            value: optionInfo.redirect.value\n          }\n        };\n      };\n    }\n\n    if (optionInfo.deprecated) {\n      handlers.deprecated = true;\n    } // allow CLI overriding, e.g., prettier package.json --tab-width 1 --tab-width 2\n\n\n    if (isCLI && !optionInfo.array) {\n      var originalPreprocess = parameters.preprocess || function (x) {\n        return x;\n      };\n\n      parameters.preprocess = function (value, schema, utils) {\n        return schema.preprocess(originalPreprocess(Array.isArray(value) ? value[value.length - 1] : value), utils);\n      };\n    }\n\n    return optionInfo.array ? lib.ArraySchema.create(Object.assign(isCLI ? {\n      preprocess: function preprocess(v) {\n        return [].concat(v);\n      }\n    } : {}, handlers, {\n      valueSchema: SchemaConstructor.create(parameters)\n    })) : SchemaConstructor.create(Object.assign({}, parameters, handlers));\n  }\n\n  function normalizeApiOptions(options, optionInfos, opts) {\n    return normalizeOptions(options, optionInfos, opts);\n  }\n\n  function normalizeCliOptions(options, optionInfos, opts) {\n    return normalizeOptions(options, optionInfos, Object.assign({\n      isCLI: true\n    }, opts));\n  }\n\n  var optionsNormalizer = {\n    normalizeApiOptions: normalizeApiOptions,\n    normalizeCliOptions: normalizeCliOptions\n  };\n\n  var getLast = function getLast(arr) {\n    return arr.length > 0 ? arr[arr.length - 1] : null;\n  };\n\n  function locStart(node, opts) {\n    opts = opts || {}; // Handle nodes with decorators. They should start at the first decorator\n\n    if (!opts.ignoreDecorators && node.declaration && node.declaration.decorators && node.declaration.decorators.length > 0) {\n      return locStart(node.declaration.decorators[0]);\n    }\n\n    if (!opts.ignoreDecorators && node.decorators && node.decorators.length > 0) {\n      return locStart(node.decorators[0]);\n    }\n\n    if (node.__location) {\n      return node.__location.startOffset;\n    }\n\n    if (node.range) {\n      return node.range[0];\n    }\n\n    if (typeof node.start === \"number\") {\n      return node.start;\n    }\n\n    if (node.loc) {\n      return node.loc.start;\n    }\n\n    return null;\n  }\n\n  function locEnd(node) {\n    var endNode = node.nodes && getLast(node.nodes);\n\n    if (endNode && node.source && !node.source.end) {\n      node = endNode;\n    }\n\n    if (node.__location) {\n      return node.__location.endOffset;\n    }\n\n    var loc = node.range ? node.range[1] : typeof node.end === \"number\" ? node.end : null;\n\n    if (node.typeAnnotation) {\n      return Math.max(loc, locEnd(node.typeAnnotation));\n    }\n\n    if (node.loc && !loc) {\n      return node.loc.end;\n    }\n\n    return loc;\n  }\n\n  var loc = {\n    locStart: locStart,\n    locEnd: locEnd\n  };\n\n  var jsTokens = createCommonjsModule(function (module, exports) {\n    // Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell\n    // License: MIT. (See LICENSE.)\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    }); // This regex comes from regex.coffee, and is inserted here by generate-index.js\n    // (run `npm run build`).\n\n    exports.default = /((['\"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\'\"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g;\n\n    exports.matchToToken = function (match) {\n      var token = {\n        type: \"invalid\",\n        value: match[0],\n        closed: undefined\n      };\n      if (match[1]) token.type = \"string\", token.closed = !!(match[3] || match[4]);else if (match[5]) token.type = \"comment\";else if (match[6]) token.type = \"comment\", token.closed = !!match[7];else if (match[8]) token.type = \"regex\";else if (match[9]) token.type = \"number\";else if (match[10]) token.type = \"name\";else if (match[11]) token.type = \"punctuator\";else if (match[12]) token.type = \"whitespace\";\n      return token;\n    };\n  });\n  unwrapExports(jsTokens);\n  var jsTokens_1 = jsTokens.matchToToken;\n\n  var ast = createCommonjsModule(function (module) {\n    /*\n      Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>\n    \n      Redistribution and use in source and binary forms, with or without\n      modification, are permitted provided that the following conditions are met:\n    \n        * Redistributions of source code must retain the above copyright\n          notice, this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n    \n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\n      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n    */\n    (function () {\n\n      function isExpression(node) {\n        if (node == null) {\n          return false;\n        }\n\n        switch (node.type) {\n          case 'ArrayExpression':\n          case 'AssignmentExpression':\n          case 'BinaryExpression':\n          case 'CallExpression':\n          case 'ConditionalExpression':\n          case 'FunctionExpression':\n          case 'Identifier':\n          case 'Literal':\n          case 'LogicalExpression':\n          case 'MemberExpression':\n          case 'NewExpression':\n          case 'ObjectExpression':\n          case 'SequenceExpression':\n          case 'ThisExpression':\n          case 'UnaryExpression':\n          case 'UpdateExpression':\n            return true;\n        }\n\n        return false;\n      }\n\n      function isIterationStatement(node) {\n        if (node == null) {\n          return false;\n        }\n\n        switch (node.type) {\n          case 'DoWhileStatement':\n          case 'ForInStatement':\n          case 'ForStatement':\n          case 'WhileStatement':\n            return true;\n        }\n\n        return false;\n      }\n\n      function isStatement(node) {\n        if (node == null) {\n          return false;\n        }\n\n        switch (node.type) {\n          case 'BlockStatement':\n          case 'BreakStatement':\n          case 'ContinueStatement':\n          case 'DebuggerStatement':\n          case 'DoWhileStatement':\n          case 'EmptyStatement':\n          case 'ExpressionStatement':\n          case 'ForInStatement':\n          case 'ForStatement':\n          case 'IfStatement':\n          case 'LabeledStatement':\n          case 'ReturnStatement':\n          case 'SwitchStatement':\n          case 'ThrowStatement':\n          case 'TryStatement':\n          case 'VariableDeclaration':\n          case 'WhileStatement':\n          case 'WithStatement':\n            return true;\n        }\n\n        return false;\n      }\n\n      function isSourceElement(node) {\n        return isStatement(node) || node != null && node.type === 'FunctionDeclaration';\n      }\n\n      function trailingStatement(node) {\n        switch (node.type) {\n          case 'IfStatement':\n            if (node.alternate != null) {\n              return node.alternate;\n            }\n\n            return node.consequent;\n\n          case 'LabeledStatement':\n          case 'ForStatement':\n          case 'ForInStatement':\n          case 'WhileStatement':\n          case 'WithStatement':\n            return node.body;\n        }\n\n        return null;\n      }\n\n      function isProblematicIfStatement(node) {\n        var current;\n\n        if (node.type !== 'IfStatement') {\n          return false;\n        }\n\n        if (node.alternate == null) {\n          return false;\n        }\n\n        current = node.consequent;\n\n        do {\n          if (current.type === 'IfStatement') {\n            if (current.alternate == null) {\n              return true;\n            }\n          }\n\n          current = trailingStatement(current);\n        } while (current);\n\n        return false;\n      }\n\n      module.exports = {\n        isExpression: isExpression,\n        isStatement: isStatement,\n        isIterationStatement: isIterationStatement,\n        isSourceElement: isSourceElement,\n        isProblematicIfStatement: isProblematicIfStatement,\n        trailingStatement: trailingStatement\n      };\n    })();\n    /* vim: set sw=4 ts=4 et tw=80 : */\n\n  });\n  var ast_1 = ast.isExpression;\n  var ast_2 = ast.isStatement;\n  var ast_3 = ast.isIterationStatement;\n  var ast_4 = ast.isSourceElement;\n  var ast_5 = ast.isProblematicIfStatement;\n  var ast_6 = ast.trailingStatement;\n\n  var code = createCommonjsModule(function (module) {\n    /*\n      Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>\n      Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>\n    \n      Redistribution and use in source and binary forms, with or without\n      modification, are permitted provided that the following conditions are met:\n    \n        * Redistributions of source code must retain the above copyright\n          notice, this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n    \n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n    */\n    (function () {\n\n      var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch; // See `tools/generate-identifier-regex.js`.\n\n      ES5Regex = {\n        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierStart:\n        NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierPart:\n        NonAsciiIdentifierPart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/\n      };\n      ES6Regex = {\n        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierStart:\n        NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierPart:\n        NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n      };\n\n      function isDecimalDigit(ch) {\n        return 0x30 <= ch && ch <= 0x39; // 0..9\n      }\n\n      function isHexDigit(ch) {\n        return 0x30 <= ch && ch <= 0x39 || // 0..9\n        0x61 <= ch && ch <= 0x66 || // a..f\n        0x41 <= ch && ch <= 0x46; // A..F\n      }\n\n      function isOctalDigit(ch) {\n        return ch >= 0x30 && ch <= 0x37; // 0..7\n      } // 7.2 White Space\n\n\n      NON_ASCII_WHITESPACES = [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF];\n\n      function isWhiteSpace(ch) {\n        return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;\n      } // 7.3 Line Terminators\n\n\n      function isLineTerminator(ch) {\n        return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;\n      } // 7.6 Identifier Names and Identifiers\n\n\n      function fromCodePoint(cp) {\n        if (cp <= 0xFFFF) {\n          return String.fromCharCode(cp);\n        }\n\n        var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);\n        var cu2 = String.fromCharCode((cp - 0x10000) % 0x400 + 0xDC00);\n        return cu1 + cu2;\n      }\n\n      IDENTIFIER_START = new Array(0x80);\n\n      for (ch = 0; ch < 0x80; ++ch) {\n        IDENTIFIER_START[ch] = ch >= 0x61 && ch <= 0x7A || // a..z\n        ch >= 0x41 && ch <= 0x5A || // A..Z\n        ch === 0x24 || ch === 0x5F; // $ (dollar) and _ (underscore)\n      }\n\n      IDENTIFIER_PART = new Array(0x80);\n\n      for (ch = 0; ch < 0x80; ++ch) {\n        IDENTIFIER_PART[ch] = ch >= 0x61 && ch <= 0x7A || // a..z\n        ch >= 0x41 && ch <= 0x5A || // A..Z\n        ch >= 0x30 && ch <= 0x39 || // 0..9\n        ch === 0x24 || ch === 0x5F; // $ (dollar) and _ (underscore)\n      }\n\n      function isIdentifierStartES5(ch) {\n        return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));\n      }\n\n      function isIdentifierPartES5(ch) {\n        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));\n      }\n\n      function isIdentifierStartES6(ch) {\n        return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));\n      }\n\n      function isIdentifierPartES6(ch) {\n        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));\n      }\n\n      module.exports = {\n        isDecimalDigit: isDecimalDigit,\n        isHexDigit: isHexDigit,\n        isOctalDigit: isOctalDigit,\n        isWhiteSpace: isWhiteSpace,\n        isLineTerminator: isLineTerminator,\n        isIdentifierStartES5: isIdentifierStartES5,\n        isIdentifierPartES5: isIdentifierPartES5,\n        isIdentifierStartES6: isIdentifierStartES6,\n        isIdentifierPartES6: isIdentifierPartES6\n      };\n    })();\n    /* vim: set sw=4 ts=4 et tw=80 : */\n\n  });\n  var code_1 = code.isDecimalDigit;\n  var code_2 = code.isHexDigit;\n  var code_3 = code.isOctalDigit;\n  var code_4 = code.isWhiteSpace;\n  var code_5 = code.isLineTerminator;\n  var code_6 = code.isIdentifierStartES5;\n  var code_7 = code.isIdentifierPartES5;\n  var code_8 = code.isIdentifierStartES6;\n  var code_9 = code.isIdentifierPartES6;\n\n  var keyword = createCommonjsModule(function (module) {\n    /*\n      Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>\n    \n      Redistribution and use in source and binary forms, with or without\n      modification, are permitted provided that the following conditions are met:\n    \n        * Redistributions of source code must retain the above copyright\n          notice, this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n    \n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n    */\n    (function () {\n\n      var code$1 = code;\n\n      function isStrictModeReservedWordES6(id) {\n        switch (id) {\n          case 'implements':\n          case 'interface':\n          case 'package':\n          case 'private':\n          case 'protected':\n          case 'public':\n          case 'static':\n          case 'let':\n            return true;\n\n          default:\n            return false;\n        }\n      }\n\n      function isKeywordES5(id, strict) {\n        // yield should not be treated as keyword under non-strict mode.\n        if (!strict && id === 'yield') {\n          return false;\n        }\n\n        return isKeywordES6(id, strict);\n      }\n\n      function isKeywordES6(id, strict) {\n        if (strict && isStrictModeReservedWordES6(id)) {\n          return true;\n        }\n\n        switch (id.length) {\n          case 2:\n            return id === 'if' || id === 'in' || id === 'do';\n\n          case 3:\n            return id === 'var' || id === 'for' || id === 'new' || id === 'try';\n\n          case 4:\n            return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';\n\n          case 5:\n            return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';\n\n          case 6:\n            return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';\n\n          case 7:\n            return id === 'default' || id === 'finally' || id === 'extends';\n\n          case 8:\n            return id === 'function' || id === 'continue' || id === 'debugger';\n\n          case 10:\n            return id === 'instanceof';\n\n          default:\n            return false;\n        }\n      }\n\n      function isReservedWordES5(id, strict) {\n        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);\n      }\n\n      function isReservedWordES6(id, strict) {\n        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);\n      }\n\n      function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n      }\n\n      function isIdentifierNameES5(id) {\n        var i, iz, ch;\n\n        if (id.length === 0) {\n          return false;\n        }\n\n        ch = id.charCodeAt(0);\n\n        if (!code$1.isIdentifierStartES5(ch)) {\n          return false;\n        }\n\n        for (i = 1, iz = id.length; i < iz; ++i) {\n          ch = id.charCodeAt(i);\n\n          if (!code$1.isIdentifierPartES5(ch)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function decodeUtf16(lead, trail) {\n        return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n      }\n\n      function isIdentifierNameES6(id) {\n        var i, iz, ch, lowCh, check;\n\n        if (id.length === 0) {\n          return false;\n        }\n\n        check = code$1.isIdentifierStartES6;\n\n        for (i = 0, iz = id.length; i < iz; ++i) {\n          ch = id.charCodeAt(i);\n\n          if (0xD800 <= ch && ch <= 0xDBFF) {\n            ++i;\n\n            if (i >= iz) {\n              return false;\n            }\n\n            lowCh = id.charCodeAt(i);\n\n            if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {\n              return false;\n            }\n\n            ch = decodeUtf16(ch, lowCh);\n          }\n\n          if (!check(ch)) {\n            return false;\n          }\n\n          check = code$1.isIdentifierPartES6;\n        }\n\n        return true;\n      }\n\n      function isIdentifierES5(id, strict) {\n        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);\n      }\n\n      function isIdentifierES6(id, strict) {\n        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);\n      }\n\n      module.exports = {\n        isKeywordES5: isKeywordES5,\n        isKeywordES6: isKeywordES6,\n        isReservedWordES5: isReservedWordES5,\n        isReservedWordES6: isReservedWordES6,\n        isRestrictedWord: isRestrictedWord,\n        isIdentifierNameES5: isIdentifierNameES5,\n        isIdentifierNameES6: isIdentifierNameES6,\n        isIdentifierES5: isIdentifierES5,\n        isIdentifierES6: isIdentifierES6\n      };\n    })();\n    /* vim: set sw=4 ts=4 et tw=80 : */\n\n  });\n  var keyword_1 = keyword.isKeywordES5;\n  var keyword_2 = keyword.isKeywordES6;\n  var keyword_3 = keyword.isReservedWordES5;\n  var keyword_4 = keyword.isReservedWordES6;\n  var keyword_5 = keyword.isRestrictedWord;\n  var keyword_6 = keyword.isIdentifierNameES5;\n  var keyword_7 = keyword.isIdentifierNameES6;\n  var keyword_8 = keyword.isIdentifierES5;\n  var keyword_9 = keyword.isIdentifierES6;\n\n  var utils$1 = createCommonjsModule(function (module, exports) {\n    /*\n      Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>\n    \n      Redistribution and use in source and binary forms, with or without\n      modification, are permitted provided that the following conditions are met:\n    \n        * Redistributions of source code must retain the above copyright\n          notice, this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n    \n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n    */\n    (function () {\n\n      exports.ast = ast;\n      exports.code = code;\n      exports.keyword = keyword;\n    })();\n    /* vim: set sw=4 ts=4 et tw=80 : */\n\n  });\n  var utils_1$1 = utils$1.ast;\n  var utils_2$1 = utils$1.code;\n  var utils_3$1 = utils$1.keyword;\n\n  var lib$1 = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.shouldHighlight = shouldHighlight;\n    exports.getChalk = getChalk;\n    exports.default = highlight;\n\n    function _jsTokens() {\n      var data = _interopRequireWildcard(jsTokens);\n\n      _jsTokens = function _jsTokens() {\n        return data;\n      };\n\n      return data;\n    }\n\n    function _esutils() {\n      var data = _interopRequireDefault(utils$1);\n\n      _esutils = function _esutils() {\n        return data;\n      };\n\n      return data;\n    }\n\n    function _chalk() {\n      var data = _interopRequireDefault(chalk);\n\n      _chalk = function _chalk() {\n        return data;\n      };\n\n      return data;\n    }\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        default: obj\n      };\n    }\n\n    function _interopRequireWildcard(obj) {\n      if (obj && obj.__esModule) {\n        return obj;\n      } else {\n        var newObj = {};\n\n        if (obj != null) {\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n              if (desc.get || desc.set) {\n                Object.defineProperty(newObj, key, desc);\n              } else {\n                newObj[key] = obj[key];\n              }\n            }\n          }\n        }\n\n        newObj.default = obj;\n        return newObj;\n      }\n    }\n\n    function getDefs(chalk) {\n      return {\n        keyword: chalk.cyan,\n        capitalized: chalk.yellow,\n        jsx_tag: chalk.yellow,\n        punctuator: chalk.yellow,\n        number: chalk.magenta,\n        string: chalk.green,\n        regex: chalk.magenta,\n        comment: chalk.grey,\n        invalid: chalk.white.bgRed.bold\n      };\n    }\n\n    var NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\n    var JSX_TAG = /^[a-z][\\w-]*$/i;\n    var BRACKET = /^[()[\\]{}]$/;\n\n    function getTokenType(match) {\n      var _match$slice = match.slice(-2),\n          _match$slice2 = _slicedToArray(_match$slice, 2),\n          offset = _match$slice2[0],\n          text = _match$slice2[1];\n\n      var token = (0, _jsTokens().matchToToken)(match);\n\n      if (token.type === \"name\") {\n        if (_esutils().default.keyword.isReservedWordES6(token.value)) {\n          return \"keyword\";\n        }\n\n        if (JSX_TAG.test(token.value) && (text[offset - 1] === \"<\" || text.substr(offset - 2, 2) == \"</\")) {\n          return \"jsx_tag\";\n        }\n\n        if (token.value[0] !== token.value[0].toLowerCase()) {\n          return \"capitalized\";\n        }\n      }\n\n      if (token.type === \"punctuator\" && BRACKET.test(token.value)) {\n        return \"bracket\";\n      }\n\n      if (token.type === \"invalid\" && (token.value === \"@\" || token.value === \"#\")) {\n        return \"punctuator\";\n      }\n\n      return token.type;\n    }\n\n    function highlightTokens(defs, text) {\n      return text.replace(_jsTokens().default, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var type = getTokenType(args);\n        var colorize = defs[type];\n\n        if (colorize) {\n          return args[0].split(NEWLINE).map(function (str) {\n            return colorize(str);\n          }).join(\"\\n\");\n        } else {\n          return args[0];\n        }\n      });\n    }\n\n    function shouldHighlight(options) {\n      return _chalk().default.supportsColor || options.forceColor;\n    }\n\n    function getChalk(options) {\n      var chalk = _chalk().default;\n\n      if (options.forceColor) {\n        chalk = new (_chalk().default.constructor)({\n          enabled: true,\n          level: 1\n        });\n      }\n\n      return chalk;\n    }\n\n    function highlight(code) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (shouldHighlight(options)) {\n        var chalk = getChalk(options);\n        var defs = getDefs(chalk);\n        return highlightTokens(defs, code);\n      } else {\n        return code;\n      }\n    }\n  });\n  unwrapExports(lib$1);\n  var lib_1 = lib$1.shouldHighlight;\n  var lib_2 = lib$1.getChalk;\n\n  var lib$2 = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.codeFrameColumns = codeFrameColumns;\n    exports.default = _default;\n\n    function _highlight() {\n      var data = _interopRequireWildcard(lib$1);\n\n      _highlight = function _highlight() {\n        return data;\n      };\n\n      return data;\n    }\n\n    function _interopRequireWildcard(obj) {\n      if (obj && obj.__esModule) {\n        return obj;\n      } else {\n        var newObj = {};\n\n        if (obj != null) {\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n              if (desc.get || desc.set) {\n                Object.defineProperty(newObj, key, desc);\n              } else {\n                newObj[key] = obj[key];\n              }\n            }\n          }\n        }\n\n        newObj.default = obj;\n        return newObj;\n      }\n    }\n\n    var deprecationWarningShown = false;\n\n    function getDefs(chalk) {\n      return {\n        gutter: chalk.grey,\n        marker: chalk.red.bold,\n        message: chalk.red.bold\n      };\n    }\n\n    var NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\n\n    function getMarkerLines(loc, source, opts) {\n      var startLoc = Object.assign({\n        column: 0,\n        line: -1\n      }, loc.start);\n      var endLoc = Object.assign({}, startLoc, loc.end);\n\n      var _ref = opts || {},\n          _ref$linesAbove = _ref.linesAbove,\n          linesAbove = _ref$linesAbove === void 0 ? 2 : _ref$linesAbove,\n          _ref$linesBelow = _ref.linesBelow,\n          linesBelow = _ref$linesBelow === void 0 ? 3 : _ref$linesBelow;\n\n      var startLine = startLoc.line;\n      var startColumn = startLoc.column;\n      var endLine = endLoc.line;\n      var endColumn = endLoc.column;\n      var start = Math.max(startLine - (linesAbove + 1), 0);\n      var end = Math.min(source.length, endLine + linesBelow);\n\n      if (startLine === -1) {\n        start = 0;\n      }\n\n      if (endLine === -1) {\n        end = source.length;\n      }\n\n      var lineDiff = endLine - startLine;\n      var markerLines = {};\n\n      if (lineDiff) {\n        for (var i = 0; i <= lineDiff; i++) {\n          var lineNumber = i + startLine;\n\n          if (!startColumn) {\n            markerLines[lineNumber] = true;\n          } else if (i === 0) {\n            var sourceLength = source[lineNumber - 1].length;\n            markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];\n          } else if (i === lineDiff) {\n            markerLines[lineNumber] = [0, endColumn];\n          } else {\n            var _sourceLength = source[lineNumber - i].length;\n            markerLines[lineNumber] = [0, _sourceLength];\n          }\n        }\n      } else {\n        if (startColumn === endColumn) {\n          if (startColumn) {\n            markerLines[startLine] = [startColumn, 0];\n          } else {\n            markerLines[startLine] = true;\n          }\n        } else {\n          markerLines[startLine] = [startColumn, endColumn - startColumn];\n        }\n      }\n\n      return {\n        start: start,\n        end: end,\n        markerLines: markerLines\n      };\n    }\n\n    function codeFrameColumns(rawLines, loc) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight().shouldHighlight)(opts);\n      var chalk = (0, _highlight().getChalk)(opts);\n      var defs = getDefs(chalk);\n\n      var maybeHighlight = function maybeHighlight(chalkFn, string) {\n        return highlighted ? chalkFn(string) : string;\n      };\n\n      var lines = rawLines.split(NEWLINE);\n\n      var _getMarkerLines = getMarkerLines(loc, lines, opts),\n          start = _getMarkerLines.start,\n          end = _getMarkerLines.end,\n          markerLines = _getMarkerLines.markerLines;\n\n      var hasColumns = loc.start && typeof loc.start.column === \"number\";\n      var numberMaxWidth = String(end).length;\n      var highlightedLines = highlighted ? (0, _highlight().default)(rawLines, opts) : rawLines;\n      var frame = highlightedLines.split(NEWLINE).slice(start, end).map(function (line, index) {\n        var number = start + 1 + index;\n        var paddedNumber = \" \".concat(number).slice(-numberMaxWidth);\n        var gutter = \" \".concat(paddedNumber, \" | \");\n        var hasMarker = markerLines[number];\n        var lastMarkerLine = !markerLines[number + 1];\n\n        if (hasMarker) {\n          var markerLine = \"\";\n\n          if (Array.isArray(hasMarker)) {\n            var markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\\t]/g, \" \");\n            var numberOfMarkers = hasMarker[1] || 1;\n            markerLine = [\"\\n \", maybeHighlight(defs.gutter, gutter.replace(/\\d/g, \" \")), markerSpacing, maybeHighlight(defs.marker, \"^\").repeat(numberOfMarkers)].join(\"\");\n\n            if (lastMarkerLine && opts.message) {\n              markerLine += \" \" + maybeHighlight(defs.message, opts.message);\n            }\n          }\n\n          return [maybeHighlight(defs.marker, \">\"), maybeHighlight(defs.gutter, gutter), line, markerLine].join(\"\");\n        } else {\n          return \" \".concat(maybeHighlight(defs.gutter, gutter)).concat(line);\n        }\n      }).join(\"\\n\");\n\n      if (opts.message && !hasColumns) {\n        frame = \"\".concat(\" \".repeat(numberMaxWidth + 1)).concat(opts.message, \"\\n\").concat(frame);\n      }\n\n      if (highlighted) {\n        return chalk.reset(frame);\n      } else {\n        return frame;\n      }\n    }\n\n    function _default(rawLines, lineNumber, colNumber) {\n      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      if (!deprecationWarningShown) {\n        deprecationWarningShown = true;\n        var message = \"Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.\";\n\n        if (process.emitWarning) {\n          process.emitWarning(message, \"DeprecationWarning\");\n        } else {\n          var deprecationError = new Error(message);\n          deprecationError.name = \"DeprecationWarning\";\n          console.warn(new Error(message));\n        }\n      }\n\n      colNumber = Math.max(colNumber, 0);\n      var location = {\n        start: {\n          column: colNumber,\n          line: lineNumber\n        }\n      };\n      return codeFrameColumns(rawLines, location, opts);\n    }\n  });\n  unwrapExports(lib$2);\n  var lib_1$1 = lib$2.codeFrameColumns;\n\n  var ConfigError$1 = errors.ConfigError;\n  var locStart$1 = loc.locStart,\n      locEnd$1 = loc.locEnd; // Use defineProperties()/getOwnPropertyDescriptor() to prevent\n  // triggering the parsers getters.\n\n  var ownNames = Object.getOwnPropertyNames;\n  var ownDescriptor = Object.getOwnPropertyDescriptor;\n\n  function getParsers(options) {\n    var parsers = {};\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = options.plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var plugin = _step.value;\n\n        if (!plugin.parsers) {\n          continue;\n        }\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = ownNames(plugin.parsers)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var name = _step2.value;\n            Object.defineProperty(parsers, name, ownDescriptor(plugin.parsers, name));\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return parsers;\n  }\n\n  function resolveParser(opts, parsers) {\n    parsers = parsers || getParsers(opts);\n\n    if (typeof opts.parser === \"function\") {\n      // Custom parser API always works with JavaScript.\n      return {\n        parse: opts.parser,\n        astFormat: \"estree\",\n        locStart: locStart$1,\n        locEnd: locEnd$1\n      };\n    }\n\n    if (typeof opts.parser === \"string\") {\n      if (Object.prototype.hasOwnProperty.call(parsers, opts.parser)) {\n        return parsers[opts.parser];\n      }\n      /* istanbul ignore next */\n\n\n      {\n        throw new ConfigError$1(\"Couldn't resolve parser \\\"\".concat(opts.parser, \"\\\". Parsers must be explicitly added to the standalone bundle.\"));\n      }\n    }\n  }\n\n  function parse(text, opts) {\n    var parsers = getParsers(opts); // Create a new object {parserName: parseFn}. Uses defineProperty() to only call\n    // the parsers getters when actually calling the parser `parse` function.\n\n    var parsersForCustomParserApi = Object.keys(parsers).reduce(function (object, parserName) {\n      return Object.defineProperty(object, parserName, {\n        enumerable: true,\n        get: function get() {\n          return parsers[parserName].parse;\n        }\n      });\n    }, {});\n    var parser = resolveParser(opts, parsers);\n\n    try {\n      if (parser.preprocess) {\n        text = parser.preprocess(text, opts);\n      }\n\n      return {\n        text: text,\n        ast: parser.parse(text, parsersForCustomParserApi, opts)\n      };\n    } catch (error) {\n      var loc = error.loc;\n\n      if (loc) {\n        var codeFrame = lib$2;\n        error.codeFrame = codeFrame.codeFrameColumns(text, loc, {\n          highlightCode: true\n        });\n        error.message += \"\\n\" + error.codeFrame;\n        throw error;\n      }\n      /* istanbul ignore next */\n\n\n      throw error.stack;\n    }\n  }\n\n  var parser = {\n    parse: parse,\n    resolveParser: resolveParser\n  };\n\n  var UndefinedParserError$1 = errors.UndefinedParserError;\n  var getSupportInfo$1 = support.getSupportInfo;\n  var resolveParser$1 = parser.resolveParser;\n  var hiddenDefaults = {\n    astFormat: \"estree\",\n    printer: {},\n    originalText: undefined,\n    locStart: null,\n    locEnd: null\n  }; // Copy options and fill in default values.\n\n  function normalize$1(options, opts) {\n    opts = opts || {};\n    var rawOptions = Object.assign({}, options);\n    var supportOptions = getSupportInfo$1(null, {\n      plugins: options.plugins,\n      showUnreleased: true,\n      showDeprecated: true\n    }).options;\n    var defaults = supportOptions.reduce(function (reduced, optionInfo) {\n      return optionInfo.default !== undefined ? Object.assign(reduced, _defineProperty({}, optionInfo.name, optionInfo.default)) : reduced;\n    }, Object.assign({}, hiddenDefaults));\n\n    if (!rawOptions.parser) {\n      if (!rawOptions.filepath) {\n        var logger = opts.logger || console;\n        logger.warn(\"No parser and no filepath given, using 'babel' the parser now \" + \"but this will throw an error in the future. \" + \"Please specify a parser or a filepath so one can be inferred.\");\n        rawOptions.parser = \"babel\";\n      } else {\n        rawOptions.parser = inferParser(rawOptions.filepath, rawOptions.plugins);\n\n        if (!rawOptions.parser) {\n          throw new UndefinedParserError$1(\"No parser could be inferred for file: \".concat(rawOptions.filepath));\n        }\n      }\n    }\n\n    var parser = resolveParser$1(optionsNormalizer.normalizeApiOptions(rawOptions, [supportOptions.find(function (x) {\n      return x.name === \"parser\";\n    })], {\n      passThrough: true,\n      logger: false\n    }));\n    rawOptions.astFormat = parser.astFormat;\n    rawOptions.locEnd = parser.locEnd;\n    rawOptions.locStart = parser.locStart;\n    var plugin = getPlugin(rawOptions);\n    rawOptions.printer = plugin.printers[rawOptions.astFormat];\n    var pluginDefaults = supportOptions.filter(function (optionInfo) {\n      return optionInfo.pluginDefaults && optionInfo.pluginDefaults[plugin.name] !== undefined;\n    }).reduce(function (reduced, optionInfo) {\n      return Object.assign(reduced, _defineProperty({}, optionInfo.name, optionInfo.pluginDefaults[plugin.name]));\n    }, {});\n    var mixedDefaults = Object.assign({}, defaults, pluginDefaults);\n    Object.keys(mixedDefaults).forEach(function (k) {\n      if (rawOptions[k] == null) {\n        rawOptions[k] = mixedDefaults[k];\n      }\n    });\n\n    if (rawOptions.parser === \"json\") {\n      rawOptions.trailingComma = \"none\";\n    }\n\n    return optionsNormalizer.normalizeApiOptions(rawOptions, supportOptions, Object.assign({\n      passThrough: Object.keys(hiddenDefaults)\n    }, opts));\n  }\n\n  function getPlugin(options) {\n    var astFormat = options.astFormat;\n\n    if (!astFormat) {\n      throw new Error(\"getPlugin() requires astFormat to be set\");\n    }\n\n    var printerPlugin = options.plugins.find(function (plugin) {\n      return plugin.printers && plugin.printers[astFormat];\n    });\n\n    if (!printerPlugin) {\n      throw new Error(\"Couldn't find plugin for AST format \\\"\".concat(astFormat, \"\\\"\"));\n    }\n\n    return printerPlugin;\n  }\n\n  function getInterpreter(filepath) {\n    if (typeof filepath !== \"string\") {\n      return \"\";\n    }\n\n    var fd;\n\n    try {\n      fd = fs.openSync(filepath, \"r\");\n    } catch (err) {\n      return \"\";\n    }\n\n    try {\n      var liner = new readlines(fd);\n      var firstLine = liner.next().toString(\"utf8\"); // #!/bin/env node, #!/usr/bin/env node\n\n      var m1 = firstLine.match(/^#!\\/(?:usr\\/)?bin\\/env\\s+(\\S+)/);\n\n      if (m1) {\n        return m1[1];\n      } // #!/bin/node, #!/usr/bin/node, #!/usr/local/bin/node\n\n\n      var m2 = firstLine.match(/^#!\\/(?:usr\\/(?:local\\/)?)?bin\\/(\\S+)/);\n\n      if (m2) {\n        return m2[1];\n      }\n\n      return \"\";\n    } catch (err) {\n      // There are some weird cases where paths are missing, causing Jest\n      // failures. It's unclear what these correspond to in the real world.\n      return \"\";\n    } finally {\n      try {\n        // There are some weird cases where paths are missing, causing Jest\n        // failures. It's unclear what these correspond to in the real world.\n        fs.closeSync(fd);\n      } catch (err) {// nop\n      }\n    }\n  }\n\n  function inferParser(filepath, plugins) {\n    var filepathParts = normalizePath(filepath).split(\"/\");\n    var filename = filepathParts[filepathParts.length - 1].toLowerCase(); // If the file has no extension, we can try to infer the language from the\n    // interpreter in the shebang line, if any; but since this requires FS access,\n    // do it last.\n\n    var language = getSupportInfo$1(null, {\n      plugins: plugins\n    }).languages.find(function (language) {\n      return language.since !== null && (language.extensions && language.extensions.some(function (extension) {\n        return filename.endsWith(extension);\n      }) || language.filenames && language.filenames.find(function (name) {\n        return name.toLowerCase() === filename;\n      }) || filename.indexOf(\".\") === -1 && language.interpreters && language.interpreters.indexOf(getInterpreter(filepath)) !== -1);\n    });\n    return language && language.parsers[0];\n  }\n\n  var options$1 = {\n    normalize: normalize$1,\n    hiddenDefaults: hiddenDefaults,\n    inferParser: inferParser\n  };\n\n  function massageAST(ast, options, parent) {\n    if (Array.isArray(ast)) {\n      return ast.map(function (e) {\n        return massageAST(e, options, parent);\n      }).filter(function (e) {\n        return e;\n      });\n    }\n\n    if (!ast || _typeof(ast) !== \"object\") {\n      return ast;\n    }\n\n    var newObj = {};\n\n    for (var _i = 0, _Object$keys = Object.keys(ast); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n\n      if (typeof ast[key] !== \"function\") {\n        newObj[key] = massageAST(ast[key], options, ast);\n      }\n    }\n\n    if (options.printer.massageAstNode) {\n      var result = options.printer.massageAstNode(ast, newObj, parent);\n\n      if (result === null) {\n        return undefined;\n      }\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return newObj;\n  }\n\n  var massageAst = massageAST;\n\n  function assert() {}\n\n  assert.ok = function () {};\n\n  assert.strictEqual = function () {};\n\n  /**\n   * @param {Doc[]} parts\n   * @returns Doc\n   */\n\n\n  function concat(parts) {\n    // access the internals of a document directly.\n    // if(parts.length === 1) {\n    //   // If it's a single document, no need to concat it.\n    //   return parts[0];\n    // }\n\n\n    return {\n      type: \"concat\",\n      parts: parts\n    };\n  }\n  /**\n   * @param {Doc} contents\n   * @returns Doc\n   */\n\n\n  function indent(contents) {\n\n    return {\n      type: \"indent\",\n      contents: contents\n    };\n  }\n  /**\n   * @param {number} n\n   * @param {Doc} contents\n   * @returns Doc\n   */\n\n\n  function align(n, contents) {\n\n    return {\n      type: \"align\",\n      contents: contents,\n      n: n\n    };\n  }\n  /**\n   * @param {Doc} contents\n   * @param {object} [opts] - TBD ???\n   * @returns Doc\n   */\n\n\n  function group(contents, opts) {\n    opts = opts || {};\n\n    return {\n      type: \"group\",\n      id: opts.id,\n      contents: contents,\n      break: !!opts.shouldBreak,\n      expandedStates: opts.expandedStates\n    };\n  }\n  /**\n   * @param {Doc} contents\n   * @returns Doc\n   */\n\n\n  function dedentToRoot(contents) {\n    return align(-Infinity, contents);\n  }\n  /**\n   * @param {Doc} contents\n   * @returns Doc\n   */\n\n\n  function markAsRoot(contents) {\n    // @ts-ignore - TBD ???:\n    return align({\n      type: \"root\"\n    }, contents);\n  }\n  /**\n   * @param {Doc} contents\n   * @returns Doc\n   */\n\n\n  function dedent(contents) {\n    return align(-1, contents);\n  }\n  /**\n   * @param {Doc[]} states\n   * @param {object} [opts] - TBD ???\n   * @returns Doc\n   */\n\n\n  function conditionalGroup(states, opts) {\n    return group(states[0], Object.assign(opts || {}, {\n      expandedStates: states\n    }));\n  }\n  /**\n   * @param {Doc[]} parts\n   * @returns Doc\n   */\n\n\n  function fill(parts) {\n\n    return {\n      type: \"fill\",\n      parts: parts\n    };\n  }\n  /**\n   * @param {Doc} [breakContents]\n   * @param {Doc} [flatContents]\n   * @param {object} [opts] - TBD ???\n   * @returns Doc\n   */\n\n\n  function ifBreak(breakContents, flatContents, opts) {\n    opts = opts || {};\n\n    return {\n      type: \"if-break\",\n      breakContents: breakContents,\n      flatContents: flatContents,\n      groupId: opts.groupId\n    };\n  }\n  /**\n   * @param {Doc} contents\n   * @returns Doc\n   */\n\n\n  function lineSuffix(contents) {\n\n    return {\n      type: \"line-suffix\",\n      contents: contents\n    };\n  }\n\n  var lineSuffixBoundary = {\n    type: \"line-suffix-boundary\"\n  };\n  var breakParent = {\n    type: \"break-parent\"\n  };\n  var trim = {\n    type: \"trim\"\n  };\n  var line = {\n    type: \"line\"\n  };\n  var softline = {\n    type: \"line\",\n    soft: true\n  };\n  var hardline = concat([{\n    type: \"line\",\n    hard: true\n  }, breakParent]);\n  var literalline = concat([{\n    type: \"line\",\n    hard: true,\n    literal: true\n  }, breakParent]);\n  var cursor = {\n    type: \"cursor\",\n    placeholder: Symbol(\"cursor\")\n  };\n  /**\n   * @param {Doc} sep\n   * @param {Doc[]} arr\n   * @returns Doc\n   */\n\n  function join(sep, arr) {\n    var res = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      if (i !== 0) {\n        res.push(sep);\n      }\n\n      res.push(arr[i]);\n    }\n\n    return concat(res);\n  }\n  /**\n   * @param {Doc} doc\n   * @param {number} size\n   * @param {number} tabWidth\n   */\n\n\n  function addAlignmentToDoc(doc, size, tabWidth) {\n    var aligned = doc;\n\n    if (size > 0) {\n      // Use indent to add tabs for all the levels of tabs we need\n      for (var i = 0; i < Math.floor(size / tabWidth); ++i) {\n        aligned = indent(aligned);\n      } // Use align for all the spaces that are needed\n\n\n      aligned = align(size % tabWidth, aligned); // size is absolute from 0 and not relative to the current\n      // indentation, so we use -Infinity to reset the indentation to 0\n\n      aligned = align(-Infinity, aligned);\n    }\n\n    return aligned;\n  }\n\n  var docBuilders = {\n    concat: concat,\n    join: join,\n    line: line,\n    softline: softline,\n    hardline: hardline,\n    literalline: literalline,\n    group: group,\n    conditionalGroup: conditionalGroup,\n    fill: fill,\n    lineSuffix: lineSuffix,\n    lineSuffixBoundary: lineSuffixBoundary,\n    cursor: cursor,\n    breakParent: breakParent,\n    ifBreak: ifBreak,\n    trim: trim,\n    indent: indent,\n    align: align,\n    addAlignmentToDoc: addAlignmentToDoc,\n    markAsRoot: markAsRoot,\n    dedentToRoot: dedentToRoot,\n    dedent: dedent\n  };\n\n  var ansiRegex = function ansiRegex(options) {\n    options = Object.assign({\n      onlyFirst: false\n    }, options);\n    var pattern = [\"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\d]*(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\", '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'].join('|');\n    return new RegExp(pattern, options.onlyFirst ? undefined : 'g');\n  };\n\n  var stripAnsi = function stripAnsi(string) {\n    return typeof string === 'string' ? string.replace(ansiRegex(), '') : string;\n  };\n\n  var stripAnsi_1 = stripAnsi;\n  var default_1$1 = stripAnsi;\n  stripAnsi_1.default = default_1$1;\n\n  /* eslint-disable yoda */\n\n  var isFullwidthCodePoint = function isFullwidthCodePoint(codePoint) {\n    if (Number.isNaN(codePoint)) {\n      return false;\n    } // Code points are derived from:\n    // http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt\n\n\n    if (codePoint >= 0x1100 && (codePoint <= 0x115F || // Hangul Jamo\n    codePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET\n    codePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET\n    // CJK Radicals Supplement .. Enclosed CJK Letters and Months\n    0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F || // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A\n    0x3250 <= codePoint && codePoint <= 0x4DBF || // CJK Unified Ideographs .. Yi Radicals\n    0x4E00 <= codePoint && codePoint <= 0xA4C6 || // Hangul Jamo Extended-A\n    0xA960 <= codePoint && codePoint <= 0xA97C || // Hangul Syllables\n    0xAC00 <= codePoint && codePoint <= 0xD7A3 || // CJK Compatibility Ideographs\n    0xF900 <= codePoint && codePoint <= 0xFAFF || // Vertical Forms\n    0xFE10 <= codePoint && codePoint <= 0xFE19 || // CJK Compatibility Forms .. Small Form Variants\n    0xFE30 <= codePoint && codePoint <= 0xFE6B || // Halfwidth and Fullwidth Forms\n    0xFF01 <= codePoint && codePoint <= 0xFF60 || 0xFFE0 <= codePoint && codePoint <= 0xFFE6 || // Kana Supplement\n    0x1B000 <= codePoint && codePoint <= 0x1B001 || // Enclosed Ideographic Supplement\n    0x1F200 <= codePoint && codePoint <= 0x1F251 || // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane\n    0x20000 <= codePoint && codePoint <= 0x3FFFD)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  var isFullwidthCodePoint_1 = isFullwidthCodePoint;\n  var default_1$2 = isFullwidthCodePoint;\n  isFullwidthCodePoint_1.default = default_1$2;\n\n  var emojiRegex = function emojiRegex() {\n    // https://mths.be/emoji\n    return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\n  };\n\n  var stringWidth = function stringWidth(string) {\n    string = string.replace(emojiRegex(), '  ');\n\n    if (typeof string !== 'string' || string.length === 0) {\n      return 0;\n    }\n\n    string = stripAnsi_1(string);\n    var width = 0;\n\n    for (var i = 0; i < string.length; i++) {\n      var code = string.codePointAt(i); // Ignore control characters\n\n      if (code <= 0x1F || code >= 0x7F && code <= 0x9F) {\n        continue;\n      } // Ignore combining characters\n\n\n      if (code >= 0x300 && code <= 0x36F) {\n        continue;\n      } // Surrogates\n\n\n      if (code > 0xFFFF) {\n        i++;\n      }\n\n      width += isFullwidthCodePoint_1(code) ? 2 : 1;\n    }\n\n    return width;\n  };\n\n  var stringWidth_1 = stringWidth; // TODO: remove this in the next major version\n\n  var default_1$3 = stringWidth;\n  stringWidth_1.default = default_1$3;\n\n  var notAsciiRegex = /[^\\x20-\\x7F]/;\n\n  function isExportDeclaration(node) {\n    if (node) {\n      switch (node.type) {\n        case \"ExportDefaultDeclaration\":\n        case \"ExportDefaultSpecifier\":\n        case \"DeclareExportDeclaration\":\n        case \"ExportNamedDeclaration\":\n        case \"ExportAllDeclaration\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  function getParentExportDeclaration(path) {\n    var parentNode = path.getParentNode();\n\n    if (path.getName() === \"declaration\" && isExportDeclaration(parentNode)) {\n      return parentNode;\n    }\n\n    return null;\n  }\n\n  function getPenultimate(arr) {\n    if (arr.length > 1) {\n      return arr[arr.length - 2];\n    }\n\n    return null;\n  }\n  /**\n   * @typedef {{backwards?: boolean}} SkipOptions\n   */\n\n  /**\n   * @param {string | RegExp} chars\n   * @returns {(text: string, index: number | false, opts?: SkipOptions) => number | false}\n   */\n\n\n  function skip(chars) {\n    return function (text, index, opts) {\n      var backwards = opts && opts.backwards; // Allow `skip` functions to be threaded together without having\n      // to check for failures (did someone say monads?).\n\n      if (index === false) {\n        return false;\n      }\n\n      var length = text.length;\n      var cursor = index;\n\n      while (cursor >= 0 && cursor < length) {\n        var c = text.charAt(cursor);\n\n        if (chars instanceof RegExp) {\n          if (!chars.test(c)) {\n            return cursor;\n          }\n        } else if (chars.indexOf(c) === -1) {\n          return cursor;\n        }\n\n        backwards ? cursor-- : cursor++;\n      }\n\n      if (cursor === -1 || cursor === length) {\n        // If we reached the beginning or end of the file, return the\n        // out-of-bounds cursor. It's up to the caller to handle this\n        // correctly. We don't want to indicate `false` though if it\n        // actually skipped valid characters.\n        return cursor;\n      }\n\n      return false;\n    };\n  }\n  /**\n   * @type {(text: string, index: number | false, opts?: SkipOptions) => number | false}\n   */\n\n\n  var skipWhitespace = skip(/\\s/);\n  /**\n   * @type {(text: string, index: number | false, opts?: SkipOptions) => number | false}\n   */\n\n  var skipSpaces = skip(\" \\t\");\n  /**\n   * @type {(text: string, index: number | false, opts?: SkipOptions) => number | false}\n   */\n\n  var skipToLineEnd = skip(\",; \\t\");\n  /**\n   * @type {(text: string, index: number | false, opts?: SkipOptions) => number | false}\n   */\n\n  var skipEverythingButNewLine = skip(/[^\\r\\n]/);\n  /**\n   * @param {string} text\n   * @param {number | false} index\n   * @returns {number | false}\n   */\n\n  function skipInlineComment(text, index) {\n    if (index === false) {\n      return false;\n    }\n\n    if (text.charAt(index) === \"/\" && text.charAt(index + 1) === \"*\") {\n      for (var i = index + 2; i < text.length; ++i) {\n        if (text.charAt(i) === \"*\" && text.charAt(i + 1) === \"/\") {\n          return i + 2;\n        }\n      }\n    }\n\n    return index;\n  }\n  /**\n   * @param {string} text\n   * @param {number | false} index\n   * @returns {number | false}\n   */\n\n\n  function skipTrailingComment(text, index) {\n    if (index === false) {\n      return false;\n    }\n\n    if (text.charAt(index) === \"/\" && text.charAt(index + 1) === \"/\") {\n      return skipEverythingButNewLine(text, index);\n    }\n\n    return index;\n  } // This one doesn't use the above helper function because it wants to\n  // test \\r\\n in order and `skip` doesn't support ordering and we only\n  // want to skip one newline. It's simple to implement.\n\n  /**\n   * @param {string} text\n   * @param {number | false} index\n   * @param {SkipOptions=} opts\n   * @returns {number | false}\n   */\n\n\n  function skipNewline(text, index, opts) {\n    var backwards = opts && opts.backwards;\n\n    if (index === false) {\n      return false;\n    }\n\n    var atIndex = text.charAt(index);\n\n    if (backwards) {\n      if (text.charAt(index - 1) === \"\\r\" && atIndex === \"\\n\") {\n        return index - 2;\n      }\n\n      if (atIndex === \"\\n\" || atIndex === \"\\r\" || atIndex === \"\\u2028\" || atIndex === \"\\u2029\") {\n        return index - 1;\n      }\n    } else {\n      if (atIndex === \"\\r\" && text.charAt(index + 1) === \"\\n\") {\n        return index + 2;\n      }\n\n      if (atIndex === \"\\n\" || atIndex === \"\\r\" || atIndex === \"\\u2028\" || atIndex === \"\\u2029\") {\n        return index + 1;\n      }\n    }\n\n    return index;\n  }\n  /**\n   * @param {string} text\n   * @param {number} index\n   * @param {SkipOptions=} opts\n   * @returns {boolean}\n   */\n\n\n  function hasNewline(text, index, opts) {\n    opts = opts || {};\n    var idx = skipSpaces(text, opts.backwards ? index - 1 : index, opts);\n    var idx2 = skipNewline(text, idx, opts);\n    return idx !== idx2;\n  }\n  /**\n   * @param {string} text\n   * @param {number} start\n   * @param {number} end\n   * @returns {boolean}\n   */\n\n\n  function hasNewlineInRange(text, start, end) {\n    for (var i = start; i < end; ++i) {\n      if (text.charAt(i) === \"\\n\") {\n        return true;\n      }\n    }\n\n    return false;\n  } // Note: this function doesn't ignore leading comments unlike isNextLineEmpty\n\n  /**\n   * @template N\n   * @param {string} text\n   * @param {N} node\n   * @param {(node: N) => number} locStart\n   */\n\n\n  function isPreviousLineEmpty(text, node, locStart) {\n    /** @type {number | false} */\n    var idx = locStart(node) - 1;\n    idx = skipSpaces(text, idx, {\n      backwards: true\n    });\n    idx = skipNewline(text, idx, {\n      backwards: true\n    });\n    idx = skipSpaces(text, idx, {\n      backwards: true\n    });\n    var idx2 = skipNewline(text, idx, {\n      backwards: true\n    });\n    return idx !== idx2;\n  }\n  /**\n   * @param {string} text\n   * @param {number} index\n   * @returns {boolean}\n   */\n\n\n  function isNextLineEmptyAfterIndex(text, index) {\n    /** @type {number | false} */\n    var oldIdx = null;\n    /** @type {number | false} */\n\n    var idx = index;\n\n    while (idx !== oldIdx) {\n      // We need to skip all the potential trailing inline comments\n      oldIdx = idx;\n      idx = skipToLineEnd(text, idx);\n      idx = skipInlineComment(text, idx);\n      idx = skipSpaces(text, idx);\n    }\n\n    idx = skipTrailingComment(text, idx);\n    idx = skipNewline(text, idx);\n    return idx !== false && hasNewline(text, idx);\n  }\n  /**\n   * @template N\n   * @param {string} text\n   * @param {N} node\n   * @param {(node: N) => number} locEnd\n   * @returns {boolean}\n   */\n\n\n  function isNextLineEmpty(text, node, locEnd) {\n    return isNextLineEmptyAfterIndex(text, locEnd(node));\n  }\n  /**\n   * @param {string} text\n   * @param {number} idx\n   * @returns {number | false}\n   */\n\n\n  function getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, idx) {\n    /** @type {number | false} */\n    var oldIdx = null;\n    /** @type {number | false} */\n\n    var nextIdx = idx;\n\n    while (nextIdx !== oldIdx) {\n      oldIdx = nextIdx;\n      nextIdx = skipSpaces(text, nextIdx);\n      nextIdx = skipInlineComment(text, nextIdx);\n      nextIdx = skipTrailingComment(text, nextIdx);\n      nextIdx = skipNewline(text, nextIdx);\n    }\n\n    return nextIdx;\n  }\n  /**\n   * @template N\n   * @param {string} text\n   * @param {N} node\n   * @param {(node: N) => number} locEnd\n   * @returns {number | false}\n   */\n\n\n  function getNextNonSpaceNonCommentCharacterIndex(text, node, locEnd) {\n    return getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, locEnd(node));\n  }\n  /**\n   * @template N\n   * @param {string} text\n   * @param {N} node\n   * @param {(node: N) => number} locEnd\n   * @returns {string}\n   */\n\n\n  function getNextNonSpaceNonCommentCharacter(text, node, locEnd) {\n    return text.charAt( // @ts-ignore => TBD: can return false, should we define a fallback?\n    getNextNonSpaceNonCommentCharacterIndex(text, node, locEnd));\n  }\n  /**\n   * @param {string} text\n   * @param {number} index\n   * @param {SkipOptions=} opts\n   * @returns {boolean}\n   */\n\n\n  function hasSpaces(text, index, opts) {\n    opts = opts || {};\n    var idx = skipSpaces(text, opts.backwards ? index - 1 : index, opts);\n    return idx !== index;\n  }\n  /**\n   * @param {{range?: [number, number], start?: number}} node\n   * @param {number} index\n   */\n\n\n  function setLocStart(node, index) {\n    if (node.range) {\n      node.range[0] = index;\n    } else {\n      node.start = index;\n    }\n  }\n  /**\n   * @param {{range?: [number, number], end?: number}} node\n   * @param {number} index\n   */\n\n\n  function setLocEnd(node, index) {\n    if (node.range) {\n      node.range[1] = index;\n    } else {\n      node.end = index;\n    }\n  }\n\n  var PRECEDENCE = {};\n  [[\"|>\"], [\"??\"], [\"||\"], [\"&&\"], [\"|\"], [\"^\"], [\"&\"], [\"==\", \"===\", \"!=\", \"!==\"], [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"], [\">>\", \"<<\", \">>>\"], [\"+\", \"-\"], [\"*\", \"/\", \"%\"], [\"**\"]].forEach(function (tier, i) {\n    tier.forEach(function (op) {\n      PRECEDENCE[op] = i;\n    });\n  });\n\n  function getPrecedence(op) {\n    return PRECEDENCE[op];\n  }\n\n  var equalityOperators = {\n    \"==\": true,\n    \"!=\": true,\n    \"===\": true,\n    \"!==\": true\n  };\n  var multiplicativeOperators = {\n    \"*\": true,\n    \"/\": true,\n    \"%\": true\n  };\n  var bitshiftOperators = {\n    \">>\": true,\n    \">>>\": true,\n    \"<<\": true\n  };\n\n  function shouldFlatten(parentOp, nodeOp) {\n    if (getPrecedence(nodeOp) !== getPrecedence(parentOp)) {\n      return false;\n    } // ** is right-associative\n    // x ** y ** z --> x ** (y ** z)\n\n\n    if (parentOp === \"**\") {\n      return false;\n    } // x == y == z --> (x == y) == z\n\n\n    if (equalityOperators[parentOp] && equalityOperators[nodeOp]) {\n      return false;\n    } // x * y % z --> (x * y) % z\n\n\n    if (nodeOp === \"%\" && multiplicativeOperators[parentOp] || parentOp === \"%\" && multiplicativeOperators[nodeOp]) {\n      return false;\n    } // x * y / z --> (x * y) / z\n    // x / y * z --> (x / y) * z\n\n\n    if (nodeOp !== parentOp && multiplicativeOperators[nodeOp] && multiplicativeOperators[parentOp]) {\n      return false;\n    } // x << y << z --> (x << y) << z\n\n\n    if (bitshiftOperators[parentOp] && bitshiftOperators[nodeOp]) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function isBitwiseOperator(operator) {\n    return !!bitshiftOperators[operator] || operator === \"|\" || operator === \"^\" || operator === \"&\";\n  } // Tests if an expression starts with `{`, or (if forbidFunctionClassAndDoExpr\n  // holds) `function`, `class`, or `do {}`. Will be overzealous if there's\n  // already necessary grouping parentheses.\n\n\n  function startsWithNoLookaheadToken(node, forbidFunctionClassAndDoExpr) {\n    node = getLeftMost(node);\n\n    switch (node.type) {\n      case \"FunctionExpression\":\n      case \"ClassExpression\":\n      case \"DoExpression\":\n        return forbidFunctionClassAndDoExpr;\n\n      case \"ObjectExpression\":\n        return true;\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return startsWithNoLookaheadToken(node.object, forbidFunctionClassAndDoExpr);\n\n      case \"TaggedTemplateExpression\":\n        if (node.tag.type === \"FunctionExpression\") {\n          // IIFEs are always already parenthesized\n          return false;\n        }\n\n        return startsWithNoLookaheadToken(node.tag, forbidFunctionClassAndDoExpr);\n\n      case \"CallExpression\":\n      case \"OptionalCallExpression\":\n        if (node.callee.type === \"FunctionExpression\") {\n          // IIFEs are always already parenthesized\n          return false;\n        }\n\n        return startsWithNoLookaheadToken(node.callee, forbidFunctionClassAndDoExpr);\n\n      case \"ConditionalExpression\":\n        return startsWithNoLookaheadToken(node.test, forbidFunctionClassAndDoExpr);\n\n      case \"UpdateExpression\":\n        return !node.prefix && startsWithNoLookaheadToken(node.argument, forbidFunctionClassAndDoExpr);\n\n      case \"BindExpression\":\n        return node.object && startsWithNoLookaheadToken(node.object, forbidFunctionClassAndDoExpr);\n\n      case \"SequenceExpression\":\n        return startsWithNoLookaheadToken(node.expressions[0], forbidFunctionClassAndDoExpr);\n\n      case \"TSAsExpression\":\n        return startsWithNoLookaheadToken(node.expression, forbidFunctionClassAndDoExpr);\n\n      default:\n        return false;\n    }\n  }\n\n  function getLeftMost(node) {\n    if (node.left) {\n      return getLeftMost(node.left);\n    }\n\n    return node;\n  }\n  /**\n   * @param {string} value\n   * @param {number} tabWidth\n   * @param {number=} startIndex\n   * @returns {number}\n   */\n\n\n  function getAlignmentSize(value, tabWidth, startIndex) {\n    startIndex = startIndex || 0;\n    var size = 0;\n\n    for (var i = startIndex; i < value.length; ++i) {\n      if (value[i] === \"\\t\") {\n        // Tabs behave in a way that they are aligned to the nearest\n        // multiple of tabWidth:\n        // 0 -> 4, 1 -> 4, 2 -> 4, 3 -> 4\n        // 4 -> 8, 5 -> 8, 6 -> 8, 7 -> 8 ...\n        size = size + tabWidth - size % tabWidth;\n      } else {\n        size++;\n      }\n    }\n\n    return size;\n  }\n  /**\n   * @param {string} value\n   * @param {number} tabWidth\n   * @returns {number}\n   */\n\n\n  function getIndentSize(value, tabWidth) {\n    var lastNewlineIndex = value.lastIndexOf(\"\\n\");\n\n    if (lastNewlineIndex === -1) {\n      return 0;\n    }\n\n    return getAlignmentSize( // All the leading whitespaces\n    value.slice(lastNewlineIndex + 1).match(/^[ \\t]*/)[0], tabWidth);\n  }\n  /**\n   * @typedef {'\"' | \"'\"} Quote\n   */\n\n  /**\n   *\n   * @param {string} raw\n   * @param {Quote} preferredQuote\n   * @returns {Quote}\n   */\n\n\n  function getPreferredQuote(raw, preferredQuote) {\n    // `rawContent` is the string exactly like it appeared in the input source\n    // code, without its enclosing quotes.\n    var rawContent = raw.slice(1, -1);\n    /** @type {{ quote: '\"', regex: RegExp }} */\n\n    var double = {\n      quote: '\"',\n      regex: /\"/g\n    };\n    /** @type {{ quote: \"'\", regex: RegExp }} */\n\n    var single = {\n      quote: \"'\",\n      regex: /'/g\n    };\n    var preferred = preferredQuote === \"'\" ? single : double;\n    var alternate = preferred === single ? double : single;\n    var result = preferred.quote; // If `rawContent` contains at least one of the quote preferred for enclosing\n    // the string, we might want to enclose with the alternate quote instead, to\n    // minimize the number of escaped quotes.\n\n    if (rawContent.includes(preferred.quote) || rawContent.includes(alternate.quote)) {\n      var numPreferredQuotes = (rawContent.match(preferred.regex) || []).length;\n      var numAlternateQuotes = (rawContent.match(alternate.regex) || []).length;\n      result = numPreferredQuotes > numAlternateQuotes ? alternate.quote : preferred.quote;\n    }\n\n    return result;\n  }\n\n  function printString(raw, options, isDirectiveLiteral) {\n    // `rawContent` is the string exactly like it appeared in the input source\n    // code, without its enclosing quotes.\n    var rawContent = raw.slice(1, -1); // Check for the alternate quote, to determine if we're allowed to swap\n    // the quotes on a DirectiveLiteral.\n\n    var canChangeDirectiveQuotes = !rawContent.includes('\"') && !rawContent.includes(\"'\");\n    /** @type {Quote} */\n\n    var enclosingQuote = options.parser === \"json\" ? '\"' : options.__isInHtmlAttribute ? \"'\" : getPreferredQuote(raw, options.singleQuote ? \"'\" : '\"'); // Directives are exact code unit sequences, which means that you can't\n    // change the escape sequences they use.\n    // See https://github.com/prettier/prettier/issues/1555\n    // and https://tc39.github.io/ecma262/#directive-prologue\n\n    if (isDirectiveLiteral) {\n      if (canChangeDirectiveQuotes) {\n        return enclosingQuote + rawContent + enclosingQuote;\n      }\n\n      return raw;\n    } // It might sound unnecessary to use `makeString` even if the string already\n    // is enclosed with `enclosingQuote`, but it isn't. The string could contain\n    // unnecessary escapes (such as in `\"\\'\"`). Always using `makeString` makes\n    // sure that we consistently output the minimum amount of escaped quotes.\n\n\n    return makeString(rawContent, enclosingQuote, !(options.parser === \"css\" || options.parser === \"less\" || options.parser === \"scss\" || options.embeddedInHtml));\n  }\n  /**\n   * @param {string} rawContent\n   * @param {Quote} enclosingQuote\n   * @param {boolean=} unescapeUnnecessaryEscapes\n   * @returns {string}\n   */\n\n\n  function makeString(rawContent, enclosingQuote, unescapeUnnecessaryEscapes) {\n    var otherQuote = enclosingQuote === '\"' ? \"'\" : '\"'; // Matches _any_ escape and unescaped quotes (both single and double).\n\n    var regex = /\\\\([\\s\\S])|(['\"])/g; // Escape and unescape single and double quotes as needed to be able to\n    // enclose `rawContent` with `enclosingQuote`.\n\n    var newContent = rawContent.replace(regex, function (match, escaped, quote) {\n      // If we matched an escape, and the escaped character is a quote of the\n      // other type than we intend to enclose the string with, there's no need for\n      // it to be escaped, so return it _without_ the backslash.\n      if (escaped === otherQuote) {\n        return escaped;\n      } // If we matched an unescaped quote and it is of the _same_ type as we\n      // intend to enclose the string with, it must be escaped, so return it with\n      // a backslash.\n\n\n      if (quote === enclosingQuote) {\n        return \"\\\\\" + quote;\n      }\n\n      if (quote) {\n        return quote;\n      } // Unescape any unnecessarily escaped character.\n      // Adapted from https://github.com/eslint/eslint/blob/de0b4ad7bd820ade41b1f606008bea68683dc11a/lib/rules/no-useless-escape.js#L27\n\n\n      return unescapeUnnecessaryEscapes && /^[^\\\\nrvtbfux\\r\\n\\u2028\\u2029\"'0-7]$/.test(escaped) ? escaped : \"\\\\\" + escaped;\n    });\n    return enclosingQuote + newContent + enclosingQuote;\n  }\n\n  function printNumber(rawNumber) {\n    return rawNumber.toLowerCase() // Remove unnecessary plus and zeroes from scientific notation.\n    .replace(/^([+-]?[\\d.]+e)(?:\\+|(-))?0*(\\d)/, \"$1$2$3\") // Remove unnecessary scientific notation (1e0).\n    .replace(/^([+-]?[\\d.]+)e[+-]?0+$/, \"$1\") // Make sure numbers always start with a digit.\n    .replace(/^([+-])?\\./, \"$10.\") // Remove extraneous trailing decimal zeroes.\n    .replace(/(\\.\\d+?)0+(?=e|$)/, \"$1\") // Remove trailing dot.\n    .replace(/\\.(?=e|$)/, \"\");\n  }\n  /**\n   * @param {string} str\n   * @param {string} target\n   * @returns {number}\n   */\n\n\n  function getMaxContinuousCount(str, target) {\n    var results = str.match(new RegExp(\"(\".concat(escapeStringRegexp(target), \")+\"), \"g\"));\n\n    if (results === null) {\n      return 0;\n    }\n\n    return results.reduce(function (maxCount, result) {\n      return Math.max(maxCount, result.length / target.length);\n    }, 0);\n  }\n\n  function getMinNotPresentContinuousCount(str, target) {\n    var matches = str.match(new RegExp(\"(\".concat(escapeStringRegexp(target), \")+\"), \"g\"));\n\n    if (matches === null) {\n      return 0;\n    }\n\n    var countPresent = new Map();\n    var max = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = matches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var match = _step.value;\n        var count = match.length / target.length;\n        countPresent.set(count, true);\n\n        if (count > max) {\n          max = count;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    for (var i = 1; i < max; i++) {\n      if (!countPresent.get(i)) {\n        return i;\n      }\n    }\n\n    return max + 1;\n  }\n  /**\n   * @param {string} text\n   * @returns {number}\n   */\n\n\n  function getStringWidth(text) {\n    if (!text) {\n      return 0;\n    } // shortcut to avoid needless string `RegExp`s, replacements, and allocations within `string-width`\n\n\n    if (!notAsciiRegex.test(text)) {\n      return text.length;\n    }\n\n    return stringWidth_1(text);\n  }\n\n  function hasIgnoreComment(path) {\n    var node = path.getValue();\n    return hasNodeIgnoreComment(node);\n  }\n\n  function hasNodeIgnoreComment(node) {\n    return node && node.comments && node.comments.length > 0 && node.comments.some(function (comment) {\n      return comment.value.trim() === \"prettier-ignore\";\n    });\n  }\n\n  function matchAncestorTypes(path, types, index) {\n    index = index || 0;\n    types = types.slice();\n\n    while (types.length) {\n      var parent = path.getParentNode(index);\n      var type = types.shift();\n\n      if (!parent || parent.type !== type) {\n        return false;\n      }\n\n      index++;\n    }\n\n    return true;\n  }\n\n  function addCommentHelper(node, comment) {\n    var comments = node.comments || (node.comments = []);\n    comments.push(comment);\n    comment.printed = false; // For some reason, TypeScript parses `// x` inside of JSXText as a comment\n    // We already \"print\" it via the raw text, we don't need to re-print it as a\n    // comment\n\n    if (node.type === \"JSXText\") {\n      comment.printed = true;\n    }\n  }\n\n  function addLeadingComment(node, comment) {\n    comment.leading = true;\n    comment.trailing = false;\n    addCommentHelper(node, comment);\n  }\n\n  function addDanglingComment(node, comment) {\n    comment.leading = false;\n    comment.trailing = false;\n    addCommentHelper(node, comment);\n  }\n\n  function addTrailingComment(node, comment) {\n    comment.leading = false;\n    comment.trailing = true;\n    addCommentHelper(node, comment);\n  }\n\n  function isWithinParentArrayProperty(path, propertyName) {\n    var node = path.getValue();\n    var parent = path.getParentNode();\n\n    if (parent == null) {\n      return false;\n    }\n\n    if (!Array.isArray(parent[propertyName])) {\n      return false;\n    }\n\n    var key = path.getName();\n    return parent[propertyName][key] === node;\n  }\n\n  function replaceEndOfLineWith(text, replacement) {\n    var parts = [];\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = text.split(\"\\n\")[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var part = _step2.value;\n\n        if (parts.length !== 0) {\n          parts.push(replacement);\n        }\n\n        parts.push(part);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    return parts;\n  }\n\n  var util = {\n    replaceEndOfLineWith: replaceEndOfLineWith,\n    getStringWidth: getStringWidth,\n    getMaxContinuousCount: getMaxContinuousCount,\n    getMinNotPresentContinuousCount: getMinNotPresentContinuousCount,\n    getPrecedence: getPrecedence,\n    shouldFlatten: shouldFlatten,\n    isBitwiseOperator: isBitwiseOperator,\n    isExportDeclaration: isExportDeclaration,\n    getParentExportDeclaration: getParentExportDeclaration,\n    getPenultimate: getPenultimate,\n    getLast: getLast,\n    getNextNonSpaceNonCommentCharacterIndexWithStartIndex: getNextNonSpaceNonCommentCharacterIndexWithStartIndex,\n    getNextNonSpaceNonCommentCharacterIndex: getNextNonSpaceNonCommentCharacterIndex,\n    getNextNonSpaceNonCommentCharacter: getNextNonSpaceNonCommentCharacter,\n    skip: skip,\n    skipWhitespace: skipWhitespace,\n    skipSpaces: skipSpaces,\n    skipToLineEnd: skipToLineEnd,\n    skipEverythingButNewLine: skipEverythingButNewLine,\n    skipInlineComment: skipInlineComment,\n    skipTrailingComment: skipTrailingComment,\n    skipNewline: skipNewline,\n    isNextLineEmptyAfterIndex: isNextLineEmptyAfterIndex,\n    isNextLineEmpty: isNextLineEmpty,\n    isPreviousLineEmpty: isPreviousLineEmpty,\n    hasNewline: hasNewline,\n    hasNewlineInRange: hasNewlineInRange,\n    hasSpaces: hasSpaces,\n    setLocStart: setLocStart,\n    setLocEnd: setLocEnd,\n    startsWithNoLookaheadToken: startsWithNoLookaheadToken,\n    getAlignmentSize: getAlignmentSize,\n    getIndentSize: getIndentSize,\n    getPreferredQuote: getPreferredQuote,\n    printString: printString,\n    printNumber: printNumber,\n    hasIgnoreComment: hasIgnoreComment,\n    hasNodeIgnoreComment: hasNodeIgnoreComment,\n    makeString: makeString,\n    matchAncestorTypes: matchAncestorTypes,\n    addLeadingComment: addLeadingComment,\n    addDanglingComment: addDanglingComment,\n    addTrailingComment: addTrailingComment,\n    isWithinParentArrayProperty: isWithinParentArrayProperty\n  };\n\n  function guessEndOfLine(text) {\n    var index = text.indexOf(\"\\r\");\n\n    if (index >= 0) {\n      return text.charAt(index + 1) === \"\\n\" ? \"crlf\" : \"cr\";\n    }\n\n    return \"lf\";\n  }\n\n  function convertEndOfLineToChars(value) {\n    switch (value) {\n      case \"cr\":\n        return \"\\r\";\n\n      case \"crlf\":\n        return \"\\r\\n\";\n\n      default:\n        return \"\\n\";\n    }\n  }\n\n  var endOfLine = {\n    guessEndOfLine: guessEndOfLine,\n    convertEndOfLineToChars: convertEndOfLineToChars\n  };\n\n  var getStringWidth$1 = util.getStringWidth;\n  var convertEndOfLineToChars$1 = endOfLine.convertEndOfLineToChars;\n  var concat$1 = docBuilders.concat,\n      fill$1 = docBuilders.fill,\n      cursor$1 = docBuilders.cursor;\n  /** @type {Record<symbol, typeof MODE_BREAK | typeof MODE_FLAT>} */\n\n  var groupModeMap;\n  var MODE_BREAK = 1;\n  var MODE_FLAT = 2;\n\n  function rootIndent() {\n    return {\n      value: \"\",\n      length: 0,\n      queue: []\n    };\n  }\n\n  function makeIndent(ind, options) {\n    return generateInd(ind, {\n      type: \"indent\"\n    }, options);\n  }\n\n  function makeAlign(ind, n, options) {\n    return n === -Infinity ? ind.root || rootIndent() : n < 0 ? generateInd(ind, {\n      type: \"dedent\"\n    }, options) : !n ? ind : n.type === \"root\" ? Object.assign({}, ind, {\n      root: ind\n    }) : typeof n === \"string\" ? generateInd(ind, {\n      type: \"stringAlign\",\n      n: n\n    }, options) : generateInd(ind, {\n      type: \"numberAlign\",\n      n: n\n    }, options);\n  }\n\n  function generateInd(ind, newPart, options) {\n    var queue = newPart.type === \"dedent\" ? ind.queue.slice(0, -1) : ind.queue.concat(newPart);\n    var value = \"\";\n    var length = 0;\n    var lastTabs = 0;\n    var lastSpaces = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = queue[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var part = _step.value;\n\n        switch (part.type) {\n          case \"indent\":\n            flush();\n\n            if (options.useTabs) {\n              addTabs(1);\n            } else {\n              addSpaces(options.tabWidth);\n            }\n\n            break;\n\n          case \"stringAlign\":\n            flush();\n            value += part.n;\n            length += part.n.length;\n            break;\n\n          case \"numberAlign\":\n            lastTabs += 1;\n            lastSpaces += part.n;\n            break;\n\n          /* istanbul ignore next */\n\n          default:\n            throw new Error(\"Unexpected type '\".concat(part.type, \"'\"));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    flushSpaces();\n    return Object.assign({}, ind, {\n      value: value,\n      length: length,\n      queue: queue\n    });\n\n    function addTabs(count) {\n      value += \"\\t\".repeat(count);\n      length += options.tabWidth * count;\n    }\n\n    function addSpaces(count) {\n      value += \" \".repeat(count);\n      length += count;\n    }\n\n    function flush() {\n      if (options.useTabs) {\n        flushTabs();\n      } else {\n        flushSpaces();\n      }\n    }\n\n    function flushTabs() {\n      if (lastTabs > 0) {\n        addTabs(lastTabs);\n      }\n\n      resetLast();\n    }\n\n    function flushSpaces() {\n      if (lastSpaces > 0) {\n        addSpaces(lastSpaces);\n      }\n\n      resetLast();\n    }\n\n    function resetLast() {\n      lastTabs = 0;\n      lastSpaces = 0;\n    }\n  }\n\n  function trim$1(out) {\n    if (out.length === 0) {\n      return 0;\n    }\n\n    var trimCount = 0; // Trim whitespace at the end of line\n\n    while (out.length > 0 && typeof out[out.length - 1] === \"string\" && out[out.length - 1].match(/^[ \\t]*$/)) {\n      trimCount += out.pop().length;\n    }\n\n    if (out.length && typeof out[out.length - 1] === \"string\") {\n      var trimmed = out[out.length - 1].replace(/[ \\t]*$/, \"\");\n      trimCount += out[out.length - 1].length - trimmed.length;\n      out[out.length - 1] = trimmed;\n    }\n\n    return trimCount;\n  }\n\n  function fits(next, restCommands, width, options, mustBeFlat) {\n    var restIdx = restCommands.length;\n    var cmds = [next]; // `out` is only used for width counting because `trim` requires to look\n    // backwards for space characters.\n\n    var out = [];\n\n    while (width >= 0) {\n      if (cmds.length === 0) {\n        if (restIdx === 0) {\n          return true;\n        }\n\n        cmds.push(restCommands[restIdx - 1]);\n        restIdx--;\n        continue;\n      }\n\n      var x = cmds.pop();\n      var ind = x[0];\n      var mode = x[1];\n      var doc = x[2];\n\n      if (typeof doc === \"string\") {\n        out.push(doc);\n        width -= getStringWidth$1(doc);\n      } else {\n        switch (doc.type) {\n          case \"concat\":\n            for (var i = doc.parts.length - 1; i >= 0; i--) {\n              cmds.push([ind, mode, doc.parts[i]]);\n            }\n\n            break;\n\n          case \"indent\":\n            cmds.push([makeIndent(ind, options), mode, doc.contents]);\n            break;\n\n          case \"align\":\n            cmds.push([makeAlign(ind, doc.n, options), mode, doc.contents]);\n            break;\n\n          case \"trim\":\n            width += trim$1(out);\n            break;\n\n          case \"group\":\n            if (mustBeFlat && doc.break) {\n              return false;\n            }\n\n            cmds.push([ind, doc.break ? MODE_BREAK : mode, doc.contents]);\n\n            if (doc.id) {\n              groupModeMap[doc.id] = cmds[cmds.length - 1][1];\n            }\n\n            break;\n\n          case \"fill\":\n            for (var _i = doc.parts.length - 1; _i >= 0; _i--) {\n              cmds.push([ind, mode, doc.parts[_i]]);\n            }\n\n            break;\n\n          case \"if-break\":\n            {\n              var groupMode = doc.groupId ? groupModeMap[doc.groupId] : mode;\n\n              if (groupMode === MODE_BREAK) {\n                if (doc.breakContents) {\n                  cmds.push([ind, mode, doc.breakContents]);\n                }\n              }\n\n              if (groupMode === MODE_FLAT) {\n                if (doc.flatContents) {\n                  cmds.push([ind, mode, doc.flatContents]);\n                }\n              }\n\n              break;\n            }\n\n          case \"line\":\n            switch (mode) {\n              // fallthrough\n              case MODE_FLAT:\n                if (!doc.hard) {\n                  if (!doc.soft) {\n                    out.push(\" \");\n                    width -= 1;\n                  }\n\n                  break;\n                }\n\n                return true;\n\n              case MODE_BREAK:\n                return true;\n            }\n\n            break;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  function printDocToString(doc, options) {\n    groupModeMap = {};\n    var width = options.printWidth;\n    var newLine = convertEndOfLineToChars$1(options.endOfLine);\n    var pos = 0; // cmds is basically a stack. We've turned a recursive call into a\n    // while loop which is much faster. The while loop below adds new\n    // cmds to the array instead of recursively calling `print`.\n\n    var cmds = [[rootIndent(), MODE_BREAK, doc]];\n    var out = [];\n    var shouldRemeasure = false;\n    var lineSuffix = [];\n\n    while (cmds.length !== 0) {\n      var x = cmds.pop();\n      var ind = x[0];\n      var mode = x[1];\n      var _doc = x[2];\n\n      if (typeof _doc === \"string\") {\n        out.push(_doc);\n        pos += getStringWidth$1(_doc);\n      } else {\n        switch (_doc.type) {\n          case \"cursor\":\n            out.push(cursor$1.placeholder);\n            break;\n\n          case \"concat\":\n            for (var i = _doc.parts.length - 1; i >= 0; i--) {\n              cmds.push([ind, mode, _doc.parts[i]]);\n            }\n\n            break;\n\n          case \"indent\":\n            cmds.push([makeIndent(ind, options), mode, _doc.contents]);\n            break;\n\n          case \"align\":\n            cmds.push([makeAlign(ind, _doc.n, options), mode, _doc.contents]);\n            break;\n\n          case \"trim\":\n            pos -= trim$1(out);\n            break;\n\n          case \"group\":\n            switch (mode) {\n              case MODE_FLAT:\n                if (!shouldRemeasure) {\n                  cmds.push([ind, _doc.break ? MODE_BREAK : MODE_FLAT, _doc.contents]);\n                  break;\n                }\n\n              // fallthrough\n\n              case MODE_BREAK:\n                {\n                  shouldRemeasure = false;\n                  var next = [ind, MODE_FLAT, _doc.contents];\n                  var rem = width - pos;\n\n                  if (!_doc.break && fits(next, cmds, rem, options)) {\n                    cmds.push(next);\n                  } else {\n                    // Expanded states are a rare case where a document\n                    // can manually provide multiple representations of\n                    // itself. It provides an array of documents\n                    // going from the least expanded (most flattened)\n                    // representation first to the most expanded. If a\n                    // group has these, we need to manually go through\n                    // these states and find the first one that fits.\n                    if (_doc.expandedStates) {\n                      var mostExpanded = _doc.expandedStates[_doc.expandedStates.length - 1];\n\n                      if (_doc.break) {\n                        cmds.push([ind, MODE_BREAK, mostExpanded]);\n                        break;\n                      } else {\n                        for (var _i2 = 1; _i2 < _doc.expandedStates.length + 1; _i2++) {\n                          if (_i2 >= _doc.expandedStates.length) {\n                            cmds.push([ind, MODE_BREAK, mostExpanded]);\n                            break;\n                          } else {\n                            var state = _doc.expandedStates[_i2];\n                            var cmd = [ind, MODE_FLAT, state];\n\n                            if (fits(cmd, cmds, rem, options)) {\n                              cmds.push(cmd);\n                              break;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      cmds.push([ind, MODE_BREAK, _doc.contents]);\n                    }\n                  }\n\n                  break;\n                }\n            }\n\n            if (_doc.id) {\n              groupModeMap[_doc.id] = cmds[cmds.length - 1][1];\n            }\n\n            break;\n          // Fills each line with as much code as possible before moving to a new\n          // line with the same indentation.\n          //\n          // Expects doc.parts to be an array of alternating content and\n          // whitespace. The whitespace contains the linebreaks.\n          //\n          // For example:\n          //   [\"I\", line, \"love\", line, \"monkeys\"]\n          // or\n          //   [{ type: group, ... }, softline, { type: group, ... }]\n          //\n          // It uses this parts structure to handle three main layout cases:\n          // * The first two content items fit on the same line without\n          //   breaking\n          //   -> output the first content item and the whitespace \"flat\".\n          // * Only the first content item fits on the line without breaking\n          //   -> output the first content item \"flat\" and the whitespace with\n          //   \"break\".\n          // * Neither content item fits on the line without breaking\n          //   -> output the first content item and the whitespace with \"break\".\n\n          case \"fill\":\n            {\n              var _rem = width - pos;\n\n              var parts = _doc.parts;\n\n              if (parts.length === 0) {\n                break;\n              }\n\n              var content = parts[0];\n              var contentFlatCmd = [ind, MODE_FLAT, content];\n              var contentBreakCmd = [ind, MODE_BREAK, content];\n              var contentFits = fits(contentFlatCmd, [], _rem, options, true);\n\n              if (parts.length === 1) {\n                if (contentFits) {\n                  cmds.push(contentFlatCmd);\n                } else {\n                  cmds.push(contentBreakCmd);\n                }\n\n                break;\n              }\n\n              var whitespace = parts[1];\n              var whitespaceFlatCmd = [ind, MODE_FLAT, whitespace];\n              var whitespaceBreakCmd = [ind, MODE_BREAK, whitespace];\n\n              if (parts.length === 2) {\n                if (contentFits) {\n                  cmds.push(whitespaceFlatCmd);\n                  cmds.push(contentFlatCmd);\n                } else {\n                  cmds.push(whitespaceBreakCmd);\n                  cmds.push(contentBreakCmd);\n                }\n\n                break;\n              } // At this point we've handled the first pair (context, separator)\n              // and will create a new fill doc for the rest of the content.\n              // Ideally we wouldn't mutate the array here but coping all the\n              // elements to a new array would make this algorithm quadratic,\n              // which is unusable for large arrays (e.g. large texts in JSX).\n\n\n              parts.splice(0, 2);\n              var remainingCmd = [ind, mode, fill$1(parts)];\n              var secondContent = parts[0];\n              var firstAndSecondContentFlatCmd = [ind, MODE_FLAT, concat$1([content, whitespace, secondContent])];\n              var firstAndSecondContentFits = fits(firstAndSecondContentFlatCmd, [], _rem, options, true);\n\n              if (firstAndSecondContentFits) {\n                cmds.push(remainingCmd);\n                cmds.push(whitespaceFlatCmd);\n                cmds.push(contentFlatCmd);\n              } else if (contentFits) {\n                cmds.push(remainingCmd);\n                cmds.push(whitespaceBreakCmd);\n                cmds.push(contentFlatCmd);\n              } else {\n                cmds.push(remainingCmd);\n                cmds.push(whitespaceBreakCmd);\n                cmds.push(contentBreakCmd);\n              }\n\n              break;\n            }\n\n          case \"if-break\":\n            {\n              var groupMode = _doc.groupId ? groupModeMap[_doc.groupId] : mode;\n\n              if (groupMode === MODE_BREAK) {\n                if (_doc.breakContents) {\n                  cmds.push([ind, mode, _doc.breakContents]);\n                }\n              }\n\n              if (groupMode === MODE_FLAT) {\n                if (_doc.flatContents) {\n                  cmds.push([ind, mode, _doc.flatContents]);\n                }\n              }\n\n              break;\n            }\n\n          case \"line-suffix\":\n            lineSuffix.push([ind, mode, _doc.contents]);\n            break;\n\n          case \"line-suffix-boundary\":\n            if (lineSuffix.length > 0) {\n              cmds.push([ind, mode, {\n                type: \"line\",\n                hard: true\n              }]);\n            }\n\n            break;\n\n          case \"line\":\n            switch (mode) {\n              case MODE_FLAT:\n                if (!_doc.hard) {\n                  if (!_doc.soft) {\n                    out.push(\" \");\n                    pos += 1;\n                  }\n\n                  break;\n                } else {\n                  // This line was forced into the output even if we\n                  // were in flattened mode, so we need to tell the next\n                  // group that no matter what, it needs to remeasure\n                  // because the previous measurement didn't accurately\n                  // capture the entire expression (this is necessary\n                  // for nested groups)\n                  shouldRemeasure = true;\n                }\n\n              // fallthrough\n\n              case MODE_BREAK:\n                if (lineSuffix.length) {\n                  cmds.push([ind, mode, _doc]);\n                  [].push.apply(cmds, lineSuffix.reverse());\n                  lineSuffix = [];\n                  break;\n                }\n\n                if (_doc.literal) {\n                  if (ind.root) {\n                    out.push(newLine, ind.root.value);\n                    pos = ind.root.length;\n                  } else {\n                    out.push(newLine);\n                    pos = 0;\n                  }\n                } else {\n                  pos -= trim$1(out);\n                  out.push(newLine + ind.value);\n                  pos = ind.length;\n                }\n\n                break;\n            }\n\n            break;\n        }\n      }\n    }\n\n    var cursorPlaceholderIndex = out.indexOf(cursor$1.placeholder);\n\n    if (cursorPlaceholderIndex !== -1) {\n      var otherCursorPlaceholderIndex = out.indexOf(cursor$1.placeholder, cursorPlaceholderIndex + 1);\n      var beforeCursor = out.slice(0, cursorPlaceholderIndex).join(\"\");\n      var aroundCursor = out.slice(cursorPlaceholderIndex + 1, otherCursorPlaceholderIndex).join(\"\");\n      var afterCursor = out.slice(otherCursorPlaceholderIndex + 1).join(\"\");\n      return {\n        formatted: beforeCursor + aroundCursor + afterCursor,\n        cursorNodeStart: beforeCursor.length,\n        cursorNodeText: aroundCursor\n      };\n    }\n\n    return {\n      formatted: out.join(\"\")\n    };\n  }\n\n  var docPrinter = {\n    printDocToString: printDocToString\n  };\n\n  var traverseDocOnExitStackMarker = {};\n\n  function traverseDoc(doc, onEnter, onExit, shouldTraverseConditionalGroups) {\n    var docsStack = [doc];\n\n    while (docsStack.length !== 0) {\n      var _doc = docsStack.pop();\n\n      if (_doc === traverseDocOnExitStackMarker) {\n        onExit(docsStack.pop());\n        continue;\n      }\n\n      var shouldRecurse = true;\n\n      if (onEnter) {\n        if (onEnter(_doc) === false) {\n          shouldRecurse = false;\n        }\n      }\n\n      if (onExit) {\n        docsStack.push(_doc);\n        docsStack.push(traverseDocOnExitStackMarker);\n      }\n\n      if (shouldRecurse) {\n        // When there are multiple parts to process,\n        // the parts need to be pushed onto the stack in reverse order,\n        // so that they are processed in the original order\n        // when the stack is popped.\n        if (_doc.type === \"concat\" || _doc.type === \"fill\") {\n          for (var ic = _doc.parts.length, i = ic - 1; i >= 0; --i) {\n            docsStack.push(_doc.parts[i]);\n          }\n        } else if (_doc.type === \"if-break\") {\n          if (_doc.flatContents) {\n            docsStack.push(_doc.flatContents);\n          }\n\n          if (_doc.breakContents) {\n            docsStack.push(_doc.breakContents);\n          }\n        } else if (_doc.type === \"group\" && _doc.expandedStates) {\n          if (shouldTraverseConditionalGroups) {\n            for (var _ic = _doc.expandedStates.length, _i = _ic - 1; _i >= 0; --_i) {\n              docsStack.push(_doc.expandedStates[_i]);\n            }\n          } else {\n            docsStack.push(_doc.contents);\n          }\n        } else if (_doc.contents) {\n          docsStack.push(_doc.contents);\n        }\n      }\n    }\n  }\n\n  function mapDoc(doc, cb) {\n    if (doc.type === \"concat\" || doc.type === \"fill\") {\n      var parts = doc.parts.map(function (part) {\n        return mapDoc(part, cb);\n      });\n      return cb(Object.assign({}, doc, {\n        parts: parts\n      }));\n    } else if (doc.type === \"if-break\") {\n      var breakContents = doc.breakContents && mapDoc(doc.breakContents, cb);\n      var flatContents = doc.flatContents && mapDoc(doc.flatContents, cb);\n      return cb(Object.assign({}, doc, {\n        breakContents: breakContents,\n        flatContents: flatContents\n      }));\n    } else if (doc.contents) {\n      var contents = mapDoc(doc.contents, cb);\n      return cb(Object.assign({}, doc, {\n        contents: contents\n      }));\n    }\n\n    return cb(doc);\n  }\n\n  function findInDoc(doc, fn, defaultValue) {\n    var result = defaultValue;\n    var hasStopped = false;\n\n    function findInDocOnEnterFn(doc) {\n      var maybeResult = fn(doc);\n\n      if (maybeResult !== undefined) {\n        hasStopped = true;\n        result = maybeResult;\n      }\n\n      if (hasStopped) {\n        return false;\n      }\n    }\n\n    traverseDoc(doc, findInDocOnEnterFn);\n    return result;\n  }\n\n  function isEmpty(n) {\n    return typeof n === \"string\" && n.length === 0;\n  }\n\n  function isLineNextFn(doc) {\n    if (typeof doc === \"string\") {\n      return false;\n    }\n\n    if (doc.type === \"line\") {\n      return true;\n    }\n  }\n\n  function isLineNext(doc) {\n    return findInDoc(doc, isLineNextFn, false);\n  }\n\n  function willBreakFn(doc) {\n    if (doc.type === \"group\" && doc.break) {\n      return true;\n    }\n\n    if (doc.type === \"line\" && doc.hard) {\n      return true;\n    }\n\n    if (doc.type === \"break-parent\") {\n      return true;\n    }\n  }\n\n  function willBreak(doc) {\n    return findInDoc(doc, willBreakFn, false);\n  }\n\n  function breakParentGroup(groupStack) {\n    if (groupStack.length > 0) {\n      var parentGroup = groupStack[groupStack.length - 1]; // Breaks are not propagated through conditional groups because\n      // the user is expected to manually handle what breaks.\n\n      if (!parentGroup.expandedStates) {\n        parentGroup.break = true;\n      }\n    }\n\n    return null;\n  }\n\n  function propagateBreaks(doc) {\n    var alreadyVisitedSet = new Set();\n    var groupStack = [];\n\n    function propagateBreaksOnEnterFn(doc) {\n      if (doc.type === \"break-parent\") {\n        breakParentGroup(groupStack);\n      }\n\n      if (doc.type === \"group\") {\n        groupStack.push(doc);\n\n        if (alreadyVisitedSet.has(doc)) {\n          return false;\n        }\n\n        alreadyVisitedSet.add(doc);\n      }\n    }\n\n    function propagateBreaksOnExitFn(doc) {\n      if (doc.type === \"group\") {\n        var group = groupStack.pop();\n\n        if (group.break) {\n          breakParentGroup(groupStack);\n        }\n      }\n    }\n\n    traverseDoc(doc, propagateBreaksOnEnterFn, propagateBreaksOnExitFn,\n    /* shouldTraverseConditionalGroups */\n    true);\n  }\n\n  function removeLinesFn(doc) {\n    // Force this doc into flat mode by statically converting all\n    // lines into spaces (or soft lines into nothing). Hard lines\n    // should still output because there's too great of a chance\n    // of breaking existing assumptions otherwise.\n    if (doc.type === \"line\" && !doc.hard) {\n      return doc.soft ? \"\" : \" \";\n    } else if (doc.type === \"if-break\") {\n      return doc.flatContents || \"\";\n    }\n\n    return doc;\n  }\n\n  function removeLines(doc) {\n    return mapDoc(doc, removeLinesFn);\n  }\n\n  function stripTrailingHardline(doc) {\n    // HACK remove ending hardline, original PR: #1984\n    if (doc.type === \"concat\" && doc.parts.length !== 0) {\n      var lastPart = doc.parts[doc.parts.length - 1];\n\n      if (lastPart.type === \"concat\") {\n        if (lastPart.parts.length === 2 && lastPart.parts[0].hard && lastPart.parts[1].type === \"break-parent\") {\n          return {\n            type: \"concat\",\n            parts: doc.parts.slice(0, -1)\n          };\n        }\n\n        return {\n          type: \"concat\",\n          parts: doc.parts.slice(0, -1).concat(stripTrailingHardline(lastPart))\n        };\n      }\n    }\n\n    return doc;\n  }\n\n  var docUtils = {\n    isEmpty: isEmpty,\n    willBreak: willBreak,\n    isLineNext: isLineNext,\n    traverseDoc: traverseDoc,\n    findInDoc: findInDoc,\n    mapDoc: mapDoc,\n    propagateBreaks: propagateBreaks,\n    removeLines: removeLines,\n    stripTrailingHardline: stripTrailingHardline\n  };\n\n  function flattenDoc(doc) {\n    if (doc.type === \"concat\") {\n      var res = [];\n\n      for (var i = 0; i < doc.parts.length; ++i) {\n        var doc2 = doc.parts[i];\n\n        if (typeof doc2 !== \"string\" && doc2.type === \"concat\") {\n          [].push.apply(res, flattenDoc(doc2).parts);\n        } else {\n          var flattened = flattenDoc(doc2);\n\n          if (flattened !== \"\") {\n            res.push(flattened);\n          }\n        }\n      }\n\n      return Object.assign({}, doc, {\n        parts: res\n      });\n    } else if (doc.type === \"if-break\") {\n      return Object.assign({}, doc, {\n        breakContents: doc.breakContents != null ? flattenDoc(doc.breakContents) : null,\n        flatContents: doc.flatContents != null ? flattenDoc(doc.flatContents) : null\n      });\n    } else if (doc.type === \"group\") {\n      return Object.assign({}, doc, {\n        contents: flattenDoc(doc.contents),\n        expandedStates: doc.expandedStates ? doc.expandedStates.map(flattenDoc) : doc.expandedStates\n      });\n    } else if (doc.contents) {\n      return Object.assign({}, doc, {\n        contents: flattenDoc(doc.contents)\n      });\n    }\n\n    return doc;\n  }\n\n  function printDoc(doc) {\n    if (typeof doc === \"string\") {\n      return JSON.stringify(doc);\n    }\n\n    if (doc.type === \"line\") {\n      if (doc.literal) {\n        return \"literalline\";\n      }\n\n      if (doc.hard) {\n        return \"hardline\";\n      }\n\n      if (doc.soft) {\n        return \"softline\";\n      }\n\n      return \"line\";\n    }\n\n    if (doc.type === \"break-parent\") {\n      return \"breakParent\";\n    }\n\n    if (doc.type === \"trim\") {\n      return \"trim\";\n    }\n\n    if (doc.type === \"concat\") {\n      return \"[\" + doc.parts.map(printDoc).join(\", \") + \"]\";\n    }\n\n    if (doc.type === \"indent\") {\n      return \"indent(\" + printDoc(doc.contents) + \")\";\n    }\n\n    if (doc.type === \"align\") {\n      return doc.n === -Infinity ? \"dedentToRoot(\" + printDoc(doc.contents) + \")\" : doc.n < 0 ? \"dedent(\" + printDoc(doc.contents) + \")\" : doc.n.type === \"root\" ? \"markAsRoot(\" + printDoc(doc.contents) + \")\" : \"align(\" + JSON.stringify(doc.n) + \", \" + printDoc(doc.contents) + \")\";\n    }\n\n    if (doc.type === \"if-break\") {\n      return \"ifBreak(\" + printDoc(doc.breakContents) + (doc.flatContents ? \", \" + printDoc(doc.flatContents) : \"\") + \")\";\n    }\n\n    if (doc.type === \"group\") {\n      if (doc.expandedStates) {\n        return \"conditionalGroup(\" + \"[\" + doc.expandedStates.map(printDoc).join(\",\") + \"])\";\n      }\n\n      return (doc.break ? \"wrappedGroup\" : \"group\") + \"(\" + printDoc(doc.contents) + \")\";\n    }\n\n    if (doc.type === \"fill\") {\n      return \"fill\" + \"(\" + doc.parts.map(printDoc).join(\", \") + \")\";\n    }\n\n    if (doc.type === \"line-suffix\") {\n      return \"lineSuffix(\" + printDoc(doc.contents) + \")\";\n    }\n\n    if (doc.type === \"line-suffix-boundary\") {\n      return \"lineSuffixBoundary\";\n    }\n\n    throw new Error(\"Unknown doc type \" + doc.type);\n  }\n\n  var docDebug = {\n    printDocToDebug: function printDocToDebug(doc) {\n      return printDoc(flattenDoc(doc));\n    }\n  };\n\n  var doc = {\n    builders: docBuilders,\n    printer: docPrinter,\n    utils: docUtils,\n    debug: docDebug\n  };\n\n  var mapDoc$1 = doc.utils.mapDoc;\n\n  function isNextLineEmpty$1(text, node, options) {\n    return util.isNextLineEmpty(text, node, options.locEnd);\n  }\n\n  function isPreviousLineEmpty$1(text, node, options) {\n    return util.isPreviousLineEmpty(text, node, options.locStart);\n  }\n\n  function getNextNonSpaceNonCommentCharacterIndex$1(text, node, options) {\n    return util.getNextNonSpaceNonCommentCharacterIndex(text, node, options.locEnd);\n  }\n\n  var utilShared = {\n    getMaxContinuousCount: util.getMaxContinuousCount,\n    getStringWidth: util.getStringWidth,\n    getAlignmentSize: util.getAlignmentSize,\n    getIndentSize: util.getIndentSize,\n    skip: util.skip,\n    skipWhitespace: util.skipWhitespace,\n    skipSpaces: util.skipSpaces,\n    skipNewline: util.skipNewline,\n    skipToLineEnd: util.skipToLineEnd,\n    skipEverythingButNewLine: util.skipEverythingButNewLine,\n    skipInlineComment: util.skipInlineComment,\n    skipTrailingComment: util.skipTrailingComment,\n    hasNewline: util.hasNewline,\n    hasNewlineInRange: util.hasNewlineInRange,\n    hasSpaces: util.hasSpaces,\n    isNextLineEmpty: isNextLineEmpty$1,\n    isNextLineEmptyAfterIndex: util.isNextLineEmptyAfterIndex,\n    isPreviousLineEmpty: isPreviousLineEmpty$1,\n    getNextNonSpaceNonCommentCharacterIndex: getNextNonSpaceNonCommentCharacterIndex$1,\n    mapDoc: mapDoc$1,\n    // TODO: remove in 2.0, we already exposed it in docUtils\n    makeString: util.makeString,\n    addLeadingComment: util.addLeadingComment,\n    addDanglingComment: util.addDanglingComment,\n    addTrailingComment: util.addTrailingComment\n  };\n\n  var _require$$0$builders = doc.builders,\n      concat$2 = _require$$0$builders.concat,\n      hardline$1 = _require$$0$builders.hardline,\n      breakParent$1 = _require$$0$builders.breakParent,\n      indent$1 = _require$$0$builders.indent,\n      lineSuffix$1 = _require$$0$builders.lineSuffix,\n      join$1 = _require$$0$builders.join,\n      cursor$2 = _require$$0$builders.cursor;\n  var hasNewline$1 = util.hasNewline,\n      skipNewline$1 = util.skipNewline,\n      isPreviousLineEmpty$2 = util.isPreviousLineEmpty;\n  var addLeadingComment$1 = utilShared.addLeadingComment,\n      addDanglingComment$1 = utilShared.addDanglingComment,\n      addTrailingComment$1 = utilShared.addTrailingComment;\n  var childNodesCacheKey = Symbol(\"child-nodes\");\n\n  function getSortedChildNodes(node, options, resultArray) {\n    if (!node) {\n      return;\n    }\n\n    var printer = options.printer,\n        locStart = options.locStart,\n        locEnd = options.locEnd;\n\n    if (resultArray) {\n      if (node && printer.canAttachComment && printer.canAttachComment(node)) {\n        // This reverse insertion sort almost always takes constant\n        // time because we almost always (maybe always?) append the\n        // nodes in order anyway.\n        var i;\n\n        for (i = resultArray.length - 1; i >= 0; --i) {\n          if (locStart(resultArray[i]) <= locStart(node) && locEnd(resultArray[i]) <= locEnd(node)) {\n            break;\n          }\n        }\n\n        resultArray.splice(i + 1, 0, node);\n        return;\n      }\n    } else if (node[childNodesCacheKey]) {\n      return node[childNodesCacheKey];\n    }\n\n    var childNodes;\n\n    if (printer.getCommentChildNodes) {\n      childNodes = printer.getCommentChildNodes(node);\n    } else if (node && _typeof(node) === \"object\") {\n      childNodes = Object.keys(node).filter(function (n) {\n        return n !== \"enclosingNode\" && n !== \"precedingNode\" && n !== \"followingNode\";\n      }).map(function (n) {\n        return node[n];\n      });\n    }\n\n    if (!childNodes) {\n      return;\n    }\n\n    if (!resultArray) {\n      Object.defineProperty(node, childNodesCacheKey, {\n        value: resultArray = [],\n        enumerable: false\n      });\n    }\n\n    childNodes.forEach(function (childNode) {\n      getSortedChildNodes(childNode, options, resultArray);\n    });\n    return resultArray;\n  } // As efficiently as possible, decorate the comment object with\n  // .precedingNode, .enclosingNode, and/or .followingNode properties, at\n  // least one of which is guaranteed to be defined.\n\n\n  function decorateComment(node, comment, options) {\n    var locStart = options.locStart,\n        locEnd = options.locEnd;\n    var childNodes = getSortedChildNodes(node, options);\n    var precedingNode;\n    var followingNode; // Time to dust off the old binary search robes and wizard hat.\n\n    var left = 0;\n    var right = childNodes.length;\n\n    while (left < right) {\n      var middle = left + right >> 1;\n      var child = childNodes[middle];\n\n      if (locStart(child) - locStart(comment) <= 0 && locEnd(comment) - locEnd(child) <= 0) {\n        // The comment is completely contained by this child node.\n        comment.enclosingNode = child;\n        decorateComment(child, comment, options);\n        return; // Abandon the binary search at this level.\n      }\n\n      if (locEnd(child) - locStart(comment) <= 0) {\n        // This child node falls completely before the comment.\n        // Because we will never consider this node or any nodes\n        // before it again, this node must be the closest preceding\n        // node we have encountered so far.\n        precedingNode = child;\n        left = middle + 1;\n        continue;\n      }\n\n      if (locEnd(comment) - locStart(child) <= 0) {\n        // This child node falls completely after the comment.\n        // Because we will never consider this node or any nodes after\n        // it again, this node must be the closest following node we\n        // have encountered so far.\n        followingNode = child;\n        right = middle;\n        continue;\n      }\n      /* istanbul ignore next */\n\n\n      throw new Error(\"Comment location overlaps with node location\");\n    } // We don't want comments inside of different expressions inside of the same\n    // template literal to move to another expression.\n\n\n    if (comment.enclosingNode && comment.enclosingNode.type === \"TemplateLiteral\") {\n      var quasis = comment.enclosingNode.quasis;\n      var commentIndex = findExpressionIndexForComment(quasis, comment, options);\n\n      if (precedingNode && findExpressionIndexForComment(quasis, precedingNode, options) !== commentIndex) {\n        precedingNode = null;\n      }\n\n      if (followingNode && findExpressionIndexForComment(quasis, followingNode, options) !== commentIndex) {\n        followingNode = null;\n      }\n    }\n\n    if (precedingNode) {\n      comment.precedingNode = precedingNode;\n    }\n\n    if (followingNode) {\n      comment.followingNode = followingNode;\n    }\n  }\n\n  function attach(comments, ast, text, options) {\n    if (!Array.isArray(comments)) {\n      return;\n    }\n\n    var tiesToBreak = [];\n    var locStart = options.locStart,\n        locEnd = options.locEnd;\n    comments.forEach(function (comment, i) {\n      if (options.parser === \"json\" || options.parser === \"json5\" || options.parser === \"__js_expression\" || options.parser === \"__vue_expression\") {\n        if (locStart(comment) - locStart(ast) <= 0) {\n          addLeadingComment$1(ast, comment);\n          return;\n        }\n\n        if (locEnd(comment) - locEnd(ast) >= 0) {\n          addTrailingComment$1(ast, comment);\n          return;\n        }\n      }\n\n      decorateComment(ast, comment, options);\n      var precedingNode = comment.precedingNode,\n          enclosingNode = comment.enclosingNode,\n          followingNode = comment.followingNode;\n      var pluginHandleOwnLineComment = options.printer.handleComments && options.printer.handleComments.ownLine ? options.printer.handleComments.ownLine : function () {\n        return false;\n      };\n      var pluginHandleEndOfLineComment = options.printer.handleComments && options.printer.handleComments.endOfLine ? options.printer.handleComments.endOfLine : function () {\n        return false;\n      };\n      var pluginHandleRemainingComment = options.printer.handleComments && options.printer.handleComments.remaining ? options.printer.handleComments.remaining : function () {\n        return false;\n      };\n      var isLastComment = comments.length - 1 === i;\n\n      if (hasNewline$1(text, locStart(comment), {\n        backwards: true\n      })) {\n        // If a comment exists on its own line, prefer a leading comment.\n        // We also need to check if it's the first line of the file.\n        if (pluginHandleOwnLineComment(comment, text, options, ast, isLastComment)) ; else if (followingNode) {\n          // Always a leading comment.\n          addLeadingComment$1(followingNode, comment);\n        } else if (precedingNode) {\n          addTrailingComment$1(precedingNode, comment);\n        } else if (enclosingNode) {\n          addDanglingComment$1(enclosingNode, comment);\n        } else {\n          // There are no nodes, let's attach it to the root of the ast\n\n          /* istanbul ignore next */\n          addDanglingComment$1(ast, comment);\n        }\n      } else if (hasNewline$1(text, locEnd(comment))) {\n        if (pluginHandleEndOfLineComment(comment, text, options, ast, isLastComment)) ; else if (precedingNode) {\n          // There is content before this comment on the same line, but\n          // none after it, so prefer a trailing comment of the previous node.\n          addTrailingComment$1(precedingNode, comment);\n        } else if (followingNode) {\n          addLeadingComment$1(followingNode, comment);\n        } else if (enclosingNode) {\n          addDanglingComment$1(enclosingNode, comment);\n        } else {\n          // There are no nodes, let's attach it to the root of the ast\n\n          /* istanbul ignore next */\n          addDanglingComment$1(ast, comment);\n        }\n      } else {\n        if (pluginHandleRemainingComment(comment, text, options, ast, isLastComment)) ; else if (precedingNode && followingNode) {\n          // Otherwise, text exists both before and after the comment on\n          // the same line. If there is both a preceding and following\n          // node, use a tie-breaking algorithm to determine if it should\n          // be attached to the next or previous node. In the last case,\n          // simply attach the right node;\n          var tieCount = tiesToBreak.length;\n\n          if (tieCount > 0) {\n            var lastTie = tiesToBreak[tieCount - 1];\n\n            if (lastTie.followingNode !== comment.followingNode) {\n              breakTies(tiesToBreak, text, options);\n            }\n          }\n\n          tiesToBreak.push(comment);\n        } else if (precedingNode) {\n          addTrailingComment$1(precedingNode, comment);\n        } else if (followingNode) {\n          addLeadingComment$1(followingNode, comment);\n        } else if (enclosingNode) {\n          addDanglingComment$1(enclosingNode, comment);\n        } else {\n          // There are no nodes, let's attach it to the root of the ast\n\n          /* istanbul ignore next */\n          addDanglingComment$1(ast, comment);\n        }\n      }\n    });\n    breakTies(tiesToBreak, text, options);\n    comments.forEach(function (comment) {\n      // These node references were useful for breaking ties, but we\n      // don't need them anymore, and they create cycles in the AST that\n      // may lead to infinite recursion if we don't delete them here.\n      delete comment.precedingNode;\n      delete comment.enclosingNode;\n      delete comment.followingNode;\n    });\n  }\n\n  function breakTies(tiesToBreak, text, options) {\n    var tieCount = tiesToBreak.length;\n\n    if (tieCount === 0) {\n      return;\n    }\n\n    var _tiesToBreak$ = tiesToBreak[0],\n        precedingNode = _tiesToBreak$.precedingNode,\n        followingNode = _tiesToBreak$.followingNode;\n    var gapEndPos = options.locStart(followingNode); // Iterate backwards through tiesToBreak, examining the gaps\n    // between the tied comments. In order to qualify as leading, a\n    // comment must be separated from followingNode by an unbroken series of\n    // gaps (or other comments). Gaps should only contain whitespace or open\n    // parentheses.\n\n    var indexOfFirstLeadingComment;\n\n    for (indexOfFirstLeadingComment = tieCount; indexOfFirstLeadingComment > 0; --indexOfFirstLeadingComment) {\n      var comment = tiesToBreak[indexOfFirstLeadingComment - 1];\n      assert.strictEqual(comment.precedingNode, precedingNode);\n      assert.strictEqual(comment.followingNode, followingNode);\n      var gap = text.slice(options.locEnd(comment), gapEndPos);\n\n      if (/^[\\s(]*$/.test(gap)) {\n        gapEndPos = options.locStart(comment);\n      } else {\n        // The gap string contained something other than whitespace or open\n        // parentheses.\n        break;\n      }\n    }\n\n    tiesToBreak.forEach(function (comment, i) {\n      if (i < indexOfFirstLeadingComment) {\n        addTrailingComment$1(precedingNode, comment);\n      } else {\n        addLeadingComment$1(followingNode, comment);\n      }\n    });\n    tiesToBreak.length = 0;\n  }\n\n  function printComment(commentPath, options) {\n    var comment = commentPath.getValue();\n    comment.printed = true;\n    return options.printer.printComment(commentPath, options);\n  }\n\n  function findExpressionIndexForComment(quasis, comment, options) {\n    var startPos = options.locStart(comment) - 1;\n\n    for (var i = 1; i < quasis.length; ++i) {\n      if (startPos < getQuasiRange(quasis[i]).start) {\n        return i - 1;\n      }\n    } // We haven't found it, it probably means that some of the locations are off.\n    // Let's just return the first one.\n\n    /* istanbul ignore next */\n\n\n    return 0;\n  }\n\n  function getQuasiRange(expr) {\n    if (expr.start !== undefined) {\n      // Babel\n      return {\n        start: expr.start,\n        end: expr.end\n      };\n    } // Flow\n\n\n    return {\n      start: expr.range[0],\n      end: expr.range[1]\n    };\n  }\n\n  function printLeadingComment(commentPath, print, options) {\n    var comment = commentPath.getValue();\n    var contents = printComment(commentPath, options);\n\n    if (!contents) {\n      return \"\";\n    }\n\n    var isBlock = options.printer.isBlockComment && options.printer.isBlockComment(comment); // Leading block comments should see if they need to stay on the\n    // same line or not.\n\n    if (isBlock) {\n      return concat$2([contents, hasNewline$1(options.originalText, options.locEnd(comment)) ? hardline$1 : \" \"]);\n    }\n\n    return concat$2([contents, hardline$1]);\n  }\n\n  function printTrailingComment(commentPath, print, options) {\n    var comment = commentPath.getValue();\n    var contents = printComment(commentPath, options);\n\n    if (!contents) {\n      return \"\";\n    }\n\n    var isBlock = options.printer.isBlockComment && options.printer.isBlockComment(comment); // We don't want the line to break\n    // when the parentParentNode is a ClassDeclaration/-Expression\n    // And the parentNode is in the superClass property\n\n    var parentNode = commentPath.getNode(1);\n    var parentParentNode = commentPath.getNode(2);\n    var isParentSuperClass = parentParentNode && (parentParentNode.type === \"ClassDeclaration\" || parentParentNode.type === \"ClassExpression\") && parentParentNode.superClass === parentNode;\n\n    if (hasNewline$1(options.originalText, options.locStart(comment), {\n      backwards: true\n    })) {\n      // This allows comments at the end of nested structures:\n      // {\n      //   x: 1,\n      //   y: 2\n      //   // A comment\n      // }\n      // Those kinds of comments are almost always leading comments, but\n      // here it doesn't go \"outside\" the block and turns it into a\n      // trailing comment for `2`. We can simulate the above by checking\n      // if this a comment on its own line; normal trailing comments are\n      // always at the end of another expression.\n      var isLineBeforeEmpty = isPreviousLineEmpty$2(options.originalText, comment, options.locStart);\n      return lineSuffix$1(concat$2([hardline$1, isLineBeforeEmpty ? hardline$1 : \"\", contents]));\n    } else if (isBlock || isParentSuperClass) {\n      // Trailing block comments never need a newline\n      return concat$2([\" \", contents]);\n    }\n\n    return concat$2([lineSuffix$1(concat$2([\" \", contents])), !isBlock ? breakParent$1 : \"\"]);\n  }\n\n  function printDanglingComments(path, options, sameIndent, filter) {\n    var parts = [];\n    var node = path.getValue();\n\n    if (!node || !node.comments) {\n      return \"\";\n    }\n\n    path.each(function (commentPath) {\n      var comment = commentPath.getValue();\n\n      if (comment && !comment.leading && !comment.trailing && (!filter || filter(comment))) {\n        parts.push(printComment(commentPath, options));\n      }\n    }, \"comments\");\n\n    if (parts.length === 0) {\n      return \"\";\n    }\n\n    if (sameIndent) {\n      return join$1(hardline$1, parts);\n    }\n\n    return indent$1(concat$2([hardline$1, join$1(hardline$1, parts)]));\n  }\n\n  function prependCursorPlaceholder(path, options, printed) {\n    if (path.getNode() === options.cursorNode && path.getValue()) {\n      return concat$2([cursor$2, printed, cursor$2]);\n    }\n\n    return printed;\n  }\n\n  function printComments(path, print, options, needsSemi) {\n    var value = path.getValue();\n    var printed = print(path);\n    var comments = value && value.comments;\n\n    if (!comments || comments.length === 0) {\n      return prependCursorPlaceholder(path, options, printed);\n    }\n\n    var leadingParts = [];\n    var trailingParts = [needsSemi ? \";\" : \"\", printed];\n    path.each(function (commentPath) {\n      var comment = commentPath.getValue();\n      var leading = comment.leading,\n          trailing = comment.trailing;\n\n      if (leading) {\n        var contents = printLeadingComment(commentPath, print, options);\n\n        if (!contents) {\n          return;\n        }\n\n        leadingParts.push(contents);\n        var text = options.originalText;\n        var index = skipNewline$1(text, options.locEnd(comment));\n\n        if (index !== false && hasNewline$1(text, index)) {\n          leadingParts.push(hardline$1);\n        }\n      } else if (trailing) {\n        trailingParts.push(printTrailingComment(commentPath, print, options));\n      }\n    }, \"comments\");\n    return prependCursorPlaceholder(path, options, concat$2(leadingParts.concat(trailingParts)));\n  }\n\n  var comments = {\n    attach: attach,\n    printComments: printComments,\n    printDanglingComments: printDanglingComments,\n    getSortedChildNodes: getSortedChildNodes\n  };\n\n  function FastPath(value) {\n    assert.ok(this instanceof FastPath);\n    this.stack = [value];\n  } // The name of the current property is always the penultimate element of\n  // this.stack, and always a String.\n\n\n  FastPath.prototype.getName = function getName() {\n    var s = this.stack;\n    var len = s.length;\n\n    if (len > 1) {\n      return s[len - 2];\n    } // Since the name is always a string, null is a safe sentinel value to\n    // return if we do not know the name of the (root) value.\n\n    /* istanbul ignore next */\n\n\n    return null;\n  }; // The value of the current property is always the final element of\n  // this.stack.\n\n\n  FastPath.prototype.getValue = function getValue() {\n    var s = this.stack;\n    return s[s.length - 1];\n  };\n\n  function getNodeHelper(path, count) {\n    var stackIndex = getNodeStackIndexHelper(path.stack, count);\n    return stackIndex === -1 ? null : path.stack[stackIndex];\n  }\n\n  function getNodeStackIndexHelper(stack, count) {\n    for (var i = stack.length - 1; i >= 0; i -= 2) {\n      var value = stack[i];\n\n      if (value && !Array.isArray(value) && --count < 0) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  FastPath.prototype.getNode = function getNode(count) {\n    return getNodeHelper(this, ~~count);\n  };\n\n  FastPath.prototype.getParentNode = function getParentNode(count) {\n    return getNodeHelper(this, ~~count + 1);\n  }; // Temporarily push properties named by string arguments given after the\n  // callback function onto this.stack, then call the callback with a\n  // reference to this (modified) FastPath object. Note that the stack will\n  // be restored to its original state after the callback is finished, so it\n  // is probably a mistake to retain a reference to the path.\n\n\n  FastPath.prototype.call = function call(callback\n  /*, name1, name2, ... */\n  ) {\n    var s = this.stack;\n    var origLen = s.length;\n    var value = s[origLen - 1];\n    var argc = arguments.length;\n\n    for (var i = 1; i < argc; ++i) {\n      var name = arguments[i];\n      value = value[name];\n      s.push(name, value);\n    }\n\n    var result = callback(this);\n    s.length = origLen;\n    return result;\n  };\n\n  FastPath.prototype.callParent = function callParent(callback, count) {\n    var stackIndex = getNodeStackIndexHelper(this.stack, ~~count + 1);\n    var parentValues = this.stack.splice(stackIndex + 1);\n    var result = callback(this);\n    Array.prototype.push.apply(this.stack, parentValues);\n    return result;\n  }; // Similar to FastPath.prototype.call, except that the value obtained by\n  // accessing this.getValue()[name1][name2]... should be array-like. The\n  // callback will be called with a reference to this path object for each\n  // element of the array.\n\n\n  FastPath.prototype.each = function each(callback\n  /*, name1, name2, ... */\n  ) {\n    var s = this.stack;\n    var origLen = s.length;\n    var value = s[origLen - 1];\n    var argc = arguments.length;\n\n    for (var i = 1; i < argc; ++i) {\n      var name = arguments[i];\n      value = value[name];\n      s.push(name, value);\n    }\n\n    for (var _i = 0; _i < value.length; ++_i) {\n      if (_i in value) {\n        s.push(_i, value[_i]); // If the callback needs to know the value of i, call\n        // path.getName(), assuming path is the parameter name.\n\n        callback(this);\n        s.length -= 2;\n      }\n    }\n\n    s.length = origLen;\n  }; // Similar to FastPath.prototype.each, except that the results of the\n  // callback function invocations are stored in an array and returned at\n  // the end of the iteration.\n\n\n  FastPath.prototype.map = function map(callback\n  /*, name1, name2, ... */\n  ) {\n    var s = this.stack;\n    var origLen = s.length;\n    var value = s[origLen - 1];\n    var argc = arguments.length;\n\n    for (var i = 1; i < argc; ++i) {\n      var name = arguments[i];\n      value = value[name];\n      s.push(name, value);\n    }\n\n    var result = new Array(value.length);\n\n    for (var _i2 = 0; _i2 < value.length; ++_i2) {\n      if (_i2 in value) {\n        s.push(_i2, value[_i2]);\n        result[_i2] = callback(this, _i2);\n        s.length -= 2;\n      }\n    }\n\n    s.length = origLen;\n    return result;\n  };\n\n  var fastPath = FastPath;\n\n  var normalize$2 = options$1.normalize;\n\n  function printSubtree(path, print, options, printAstToDoc) {\n    if (options.printer.embed) {\n      return options.printer.embed(path, print, function (text, partialNextOptions) {\n        return textToDoc(text, partialNextOptions, options, printAstToDoc);\n      }, options);\n    }\n  }\n\n  function textToDoc(text, partialNextOptions, parentOptions, printAstToDoc) {\n    var nextOptions = normalize$2(Object.assign({}, parentOptions, partialNextOptions, {\n      parentParser: parentOptions.parser,\n      embeddedInHtml: !!(parentOptions.embeddedInHtml || parentOptions.parser === \"html\" || parentOptions.parser === \"vue\" || parentOptions.parser === \"angular\" || parentOptions.parser === \"lwc\"),\n      originalText: text\n    }), {\n      passThrough: true\n    });\n    var result = parser.parse(text, nextOptions);\n    var ast = result.ast;\n    text = result.text;\n    var astComments = ast.comments;\n    delete ast.comments;\n    comments.attach(astComments, ast, text, nextOptions);\n    return printAstToDoc(ast, nextOptions);\n  }\n\n  var multiparser = {\n    printSubtree: printSubtree\n  };\n\n  var doc$1 = doc;\n  var docBuilders$1 = doc$1.builders;\n  var concat$3 = docBuilders$1.concat;\n  var hardline$2 = docBuilders$1.hardline;\n  var addAlignmentToDoc$1 = docBuilders$1.addAlignmentToDoc;\n  var docUtils$1 = doc$1.utils;\n  /**\n   * Takes an abstract syntax tree (AST) and recursively converts it to a\n   * document (series of printing primitives).\n   *\n   * This is done by descending down the AST recursively. The recursion\n   * involves two functions that call each other:\n   *\n   * 1. printGenerically(), which is defined as an inner function here.\n   *    It basically takes care of node caching.\n   * 2. callPluginPrintFunction(), which checks for some options, and\n   *    ultimately calls the print() function provided by the plugin.\n   *\n   * The plugin function will call printGenerically() again for child nodes\n   * of the current node, which will do its housekeeping, then call the\n   * plugin function again, and so on.\n   *\n   * All the while, these functions pass a \"path\" variable around, which\n   * is a stack-like data structure (FastPath) that maintains the current\n   * state of the recursion. It is called \"path\", because it represents\n   * the path to the current node through the Abstract Syntax Tree.\n   */\n\n  function printAstToDoc(ast, options) {\n    var alignmentSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var printer = options.printer;\n\n    if (printer.preprocess) {\n      ast = printer.preprocess(ast, options);\n    }\n\n    var cache = new Map();\n\n    function printGenerically(path, args) {\n      var node = path.getValue();\n      var shouldCache = node && _typeof(node) === \"object\" && args === undefined;\n\n      if (shouldCache && cache.has(node)) {\n        return cache.get(node);\n      } // We let JSXElement print its comments itself because it adds () around\n      // UnionTypeAnnotation has to align the child without the comments\n\n\n      var res;\n\n      if (printer.willPrintOwnComments && printer.willPrintOwnComments(path, options)) {\n        res = callPluginPrintFunction(path, options, printGenerically, args);\n      } else {\n        // printComments will call the plugin print function and check for\n        // comments to print\n        res = comments.printComments(path, function (p) {\n          return callPluginPrintFunction(p, options, printGenerically, args);\n        }, options, args && args.needsSemi);\n      }\n\n      if (shouldCache) {\n        cache.set(node, res);\n      }\n\n      return res;\n    }\n\n    var doc = printGenerically(new fastPath(ast));\n\n    if (alignmentSize > 0) {\n      // Add a hardline to make the indents take effect\n      // It should be removed in index.js format()\n      doc = addAlignmentToDoc$1(concat$3([hardline$2, doc]), alignmentSize, options.tabWidth);\n    }\n\n    docUtils$1.propagateBreaks(doc);\n    return doc;\n  }\n\n  function callPluginPrintFunction(path, options, printPath, args) {\n    assert.ok(path instanceof fastPath);\n    var node = path.getValue();\n    var printer = options.printer; // Escape hatch\n\n    if (printer.hasPrettierIgnore && printer.hasPrettierIgnore(path)) {\n      return options.originalText.slice(options.locStart(node), options.locEnd(node));\n    }\n\n    if (node) {\n      try {\n        // Potentially switch to a different parser\n        var sub = multiparser.printSubtree(path, printPath, options, printAstToDoc);\n\n        if (sub) {\n          return sub;\n        }\n      } catch (error) {\n        /* istanbul ignore if */\n        if (commonjsGlobal.PRETTIER_DEBUG) {\n          throw error;\n        } // Continue with current parser\n\n      }\n    }\n\n    return printer.print(path, options, printPath, args);\n  }\n\n  var astToDoc = printAstToDoc;\n\n  function findSiblingAncestors(startNodeAndParents, endNodeAndParents, opts) {\n    var resultStartNode = startNodeAndParents.node;\n    var resultEndNode = endNodeAndParents.node;\n\n    if (resultStartNode === resultEndNode) {\n      return {\n        startNode: resultStartNode,\n        endNode: resultEndNode\n      };\n    }\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = endNodeAndParents.parentNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var endParent = _step.value;\n\n        if (endParent.type !== \"Program\" && endParent.type !== \"File\" && opts.locStart(endParent) >= opts.locStart(startNodeAndParents.node)) {\n          resultEndNode = endParent;\n        } else {\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = startNodeAndParents.parentNodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var startParent = _step2.value;\n\n        if (startParent.type !== \"Program\" && startParent.type !== \"File\" && opts.locEnd(startParent) <= opts.locEnd(endNodeAndParents.node)) {\n          resultStartNode = startParent;\n        } else {\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    return {\n      startNode: resultStartNode,\n      endNode: resultEndNode\n    };\n  }\n\n  function findNodeAtOffset(node, offset, options, predicate, parentNodes) {\n    predicate = predicate || function () {\n      return true;\n    };\n\n    parentNodes = parentNodes || [];\n    var start = options.locStart(node, options.locStart);\n    var end = options.locEnd(node, options.locEnd);\n\n    if (start <= offset && offset <= end) {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = comments.getSortedChildNodes(node, options)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var childNode = _step3.value;\n          var childResult = findNodeAtOffset(childNode, offset, options, predicate, [node].concat(parentNodes));\n\n          if (childResult) {\n            return childResult;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      if (predicate(node)) {\n        return {\n          node: node,\n          parentNodes: parentNodes\n        };\n      }\n    }\n  } // See https://www.ecma-international.org/ecma-262/5.1/#sec-A.5\n\n\n  function isSourceElement(opts, node) {\n    if (node == null) {\n      return false;\n    } // JS and JS like to avoid repetitions\n\n\n    var jsSourceElements = [\"FunctionDeclaration\", \"BlockStatement\", \"BreakStatement\", \"ContinueStatement\", \"DebuggerStatement\", \"DoWhileStatement\", \"EmptyStatement\", \"ExpressionStatement\", \"ForInStatement\", \"ForStatement\", \"IfStatement\", \"LabeledStatement\", \"ReturnStatement\", \"SwitchStatement\", \"ThrowStatement\", \"TryStatement\", \"VariableDeclaration\", \"WhileStatement\", \"WithStatement\", \"ClassDeclaration\", // ES 2015\n    \"ImportDeclaration\", // Module\n    \"ExportDefaultDeclaration\", // Module\n    \"ExportNamedDeclaration\", // Module\n    \"ExportAllDeclaration\", // Module\n    \"TypeAlias\", // Flow\n    \"InterfaceDeclaration\", // Flow, TypeScript\n    \"TypeAliasDeclaration\", // TypeScript\n    \"ExportAssignment\", // TypeScript\n    \"ExportDeclaration\" // TypeScript\n    ];\n    var jsonSourceElements = [\"ObjectExpression\", \"ArrayExpression\", \"StringLiteral\", \"NumericLiteral\", \"BooleanLiteral\", \"NullLiteral\"];\n    var graphqlSourceElements = [\"OperationDefinition\", \"FragmentDefinition\", \"VariableDefinition\", \"TypeExtensionDefinition\", \"ObjectTypeDefinition\", \"FieldDefinition\", \"DirectiveDefinition\", \"EnumTypeDefinition\", \"EnumValueDefinition\", \"InputValueDefinition\", \"InputObjectTypeDefinition\", \"SchemaDefinition\", \"OperationTypeDefinition\", \"InterfaceTypeDefinition\", \"UnionTypeDefinition\", \"ScalarTypeDefinition\"];\n\n    switch (opts.parser) {\n      case \"flow\":\n      case \"babel\":\n      case \"typescript\":\n        return jsSourceElements.indexOf(node.type) > -1;\n\n      case \"json\":\n        return jsonSourceElements.indexOf(node.type) > -1;\n\n      case \"graphql\":\n        return graphqlSourceElements.indexOf(node.kind) > -1;\n\n      case \"vue\":\n        return node.tag !== \"root\";\n    }\n\n    return false;\n  }\n\n  function calculateRange(text, opts, ast) {\n    // Contract the range so that it has non-whitespace characters at its endpoints.\n    // This ensures we can format a range that doesn't end on a node.\n    var rangeStringOrig = text.slice(opts.rangeStart, opts.rangeEnd);\n    var startNonWhitespace = Math.max(opts.rangeStart + rangeStringOrig.search(/\\S/), opts.rangeStart);\n    var endNonWhitespace;\n\n    for (endNonWhitespace = opts.rangeEnd; endNonWhitespace > opts.rangeStart; --endNonWhitespace) {\n      if (text[endNonWhitespace - 1].match(/\\S/)) {\n        break;\n      }\n    }\n\n    var startNodeAndParents = findNodeAtOffset(ast, startNonWhitespace, opts, function (node) {\n      return isSourceElement(opts, node);\n    });\n    var endNodeAndParents = findNodeAtOffset(ast, endNonWhitespace, opts, function (node) {\n      return isSourceElement(opts, node);\n    });\n\n    if (!startNodeAndParents || !endNodeAndParents) {\n      return {\n        rangeStart: 0,\n        rangeEnd: 0\n      };\n    }\n\n    var siblingAncestors = findSiblingAncestors(startNodeAndParents, endNodeAndParents, opts);\n    var startNode = siblingAncestors.startNode,\n        endNode = siblingAncestors.endNode;\n    var rangeStart = Math.min(opts.locStart(startNode, opts.locStart), opts.locStart(endNode, opts.locStart));\n    var rangeEnd = Math.max(opts.locEnd(startNode, opts.locEnd), opts.locEnd(endNode, opts.locEnd));\n    return {\n      rangeStart: rangeStart,\n      rangeEnd: rangeEnd\n    };\n  }\n\n  var rangeUtil = {\n    calculateRange: calculateRange,\n    findNodeAtOffset: findNodeAtOffset\n  };\n\n  var diff = getCjsExportFromNamespace(index_es6);\n\n  var normalizeOptions$1 = options$1.normalize;\n  var guessEndOfLine$1 = endOfLine.guessEndOfLine,\n      convertEndOfLineToChars$2 = endOfLine.convertEndOfLineToChars;\n  var mapDoc$2 = doc.utils.mapDoc,\n      _printDocToString = doc.printer.printDocToString,\n      printDocToDebug = doc.debug.printDocToDebug;\n  var UTF8BOM = 0xfeff;\n  var CURSOR = Symbol(\"cursor\");\n  var PLACEHOLDERS = {\n    cursorOffset: \"<<<PRETTIER_CURSOR>>>\",\n    rangeStart: \"<<<PRETTIER_RANGE_START>>>\",\n    rangeEnd: \"<<<PRETTIER_RANGE_END>>>\"\n  };\n\n  function ensureAllCommentsPrinted(astComments) {\n    if (!astComments) {\n      return;\n    }\n\n    for (var i = 0; i < astComments.length; ++i) {\n      if (astComments[i].value.trim() === \"prettier-ignore\") {\n        // If there's a prettier-ignore, we're not printing that sub-tree so we\n        // don't know if the comments was printed or not.\n        return;\n      }\n    }\n\n    astComments.forEach(function (comment) {\n      if (!comment.printed) {\n        throw new Error('Comment \"' + comment.value.trim() + '\" was not printed. Please report this error!');\n      }\n\n      delete comment.printed;\n    });\n  }\n\n  function attachComments(text, ast, opts) {\n    var astComments = ast.comments;\n\n    if (astComments) {\n      delete ast.comments;\n      comments.attach(astComments, ast, text, opts);\n    }\n\n    ast.tokens = [];\n    opts.originalText = opts.parser === \"yaml\" ? text : text.trimRight();\n    return astComments;\n  }\n\n  function coreFormat(text, opts, addAlignmentSize) {\n    if (!text || !text.trim().length) {\n      return {\n        formatted: \"\",\n        cursorOffset: 0\n      };\n    }\n\n    addAlignmentSize = addAlignmentSize || 0;\n    var parsed = parser.parse(text, opts);\n    var ast = parsed.ast;\n    text = parsed.text;\n\n    if (opts.cursorOffset >= 0) {\n      var nodeResult = rangeUtil.findNodeAtOffset(ast, opts.cursorOffset, opts);\n\n      if (nodeResult && nodeResult.node) {\n        opts.cursorNode = nodeResult.node;\n      }\n    }\n\n    var astComments = attachComments(text, ast, opts);\n    var doc = astToDoc(ast, opts, addAlignmentSize);\n    var eol = convertEndOfLineToChars$2(opts.endOfLine);\n\n    var result = _printDocToString(opts.endOfLine === \"lf\" ? doc : mapDoc$2(doc, function (currentDoc) {\n      return typeof currentDoc === \"string\" && currentDoc.indexOf(\"\\n\") !== -1 ? currentDoc.replace(/\\n/g, eol) : currentDoc;\n    }), opts);\n\n    ensureAllCommentsPrinted(astComments); // Remove extra leading indentation as well as the added indentation after last newline\n\n    if (addAlignmentSize > 0) {\n      var trimmed = result.formatted.trim();\n\n      if (result.cursorNodeStart !== undefined) {\n        result.cursorNodeStart -= result.formatted.indexOf(trimmed);\n      }\n\n      result.formatted = trimmed + convertEndOfLineToChars$2(opts.endOfLine);\n    }\n\n    if (opts.cursorOffset >= 0) {\n      var oldCursorNodeStart;\n      var oldCursorNodeText;\n      var cursorOffsetRelativeToOldCursorNode;\n      var newCursorNodeStart;\n      var newCursorNodeText;\n\n      if (opts.cursorNode && result.cursorNodeText) {\n        oldCursorNodeStart = opts.locStart(opts.cursorNode);\n        oldCursorNodeText = text.slice(oldCursorNodeStart, opts.locEnd(opts.cursorNode));\n        cursorOffsetRelativeToOldCursorNode = opts.cursorOffset - oldCursorNodeStart;\n        newCursorNodeStart = result.cursorNodeStart;\n        newCursorNodeText = result.cursorNodeText;\n      } else {\n        oldCursorNodeStart = 0;\n        oldCursorNodeText = text;\n        cursorOffsetRelativeToOldCursorNode = opts.cursorOffset;\n        newCursorNodeStart = 0;\n        newCursorNodeText = result.formatted;\n      }\n\n      if (oldCursorNodeText === newCursorNodeText) {\n        return {\n          formatted: result.formatted,\n          cursorOffset: newCursorNodeStart + cursorOffsetRelativeToOldCursorNode\n        };\n      } // diff old and new cursor node texts, with a special cursor\n      // symbol inserted to find out where it moves to\n\n\n      var oldCursorNodeCharArray = oldCursorNodeText.split(\"\");\n      oldCursorNodeCharArray.splice(cursorOffsetRelativeToOldCursorNode, 0, CURSOR);\n      var newCursorNodeCharArray = newCursorNodeText.split(\"\");\n      var cursorNodeDiff = diff.diffArrays(oldCursorNodeCharArray, newCursorNodeCharArray);\n      var cursorOffset = newCursorNodeStart;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = cursorNodeDiff[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var entry = _step.value;\n\n          if (entry.removed) {\n            if (entry.value.indexOf(CURSOR) > -1) {\n              break;\n            }\n          } else {\n            cursorOffset += entry.count;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return {\n        formatted: result.formatted,\n        cursorOffset: cursorOffset\n      };\n    }\n\n    return {\n      formatted: result.formatted\n    };\n  }\n\n  function formatRange(text, opts) {\n    var parsed = parser.parse(text, opts);\n    var ast = parsed.ast;\n    text = parsed.text;\n    var range = rangeUtil.calculateRange(text, opts, ast);\n    var rangeStart = range.rangeStart;\n    var rangeEnd = range.rangeEnd;\n    var rangeString = text.slice(rangeStart, rangeEnd); // Try to extend the range backwards to the beginning of the line.\n    // This is so we can detect indentation correctly and restore it.\n    // Use `Math.min` since `lastIndexOf` returns 0 when `rangeStart` is 0\n\n    var rangeStart2 = Math.min(rangeStart, text.lastIndexOf(\"\\n\", rangeStart) + 1);\n    var indentString = text.slice(rangeStart2, rangeStart);\n    var alignmentSize = util.getAlignmentSize(indentString, opts.tabWidth);\n    var rangeResult = coreFormat(rangeString, Object.assign({}, opts, {\n      rangeStart: 0,\n      rangeEnd: Infinity,\n      // track the cursor offset only if it's within our range\n      cursorOffset: opts.cursorOffset >= rangeStart && opts.cursorOffset < rangeEnd ? opts.cursorOffset - rangeStart : -1\n    }), alignmentSize); // Since the range contracts to avoid trailing whitespace,\n    // we need to remove the newline that was inserted by the `format` call.\n\n    var rangeTrimmed = rangeResult.formatted.trimRight();\n    var rangeLeft = text.slice(0, rangeStart);\n    var rangeRight = text.slice(rangeEnd);\n    var cursorOffset = opts.cursorOffset;\n\n    if (opts.cursorOffset >= rangeEnd) {\n      // handle the case where the cursor was past the end of the range\n      cursorOffset = opts.cursorOffset - rangeEnd + (rangeStart + rangeTrimmed.length);\n    } else if (rangeResult.cursorOffset !== undefined) {\n      // handle the case where the cursor was in the range\n      cursorOffset = rangeResult.cursorOffset + rangeStart;\n    } // keep the cursor as it was if it was before the start of the range\n\n\n    var formatted;\n\n    if (opts.endOfLine === \"lf\") {\n      formatted = rangeLeft + rangeTrimmed + rangeRight;\n    } else {\n      var eol = convertEndOfLineToChars$2(opts.endOfLine);\n\n      if (cursorOffset >= 0) {\n        var parts = [rangeLeft, rangeTrimmed, rangeRight];\n        var partIndex = 0;\n        var partOffset = cursorOffset;\n\n        while (partIndex < parts.length) {\n          var part = parts[partIndex];\n\n          if (partOffset < part.length) {\n            parts[partIndex] = parts[partIndex].slice(0, partOffset) + PLACEHOLDERS.cursorOffset + parts[partIndex].slice(partOffset);\n            break;\n          }\n\n          partIndex++;\n          partOffset -= part.length;\n        }\n\n        var newRangeLeft = parts[0],\n            newRangeTrimmed = parts[1],\n            newRangeRight = parts[2];\n        formatted = (newRangeLeft.replace(/\\n/g, eol) + newRangeTrimmed + newRangeRight.replace(/\\n/g, eol)).replace(PLACEHOLDERS.cursorOffset, function (_, index) {\n          cursorOffset = index;\n          return \"\";\n        });\n      } else {\n        formatted = rangeLeft.replace(/\\n/g, eol) + rangeTrimmed + rangeRight.replace(/\\n/g, eol);\n      }\n    }\n\n    return {\n      formatted: formatted,\n      cursorOffset: cursorOffset\n    };\n  }\n\n  function format(text, opts) {\n    var selectedParser = parser.resolveParser(opts);\n    var hasPragma = !selectedParser.hasPragma || selectedParser.hasPragma(text);\n\n    if (opts.requirePragma && !hasPragma) {\n      return {\n        formatted: text\n      };\n    }\n\n    if (opts.endOfLine === \"auto\") {\n      opts.endOfLine = guessEndOfLine$1(text);\n    }\n\n    var hasCursor = opts.cursorOffset >= 0;\n    var hasRangeStart = opts.rangeStart > 0;\n    var hasRangeEnd = opts.rangeEnd < text.length; // get rid of CR/CRLF parsing\n\n    if (text.indexOf(\"\\r\") !== -1) {\n      var offsetKeys = [hasCursor && \"cursorOffset\", hasRangeStart && \"rangeStart\", hasRangeEnd && \"rangeEnd\"].filter(Boolean).sort(function (aKey, bKey) {\n        return opts[aKey] - opts[bKey];\n      });\n\n      for (var i = offsetKeys.length - 1; i >= 0; i--) {\n        var key = offsetKeys[i];\n        text = text.slice(0, opts[key]) + PLACEHOLDERS[key] + text.slice(opts[key]);\n      }\n\n      text = text.replace(/\\r\\n?/g, \"\\n\");\n\n      var _loop = function _loop(_i) {\n        var key = offsetKeys[_i];\n        text = text.replace(PLACEHOLDERS[key], function (_, index) {\n          opts[key] = index;\n          return \"\";\n        });\n      };\n\n      for (var _i = 0; _i < offsetKeys.length; _i++) {\n        _loop(_i);\n      }\n    }\n\n    var hasUnicodeBOM = text.charCodeAt(0) === UTF8BOM;\n\n    if (hasUnicodeBOM) {\n      text = text.substring(1);\n\n      if (hasCursor) {\n        opts.cursorOffset++;\n      }\n\n      if (hasRangeStart) {\n        opts.rangeStart++;\n      }\n\n      if (hasRangeEnd) {\n        opts.rangeEnd++;\n      }\n    }\n\n    if (!hasCursor) {\n      opts.cursorOffset = -1;\n    }\n\n    if (opts.rangeStart < 0) {\n      opts.rangeStart = 0;\n    }\n\n    if (opts.rangeEnd > text.length) {\n      opts.rangeEnd = text.length;\n    }\n\n    var result = hasRangeStart || hasRangeEnd ? formatRange(text, opts) : coreFormat(opts.insertPragma && opts.printer.insertPragma && !hasPragma ? opts.printer.insertPragma(text) : text, opts);\n\n    if (hasUnicodeBOM) {\n      result.formatted = String.fromCharCode(UTF8BOM) + result.formatted;\n\n      if (hasCursor) {\n        result.cursorOffset++;\n      }\n    }\n\n    return result;\n  }\n\n  var core = {\n    formatWithCursor: function formatWithCursor(text, opts) {\n      opts = normalizeOptions$1(opts);\n      return format(text, opts);\n    },\n    parse: function parse(text, opts, massage) {\n      opts = normalizeOptions$1(opts);\n\n      if (text.indexOf(\"\\r\") !== -1) {\n        text = text.replace(/\\r\\n?/g, \"\\n\");\n      }\n\n      var parsed = parser.parse(text, opts);\n\n      if (massage) {\n        parsed.ast = massageAst(parsed.ast, opts);\n      }\n\n      return parsed;\n    },\n    formatAST: function formatAST(ast, opts) {\n      opts = normalizeOptions$1(opts);\n      var doc = astToDoc(ast, opts);\n      return _printDocToString(doc, opts);\n    },\n    // Doesn't handle shebang for now\n    formatDoc: function formatDoc(doc, opts) {\n      var debug = printDocToDebug(doc);\n      opts = normalizeOptions$1(Object.assign({}, opts, {\n        parser: \"babel\"\n      }));\n      return format(debug, opts).formatted;\n    },\n    printToDoc: function printToDoc(text, opts) {\n      opts = normalizeOptions$1(opts);\n      var parsed = parser.parse(text, opts);\n      var ast = parsed.ast;\n      text = parsed.text;\n      attachComments(text, ast, opts);\n      return astToDoc(ast, opts);\n    },\n    printDocToString: function printDocToString(doc, opts) {\n      return _printDocToString(doc, normalizeOptions$1(opts));\n    }\n  };\n\n  var index = [\n  \t\"a\",\n  \t\"abbr\",\n  \t\"acronym\",\n  \t\"address\",\n  \t\"applet\",\n  \t\"area\",\n  \t\"article\",\n  \t\"aside\",\n  \t\"audio\",\n  \t\"b\",\n  \t\"base\",\n  \t\"basefont\",\n  \t\"bdi\",\n  \t\"bdo\",\n  \t\"bgsound\",\n  \t\"big\",\n  \t\"blink\",\n  \t\"blockquote\",\n  \t\"body\",\n  \t\"br\",\n  \t\"button\",\n  \t\"canvas\",\n  \t\"caption\",\n  \t\"center\",\n  \t\"cite\",\n  \t\"code\",\n  \t\"col\",\n  \t\"colgroup\",\n  \t\"command\",\n  \t\"content\",\n  \t\"data\",\n  \t\"datalist\",\n  \t\"dd\",\n  \t\"del\",\n  \t\"details\",\n  \t\"dfn\",\n  \t\"dialog\",\n  \t\"dir\",\n  \t\"div\",\n  \t\"dl\",\n  \t\"dt\",\n  \t\"element\",\n  \t\"em\",\n  \t\"embed\",\n  \t\"fieldset\",\n  \t\"figcaption\",\n  \t\"figure\",\n  \t\"font\",\n  \t\"footer\",\n  \t\"form\",\n  \t\"frame\",\n  \t\"frameset\",\n  \t\"h1\",\n  \t\"h2\",\n  \t\"h3\",\n  \t\"h4\",\n  \t\"h5\",\n  \t\"h6\",\n  \t\"head\",\n  \t\"header\",\n  \t\"hgroup\",\n  \t\"hr\",\n  \t\"html\",\n  \t\"i\",\n  \t\"iframe\",\n  \t\"image\",\n  \t\"img\",\n  \t\"input\",\n  \t\"ins\",\n  \t\"isindex\",\n  \t\"kbd\",\n  \t\"keygen\",\n  \t\"label\",\n  \t\"legend\",\n  \t\"li\",\n  \t\"link\",\n  \t\"listing\",\n  \t\"main\",\n  \t\"map\",\n  \t\"mark\",\n  \t\"marquee\",\n  \t\"math\",\n  \t\"menu\",\n  \t\"menuitem\",\n  \t\"meta\",\n  \t\"meter\",\n  \t\"multicol\",\n  \t\"nav\",\n  \t\"nextid\",\n  \t\"nobr\",\n  \t\"noembed\",\n  \t\"noframes\",\n  \t\"noscript\",\n  \t\"object\",\n  \t\"ol\",\n  \t\"optgroup\",\n  \t\"option\",\n  \t\"output\",\n  \t\"p\",\n  \t\"param\",\n  \t\"picture\",\n  \t\"plaintext\",\n  \t\"pre\",\n  \t\"progress\",\n  \t\"q\",\n  \t\"rb\",\n  \t\"rbc\",\n  \t\"rp\",\n  \t\"rt\",\n  \t\"rtc\",\n  \t\"ruby\",\n  \t\"s\",\n  \t\"samp\",\n  \t\"script\",\n  \t\"section\",\n  \t\"select\",\n  \t\"shadow\",\n  \t\"slot\",\n  \t\"small\",\n  \t\"source\",\n  \t\"spacer\",\n  \t\"span\",\n  \t\"strike\",\n  \t\"strong\",\n  \t\"style\",\n  \t\"sub\",\n  \t\"summary\",\n  \t\"sup\",\n  \t\"svg\",\n  \t\"table\",\n  \t\"tbody\",\n  \t\"td\",\n  \t\"template\",\n  \t\"textarea\",\n  \t\"tfoot\",\n  \t\"th\",\n  \t\"thead\",\n  \t\"time\",\n  \t\"title\",\n  \t\"tr\",\n  \t\"track\",\n  \t\"tt\",\n  \t\"u\",\n  \t\"ul\",\n  \t\"var\",\n  \t\"video\",\n  \t\"wbr\",\n  \t\"xmp\"\n  ];\n\n  var htmlTagNames = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    'default': index\n  });\n\n  var htmlTagNames$1 = getCjsExportFromNamespace(htmlTagNames);\n\n  function clean(ast, newObj, parent) {\n    [\"raw\", // front-matter\n    \"raws\", \"sourceIndex\", \"source\", \"before\", \"after\", \"trailingComma\"].forEach(function (name) {\n      delete newObj[name];\n    });\n\n    if (ast.type === \"yaml\") {\n      delete newObj.value;\n    } // --insert-pragma\n\n\n    if (ast.type === \"css-comment\" && parent.type === \"css-root\" && parent.nodes.length !== 0 && ( // first non-front-matter comment\n    parent.nodes[0] === ast || (parent.nodes[0].type === \"yaml\" || parent.nodes[0].type === \"toml\") && parent.nodes[1] === ast)) {\n      /**\n       * something\n       *\n       * @format\n       */\n      delete newObj.text; // standalone pragma\n\n      if (/^\\*\\s*@(format|prettier)\\s*$/.test(ast.text)) {\n        return null;\n      }\n    }\n\n    if (ast.type === \"media-query\" || ast.type === \"media-query-list\" || ast.type === \"media-feature-expression\") {\n      delete newObj.value;\n    }\n\n    if (ast.type === \"css-rule\") {\n      delete newObj.params;\n    }\n\n    if (ast.type === \"selector-combinator\") {\n      newObj.value = newObj.value.replace(/\\s+/g, \" \");\n    }\n\n    if (ast.type === \"media-feature\") {\n      newObj.value = newObj.value.replace(/ /g, \"\");\n    }\n\n    if (ast.type === \"value-word\" && (ast.isColor && ast.isHex || [\"initial\", \"inherit\", \"unset\", \"revert\"].indexOf(newObj.value.replace().toLowerCase()) !== -1) || ast.type === \"media-feature\" || ast.type === \"selector-root-invalid\" || ast.type === \"selector-pseudo\") {\n      newObj.value = newObj.value.toLowerCase();\n    }\n\n    if (ast.type === \"css-decl\") {\n      newObj.prop = newObj.prop.toLowerCase();\n    }\n\n    if (ast.type === \"css-atrule\" || ast.type === \"css-import\") {\n      newObj.name = newObj.name.toLowerCase();\n    }\n\n    if (ast.type === \"value-number\") {\n      newObj.unit = newObj.unit.toLowerCase();\n    }\n\n    if ((ast.type === \"media-feature\" || ast.type === \"media-keyword\" || ast.type === \"media-type\" || ast.type === \"media-unknown\" || ast.type === \"media-url\" || ast.type === \"media-value\" || ast.type === \"selector-attribute\" || ast.type === \"selector-string\" || ast.type === \"selector-class\" || ast.type === \"selector-combinator\" || ast.type === \"value-string\") && newObj.value) {\n      newObj.value = cleanCSSStrings(newObj.value);\n    }\n\n    if (ast.type === \"selector-attribute\") {\n      newObj.attribute = newObj.attribute.trim();\n\n      if (newObj.namespace) {\n        if (typeof newObj.namespace === \"string\") {\n          newObj.namespace = newObj.namespace.trim();\n\n          if (newObj.namespace.length === 0) {\n            newObj.namespace = true;\n          }\n        }\n      }\n\n      if (newObj.value) {\n        newObj.value = newObj.value.trim().replace(/^['\"]|['\"]$/g, \"\");\n        delete newObj.quoted;\n      }\n    }\n\n    if ((ast.type === \"media-value\" || ast.type === \"media-type\" || ast.type === \"value-number\" || ast.type === \"selector-root-invalid\" || ast.type === \"selector-class\" || ast.type === \"selector-combinator\" || ast.type === \"selector-tag\") && newObj.value) {\n      newObj.value = newObj.value.replace(/([\\d.eE+-]+)([a-zA-Z]*)/g, function (match, numStr, unit) {\n        var num = Number(numStr);\n        return isNaN(num) ? match : num + unit.toLowerCase();\n      });\n    }\n\n    if (ast.type === \"selector-tag\") {\n      var lowercasedValue = ast.value.toLowerCase();\n\n      if (htmlTagNames$1.indexOf(lowercasedValue) !== -1) {\n        newObj.value = lowercasedValue;\n      }\n\n      if ([\"from\", \"to\"].indexOf(lowercasedValue) !== -1) {\n        newObj.value = lowercasedValue;\n      }\n    } // Workaround when `postcss-values-parser` parse `not`, `and` or `or` keywords as `value-func`\n\n\n    if (ast.type === \"css-atrule\" && ast.name.toLowerCase() === \"supports\") {\n      delete newObj.value;\n    } // Workaround for SCSS nested properties\n\n\n    if (ast.type === \"selector-unknown\") {\n      delete newObj.value;\n    }\n  }\n\n  function cleanCSSStrings(value) {\n    return value.replace(/'/g, '\"').replace(/\\\\([^a-fA-F\\d])/g, \"$1\");\n  }\n\n  var clean_1 = clean;\n\n  var _require$$0$builders$1 = doc.builders,\n      hardline$3 = _require$$0$builders$1.hardline,\n      literalline$1 = _require$$0$builders$1.literalline,\n      concat$4 = _require$$0$builders$1.concat,\n      markAsRoot$1 = _require$$0$builders$1.markAsRoot,\n      mapDoc$3 = doc.utils.mapDoc;\n\n  function embed(path, print, textToDoc\n  /*, options */\n  ) {\n    var node = path.getValue();\n\n    if (node.type === \"yaml\") {\n      return markAsRoot$1(concat$4([\"---\", hardline$3, node.value.trim() ? replaceNewlinesWithLiterallines(textToDoc(node.value, {\n        parser: \"yaml\"\n      })) : \"\", \"---\", hardline$3]));\n    }\n\n    return null;\n\n    function replaceNewlinesWithLiterallines(doc) {\n      return mapDoc$3(doc, function (currentDoc) {\n        return typeof currentDoc === \"string\" && currentDoc.includes(\"\\n\") ? concat$4(currentDoc.split(/(\\n)/g).map(function (v, i) {\n          return i % 2 === 0 ? v : literalline$1;\n        })) : currentDoc;\n      });\n    }\n  }\n\n  var embed_1 = embed;\n\n  var detectNewline = createCommonjsModule(function (module) {\n\n    module.exports = function (str) {\n      if (typeof str !== 'string') {\n        throw new TypeError('Expected a string');\n      }\n\n      var newlines = str.match(/(?:\\r?\\n)/g) || [];\n\n      if (newlines.length === 0) {\n        return null;\n      }\n\n      var crlf = newlines.filter(function (el) {\n        return el === '\\r\\n';\n      }).length;\n      var lf = newlines.length - crlf;\n      return crlf > lf ? '\\r\\n' : '\\n';\n    };\n\n    module.exports.graceful = function (str) {\n      return module.exports(str) || '\\n';\n    };\n  });\n  var detectNewline_1 = detectNewline.graceful;\n\n  var build = createCommonjsModule(function (module, exports) {\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    exports.extract = extract;\n    exports.strip = strip;\n    exports.parse = parse;\n    exports.parseWithComments = parseWithComments;\n    exports.print = print;\n\n    function _os() {\n      var data = require$$0$1;\n\n      _os = function _os() {\n        return data;\n      };\n\n      return data;\n    }\n\n    function _detectNewline() {\n      var data = _interopRequireDefault(detectNewline);\n\n      _detectNewline = function _detectNewline() {\n        return data;\n      };\n\n      return data;\n    }\n\n    function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n        default: obj\n      };\n    }\n    /**\n     * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     */\n\n\n    var commentEndRe = /\\*\\/$/;\n    var commentStartRe = /^\\/\\*\\*/;\n    var docblockRe = /^\\s*(\\/\\*\\*?(.|\\r?\\n)*?\\*\\/)/;\n    var lineCommentRe = /(^|\\s+)\\/\\/([^\\r\\n]*)/g;\n    var ltrimNewlineRe = /^(\\r?\\n)+/;\n    var multilineRe = /(?:^|\\r?\\n) *(@[^\\r\\n]*?) *\\r?\\n *(?![^@\\r\\n]*\\/\\/[^]*)([^@\\r\\n\\s][^@\\r\\n]+?) *\\r?\\n/g;\n    var propertyRe = /(?:^|\\r?\\n) *@(\\S+) *([^\\r\\n]*)/g;\n    var stringStartRe = /(\\r?\\n|^) *\\* ?/g;\n\n    function extract(contents) {\n      var match = contents.match(docblockRe);\n      return match ? match[0].trimLeft() : '';\n    }\n\n    function strip(contents) {\n      var match = contents.match(docblockRe);\n      return match && match[0] ? contents.substring(match[0].length) : contents;\n    }\n\n    function parse(docblock) {\n      return parseWithComments(docblock).pragmas;\n    }\n\n    function parseWithComments(docblock) {\n      var line = (0, _detectNewline().default)(docblock) || _os().EOL;\n\n      docblock = docblock.replace(commentStartRe, '').replace(commentEndRe, '').replace(stringStartRe, '$1'); // Normalize multi-line directives\n\n      var prev = '';\n\n      while (prev !== docblock) {\n        prev = docblock;\n        docblock = docblock.replace(multilineRe, \"\".concat(line, \"$1 $2\").concat(line));\n      }\n\n      docblock = docblock.replace(ltrimNewlineRe, '').trimRight();\n      var result = Object.create(null);\n      var comments = docblock.replace(propertyRe, '').replace(ltrimNewlineRe, '').trimRight();\n      var match;\n\n      while (match = propertyRe.exec(docblock)) {\n        // strip linecomments from pragmas\n        var nextPragma = match[2].replace(lineCommentRe, '');\n\n        if (typeof result[match[1]] === 'string' || Array.isArray(result[match[1]])) {\n          result[match[1]] = [].concat(result[match[1]], nextPragma);\n        } else {\n          result[match[1]] = nextPragma;\n        }\n      }\n\n      return {\n        comments: comments,\n        pragmas: result\n      };\n    }\n\n    function print(_ref) {\n      var _ref$comments = _ref.comments,\n          comments = _ref$comments === void 0 ? '' : _ref$comments,\n          _ref$pragmas = _ref.pragmas,\n          pragmas = _ref$pragmas === void 0 ? {} : _ref$pragmas;\n\n      var line = (0, _detectNewline().default)(comments) || _os().EOL;\n\n      var head = '/**';\n      var start = ' *';\n      var tail = ' */';\n      var keys = Object.keys(pragmas);\n      var printedObject = keys.map(function (key) {\n        return printKeyValues(key, pragmas[key]);\n      }).reduce(function (arr, next) {\n        return arr.concat(next);\n      }, []).map(function (keyValue) {\n        return start + ' ' + keyValue + line;\n      }).join('');\n\n      if (!comments) {\n        if (keys.length === 0) {\n          return '';\n        }\n\n        if (keys.length === 1 && !Array.isArray(pragmas[keys[0]])) {\n          var value = pragmas[keys[0]];\n          return \"\".concat(head, \" \").concat(printKeyValues(keys[0], value)[0]).concat(tail);\n        }\n      }\n\n      var printedComments = comments.split(line).map(function (textLine) {\n        return \"\".concat(start, \" \").concat(textLine);\n      }).join(line) + line;\n      return head + line + (comments ? printedComments : '') + (comments && keys.length ? start + line : '') + printedObject + tail;\n    }\n\n    function printKeyValues(key, valueOrArray) {\n      return [].concat(valueOrArray).map(function (value) {\n        return \"@\".concat(key, \" \").concat(value).trim();\n      });\n    }\n  });\n  unwrapExports(build);\n  var build_1 = build.extract;\n  var build_2 = build.strip;\n  var build_3 = build.parse;\n  var build_4 = build.parseWithComments;\n  var build_5 = build.print;\n\n  function hasPragma(text) {\n    var pragmas = Object.keys(build.parse(build.extract(text)));\n    return pragmas.indexOf(\"prettier\") !== -1 || pragmas.indexOf(\"format\") !== -1;\n  }\n\n  function insertPragma(text) {\n    var parsedDocblock = build.parseWithComments(build.extract(text));\n    var pragmas = Object.assign({\n      format: \"\"\n    }, parsedDocblock.pragmas);\n    var newDocblock = build.print({\n      pragmas: pragmas,\n      comments: parsedDocblock.comments.replace(/^(\\s+?\\r?\\n)+/, \"\") // remove leading newlines\n\n    }).replace(/(\\r\\n|\\r)/g, \"\\n\"); // normalise newlines (mitigate use of os.EOL by jest-docblock)\n\n    var strippedText = build.strip(text);\n    var separatingNewlines = strippedText.startsWith(\"\\n\") ? \"\\n\" : \"\\n\\n\";\n    return newDocblock + separatingNewlines + strippedText;\n  }\n\n  var pragma = {\n    hasPragma: hasPragma,\n    insertPragma: insertPragma\n  };\n\n  var DELIMITER_MAP = {\n    \"---\": \"yaml\",\n    \"+++\": \"toml\"\n  };\n\n  function parse$1(text) {\n    var delimiterRegex = Object.keys(DELIMITER_MAP).map(escapeStringRegexp).join(\"|\");\n    var match = text.match( // trailing spaces after delimiters are allowed\n    new RegExp(\"^(\".concat(delimiterRegex, \")[^\\\\n\\\\S]*\\\\n(?:([\\\\s\\\\S]*?)\\\\n)?\\\\1[^\\\\n\\\\S]*(\\\\n|$)\")));\n\n    if (match === null) {\n      return {\n        frontMatter: null,\n        content: text\n      };\n    }\n\n    var raw = match[0].replace(/\\n$/, \"\");\n    var delimiter = match[1];\n    var value = match[2];\n    return {\n      frontMatter: {\n        type: DELIMITER_MAP[delimiter],\n        value: value,\n        raw: raw\n      },\n      content: match[0].replace(/[^\\n]/g, \" \") + text.slice(match[0].length)\n    };\n  }\n\n  var frontMatter = parse$1;\n\n  function hasPragma$1(text) {\n    return pragma.hasPragma(frontMatter(text).content);\n  }\n\n  function insertPragma$1(text) {\n    var _parseFrontMatter = frontMatter(text),\n        frontMatter$1 = _parseFrontMatter.frontMatter,\n        content = _parseFrontMatter.content;\n\n    return (frontMatter$1 ? frontMatter$1.raw + \"\\n\\n\" : \"\") + pragma.insertPragma(content);\n  }\n\n  var pragma$1 = {\n    hasPragma: hasPragma$1,\n    insertPragma: insertPragma$1\n  };\n\n  var colorAdjusterFunctions = [\"red\", \"green\", \"blue\", \"alpha\", \"a\", \"rgb\", \"hue\", \"h\", \"saturation\", \"s\", \"lightness\", \"l\", \"whiteness\", \"w\", \"blackness\", \"b\", \"tint\", \"shade\", \"blend\", \"blenda\", \"contrast\", \"hsl\", \"hsla\", \"hwb\", \"hwba\"];\n\n  function getAncestorCounter(path, typeOrTypes) {\n    var types = [].concat(typeOrTypes);\n    var counter = -1;\n    var ancestorNode;\n\n    while (ancestorNode = path.getParentNode(++counter)) {\n      if (types.indexOf(ancestorNode.type) !== -1) {\n        return counter;\n      }\n    }\n\n    return -1;\n  }\n\n  function getAncestorNode(path, typeOrTypes) {\n    var counter = getAncestorCounter(path, typeOrTypes);\n    return counter === -1 ? null : path.getParentNode(counter);\n  }\n\n  function getPropOfDeclNode(path) {\n    var declAncestorNode = getAncestorNode(path, \"css-decl\");\n    return declAncestorNode && declAncestorNode.prop && declAncestorNode.prop.toLowerCase();\n  }\n\n  function isSCSS(parser, text) {\n    var hasExplicitParserChoice = parser === \"less\" || parser === \"scss\";\n    var IS_POSSIBLY_SCSS = /(\\w\\s*: [^}:]+|#){|@import[^\\n]+(url|,)/;\n    return hasExplicitParserChoice ? parser === \"scss\" : IS_POSSIBLY_SCSS.test(text);\n  }\n\n  function isWideKeywords(value) {\n    return [\"initial\", \"inherit\", \"unset\", \"revert\"].indexOf(value.toLowerCase()) !== -1;\n  }\n\n  function isKeyframeAtRuleKeywords(path, value) {\n    var atRuleAncestorNode = getAncestorNode(path, \"css-atrule\");\n    return atRuleAncestorNode && atRuleAncestorNode.name && atRuleAncestorNode.name.toLowerCase().endsWith(\"keyframes\") && [\"from\", \"to\"].indexOf(value.toLowerCase()) !== -1;\n  }\n\n  function maybeToLowerCase(value) {\n    return value.includes(\"$\") || value.includes(\"@\") || value.includes(\"#\") || value.startsWith(\"%\") || value.startsWith(\"--\") || value.startsWith(\":--\") || value.includes(\"(\") && value.includes(\")\") ? value : value.toLowerCase();\n  }\n\n  function insideValueFunctionNode(path, functionName) {\n    var funcAncestorNode = getAncestorNode(path, \"value-func\");\n    return funcAncestorNode && funcAncestorNode.value && funcAncestorNode.value.toLowerCase() === functionName;\n  }\n\n  function insideICSSRuleNode(path) {\n    var ruleAncestorNode = getAncestorNode(path, \"css-rule\");\n    return ruleAncestorNode && ruleAncestorNode.raws && ruleAncestorNode.raws.selector && (ruleAncestorNode.raws.selector.startsWith(\":import\") || ruleAncestorNode.raws.selector.startsWith(\":export\"));\n  }\n\n  function insideAtRuleNode(path, atRuleNameOrAtRuleNames) {\n    var atRuleNames = [].concat(atRuleNameOrAtRuleNames);\n    var atRuleAncestorNode = getAncestorNode(path, \"css-atrule\");\n    return atRuleAncestorNode && atRuleNames.indexOf(atRuleAncestorNode.name.toLowerCase()) !== -1;\n  }\n\n  function insideURLFunctionInImportAtRuleNode(path) {\n    var node = path.getValue();\n    var atRuleAncestorNode = getAncestorNode(path, \"css-atrule\");\n    return atRuleAncestorNode && atRuleAncestorNode.name === \"import\" && node.groups[0].value === \"url\" && node.groups.length === 2;\n  }\n\n  function isURLFunctionNode(node) {\n    return node.type === \"value-func\" && node.value.toLowerCase() === \"url\";\n  }\n\n  function isLastNode(path, node) {\n    var parentNode = path.getParentNode();\n\n    if (!parentNode) {\n      return false;\n    }\n\n    var nodes = parentNode.nodes;\n    return nodes && nodes.indexOf(node) === nodes.length - 1;\n  }\n\n  function isHTMLTag(value) {\n    return htmlTagNames$1.indexOf(value.toLowerCase()) !== -1;\n  }\n\n  function isDetachedRulesetDeclarationNode(node) {\n    // If a Less file ends up being parsed with the SCSS parser, Less\n    // variable declarations will be parsed as atrules with names ending\n    // with a colon, so keep the original case then.\n    if (!node.selector) {\n      return false;\n    }\n\n    return typeof node.selector === \"string\" && /^@.+:.*$/.test(node.selector) || node.selector.value && /^@.+:.*$/.test(node.selector.value);\n  }\n\n  function isForKeywordNode(node) {\n    return node.type === \"value-word\" && [\"from\", \"through\", \"end\"].indexOf(node.value) !== -1;\n  }\n\n  function isIfElseKeywordNode(node) {\n    return node.type === \"value-word\" && [\"and\", \"or\", \"not\"].indexOf(node.value) !== -1;\n  }\n\n  function isEachKeywordNode(node) {\n    return node.type === \"value-word\" && node.value === \"in\";\n  }\n\n  function isMultiplicationNode(node) {\n    return node.type === \"value-operator\" && node.value === \"*\";\n  }\n\n  function isDivisionNode(node) {\n    return node.type === \"value-operator\" && node.value === \"/\";\n  }\n\n  function isAdditionNode(node) {\n    return node.type === \"value-operator\" && node.value === \"+\";\n  }\n\n  function isSubtractionNode(node) {\n    return node.type === \"value-operator\" && node.value === \"-\";\n  }\n\n  function isModuloNode(node) {\n    return node.type === \"value-operator\" && node.value === \"%\";\n  }\n\n  function isMathOperatorNode(node) {\n    return isMultiplicationNode(node) || isDivisionNode(node) || isAdditionNode(node) || isSubtractionNode(node) || isModuloNode(node);\n  }\n\n  function isEqualityOperatorNode(node) {\n    return node.type === \"value-word\" && [\"==\", \"!=\"].indexOf(node.value) !== -1;\n  }\n\n  function isRelationalOperatorNode(node) {\n    return node.type === \"value-word\" && [\"<\", \">\", \"<=\", \">=\"].indexOf(node.value) !== -1;\n  }\n\n  function isSCSSControlDirectiveNode(node) {\n    return node.type === \"css-atrule\" && [\"if\", \"else\", \"for\", \"each\", \"while\"].indexOf(node.name) !== -1;\n  }\n\n  function isSCSSNestedPropertyNode(node) {\n    if (!node.selector) {\n      return false;\n    }\n\n    return node.selector.replace(/\\/\\*.*?\\*\\//, \"\").replace(/\\/\\/.*?\\n/, \"\").trim().endsWith(\":\");\n  }\n\n  function isDetachedRulesetCallNode(node) {\n    return node.raws && node.raws.params && /^\\(\\s*\\)$/.test(node.raws.params);\n  }\n\n  function isTemplatePlaceholderNode(node) {\n    return node.name.startsWith(\"prettier-placeholder\");\n  }\n\n  function isTemplatePropNode(node) {\n    return node.prop.startsWith(\"@prettier-placeholder\");\n  }\n\n  function isPostcssSimpleVarNode(currentNode, nextNode) {\n    return currentNode.value === \"$$\" && currentNode.type === \"value-func\" && nextNode && nextNode.type === \"value-word\" && !nextNode.raws.before;\n  }\n\n  function hasComposesNode(node) {\n    return node.value && node.value.type === \"value-root\" && node.value.group && node.value.group.type === \"value-value\" && node.prop.toLowerCase() === \"composes\";\n  }\n\n  function hasParensAroundNode(node) {\n    return node.value && node.value.group && node.value.group.group && node.value.group.group.type === \"value-paren_group\" && node.value.group.group.open !== null && node.value.group.group.close !== null;\n  }\n\n  function hasEmptyRawBefore(node) {\n    return node.raws && node.raws.before === \"\";\n  }\n\n  function isKeyValuePairNode(node) {\n    return node.type === \"value-comma_group\" && node.groups && node.groups[1] && node.groups[1].type === \"value-colon\";\n  }\n\n  function isKeyValuePairInParenGroupNode(node) {\n    return node.type === \"value-paren_group\" && node.groups && node.groups[0] && isKeyValuePairNode(node.groups[0]);\n  }\n\n  function isSCSSMapItemNode(path) {\n    var node = path.getValue(); // Ignore empty item (i.e. `$key: ()`)\n\n    if (node.groups.length === 0) {\n      return false;\n    }\n\n    var parentParentNode = path.getParentNode(1); // Check open parens contain key/value pair (i.e. `(key: value)` and `(key: (value, other-value)`)\n\n    if (!isKeyValuePairInParenGroupNode(node) && !(parentParentNode && isKeyValuePairInParenGroupNode(parentParentNode))) {\n      return false;\n    }\n\n    var declNode = getAncestorNode(path, \"css-decl\"); // SCSS map declaration (i.e. `$map: (key: value, other-key: other-value)`)\n\n    if (declNode && declNode.prop && declNode.prop.startsWith(\"$\")) {\n      return true;\n    } // List as value of key inside SCSS map (i.e. `$map: (key: (value other-value other-other-value))`)\n\n\n    if (isKeyValuePairInParenGroupNode(parentParentNode)) {\n      return true;\n    } // SCSS Map is argument of function (i.e. `func((key: value, other-key: other-value))`)\n\n\n    if (parentParentNode.type === \"value-func\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  function isInlineValueCommentNode(node) {\n    return node.type === \"value-comment\" && node.inline;\n  }\n\n  function isHashNode(node) {\n    return node.type === \"value-word\" && node.value === \"#\";\n  }\n\n  function isLeftCurlyBraceNode(node) {\n    return node.type === \"value-word\" && node.value === \"{\";\n  }\n\n  function isRightCurlyBraceNode(node) {\n    return node.type === \"value-word\" && node.value === \"}\";\n  }\n\n  function isWordNode(node) {\n    return [\"value-word\", \"value-atword\"].indexOf(node.type) !== -1;\n  }\n\n  function isColonNode(node) {\n    return node.type === \"value-colon\";\n  }\n\n  function isMediaAndSupportsKeywords(node) {\n    return node.value && [\"not\", \"and\", \"or\"].indexOf(node.value.toLowerCase()) !== -1;\n  }\n\n  function isColorAdjusterFuncNode(node) {\n    if (node.type !== \"value-func\") {\n      return false;\n    }\n\n    return colorAdjusterFunctions.indexOf(node.value.toLowerCase()) !== -1;\n  }\n\n  var utils$2 = {\n    getAncestorCounter: getAncestorCounter,\n    getAncestorNode: getAncestorNode,\n    getPropOfDeclNode: getPropOfDeclNode,\n    maybeToLowerCase: maybeToLowerCase,\n    insideValueFunctionNode: insideValueFunctionNode,\n    insideICSSRuleNode: insideICSSRuleNode,\n    insideAtRuleNode: insideAtRuleNode,\n    insideURLFunctionInImportAtRuleNode: insideURLFunctionInImportAtRuleNode,\n    isKeyframeAtRuleKeywords: isKeyframeAtRuleKeywords,\n    isHTMLTag: isHTMLTag,\n    isWideKeywords: isWideKeywords,\n    isSCSS: isSCSS,\n    isLastNode: isLastNode,\n    isSCSSControlDirectiveNode: isSCSSControlDirectiveNode,\n    isDetachedRulesetDeclarationNode: isDetachedRulesetDeclarationNode,\n    isRelationalOperatorNode: isRelationalOperatorNode,\n    isEqualityOperatorNode: isEqualityOperatorNode,\n    isMultiplicationNode: isMultiplicationNode,\n    isDivisionNode: isDivisionNode,\n    isAdditionNode: isAdditionNode,\n    isSubtractionNode: isSubtractionNode,\n    isModuloNode: isModuloNode,\n    isMathOperatorNode: isMathOperatorNode,\n    isEachKeywordNode: isEachKeywordNode,\n    isForKeywordNode: isForKeywordNode,\n    isURLFunctionNode: isURLFunctionNode,\n    isIfElseKeywordNode: isIfElseKeywordNode,\n    hasComposesNode: hasComposesNode,\n    hasParensAroundNode: hasParensAroundNode,\n    hasEmptyRawBefore: hasEmptyRawBefore,\n    isSCSSNestedPropertyNode: isSCSSNestedPropertyNode,\n    isDetachedRulesetCallNode: isDetachedRulesetCallNode,\n    isTemplatePlaceholderNode: isTemplatePlaceholderNode,\n    isTemplatePropNode: isTemplatePropNode,\n    isPostcssSimpleVarNode: isPostcssSimpleVarNode,\n    isKeyValuePairNode: isKeyValuePairNode,\n    isKeyValuePairInParenGroupNode: isKeyValuePairInParenGroupNode,\n    isSCSSMapItemNode: isSCSSMapItemNode,\n    isInlineValueCommentNode: isInlineValueCommentNode,\n    isHashNode: isHashNode,\n    isLeftCurlyBraceNode: isLeftCurlyBraceNode,\n    isRightCurlyBraceNode: isRightCurlyBraceNode,\n    isWordNode: isWordNode,\n    isColonNode: isColonNode,\n    isMediaAndSupportsKeywords: isMediaAndSupportsKeywords,\n    isColorAdjusterFuncNode: isColorAdjusterFuncNode\n  };\n\n  var insertPragma$2 = pragma$1.insertPragma;\n  var printNumber$1 = util.printNumber,\n      printString$1 = util.printString,\n      hasIgnoreComment$1 = util.hasIgnoreComment,\n      hasNewline$2 = util.hasNewline;\n  var isNextLineEmpty$2 = utilShared.isNextLineEmpty;\n  var _require$$3$builders = doc.builders,\n      concat$5 = _require$$3$builders.concat,\n      join$2 = _require$$3$builders.join,\n      line$1 = _require$$3$builders.line,\n      hardline$4 = _require$$3$builders.hardline,\n      softline$1 = _require$$3$builders.softline,\n      group$1 = _require$$3$builders.group,\n      fill$2 = _require$$3$builders.fill,\n      indent$2 = _require$$3$builders.indent,\n      dedent$1 = _require$$3$builders.dedent,\n      ifBreak$1 = _require$$3$builders.ifBreak,\n      removeLines$1 = doc.utils.removeLines;\n  var getAncestorNode$1 = utils$2.getAncestorNode,\n      getPropOfDeclNode$1 = utils$2.getPropOfDeclNode,\n      maybeToLowerCase$1 = utils$2.maybeToLowerCase,\n      insideValueFunctionNode$1 = utils$2.insideValueFunctionNode,\n      insideICSSRuleNode$1 = utils$2.insideICSSRuleNode,\n      insideAtRuleNode$1 = utils$2.insideAtRuleNode,\n      insideURLFunctionInImportAtRuleNode$1 = utils$2.insideURLFunctionInImportAtRuleNode,\n      isKeyframeAtRuleKeywords$1 = utils$2.isKeyframeAtRuleKeywords,\n      isHTMLTag$1 = utils$2.isHTMLTag,\n      isWideKeywords$1 = utils$2.isWideKeywords,\n      isSCSS$1 = utils$2.isSCSS,\n      isLastNode$1 = utils$2.isLastNode,\n      isSCSSControlDirectiveNode$1 = utils$2.isSCSSControlDirectiveNode,\n      isDetachedRulesetDeclarationNode$1 = utils$2.isDetachedRulesetDeclarationNode,\n      isRelationalOperatorNode$1 = utils$2.isRelationalOperatorNode,\n      isEqualityOperatorNode$1 = utils$2.isEqualityOperatorNode,\n      isMultiplicationNode$1 = utils$2.isMultiplicationNode,\n      isDivisionNode$1 = utils$2.isDivisionNode,\n      isAdditionNode$1 = utils$2.isAdditionNode,\n      isSubtractionNode$1 = utils$2.isSubtractionNode,\n      isMathOperatorNode$1 = utils$2.isMathOperatorNode,\n      isEachKeywordNode$1 = utils$2.isEachKeywordNode,\n      isForKeywordNode$1 = utils$2.isForKeywordNode,\n      isURLFunctionNode$1 = utils$2.isURLFunctionNode,\n      isIfElseKeywordNode$1 = utils$2.isIfElseKeywordNode,\n      hasComposesNode$1 = utils$2.hasComposesNode,\n      hasParensAroundNode$1 = utils$2.hasParensAroundNode,\n      hasEmptyRawBefore$1 = utils$2.hasEmptyRawBefore,\n      isKeyValuePairNode$1 = utils$2.isKeyValuePairNode,\n      isDetachedRulesetCallNode$1 = utils$2.isDetachedRulesetCallNode,\n      isTemplatePlaceholderNode$1 = utils$2.isTemplatePlaceholderNode,\n      isTemplatePropNode$1 = utils$2.isTemplatePropNode,\n      isPostcssSimpleVarNode$1 = utils$2.isPostcssSimpleVarNode,\n      isSCSSMapItemNode$1 = utils$2.isSCSSMapItemNode,\n      isInlineValueCommentNode$1 = utils$2.isInlineValueCommentNode,\n      isHashNode$1 = utils$2.isHashNode,\n      isLeftCurlyBraceNode$1 = utils$2.isLeftCurlyBraceNode,\n      isRightCurlyBraceNode$1 = utils$2.isRightCurlyBraceNode,\n      isWordNode$1 = utils$2.isWordNode,\n      isColonNode$1 = utils$2.isColonNode,\n      isMediaAndSupportsKeywords$1 = utils$2.isMediaAndSupportsKeywords,\n      isColorAdjusterFuncNode$1 = utils$2.isColorAdjusterFuncNode;\n\n  function shouldPrintComma(options) {\n    switch (options.trailingComma) {\n      case \"all\":\n      case \"es5\":\n        return true;\n\n      case \"none\":\n      default:\n        return false;\n    }\n  }\n\n  function genericPrint(path, options, print) {\n    var node = path.getValue();\n    /* istanbul ignore if */\n\n    if (!node) {\n      return \"\";\n    }\n\n    if (typeof node === \"string\") {\n      return node;\n    }\n\n    switch (node.type) {\n      case \"yaml\":\n      case \"toml\":\n        return concat$5([node.raw, hardline$4]);\n\n      case \"css-root\":\n        {\n          var nodes = printNodeSequence(path, options, print);\n\n          if (nodes.parts.length) {\n            return concat$5([nodes, hardline$4]);\n          }\n\n          return nodes;\n        }\n\n      case \"css-comment\":\n        {\n          if (node.raws.content) {\n            return node.raws.content;\n          }\n\n          var text = options.originalText.slice(options.locStart(node), options.locEnd(node));\n          var rawText = node.raws.text || node.text; // Workaround a bug where the location is off.\n          // https://github.com/postcss/postcss-scss/issues/63\n\n          if (text.indexOf(rawText) === -1) {\n            if (node.raws.inline) {\n              return concat$5([\"// \", rawText]);\n            }\n\n            return concat$5([\"/* \", rawText, \" */\"]);\n          }\n\n          return text;\n        }\n\n      case \"css-rule\":\n        {\n          return concat$5([path.call(print, \"selector\"), node.important ? \" !important\" : \"\", node.nodes ? concat$5([\" {\", node.nodes.length > 0 ? indent$2(concat$5([hardline$4, printNodeSequence(path, options, print)])) : \"\", hardline$4, \"}\", isDetachedRulesetDeclarationNode$1(node) ? \";\" : \"\"]) : \";\"]);\n        }\n\n      case \"css-decl\":\n        {\n          var parentNode = path.getParentNode();\n          return concat$5([node.raws.before.replace(/[\\s;]/g, \"\"), insideICSSRuleNode$1(path) ? node.prop : maybeToLowerCase$1(node.prop), node.raws.between.trim() === \":\" ? \":\" : node.raws.between.trim(), node.extend ? \"\" : \" \", hasComposesNode$1(node) ? removeLines$1(path.call(print, \"value\")) : path.call(print, \"value\"), node.raws.important ? node.raws.important.replace(/\\s*!\\s*important/i, \" !important\") : node.important ? \" !important\" : \"\", node.raws.scssDefault ? node.raws.scssDefault.replace(/\\s*!default/i, \" !default\") : node.scssDefault ? \" !default\" : \"\", node.raws.scssGlobal ? node.raws.scssGlobal.replace(/\\s*!global/i, \" !global\") : node.scssGlobal ? \" !global\" : \"\", node.nodes ? concat$5([\" {\", indent$2(concat$5([softline$1, printNodeSequence(path, options, print)])), softline$1, \"}\"]) : isTemplatePropNode$1(node) && !parentNode.raws.semicolon && options.originalText[options.locEnd(node) - 1] !== \";\" ? \"\" : \";\"]);\n        }\n\n      case \"css-atrule\":\n        {\n          var _parentNode = path.getParentNode();\n\n          return concat$5([\"@\", // If a Less file ends up being parsed with the SCSS parser, Less\n          // variable declarations will be parsed as at-rules with names ending\n          // with a colon, so keep the original case then.\n          isDetachedRulesetCallNode$1(node) || node.name.endsWith(\":\") ? node.name : maybeToLowerCase$1(node.name), node.params ? concat$5([isDetachedRulesetCallNode$1(node) ? \"\" : isTemplatePlaceholderNode$1(node) && /^\\s*\\n/.test(node.raws.afterName) ? /^\\s*\\n\\s*\\n/.test(node.raws.afterName) ? concat$5([hardline$4, hardline$4]) : hardline$4 : \" \", path.call(print, \"params\")]) : \"\", node.selector ? indent$2(concat$5([\" \", path.call(print, \"selector\")])) : \"\", node.value ? group$1(concat$5([\" \", path.call(print, \"value\"), isSCSSControlDirectiveNode$1(node) ? hasParensAroundNode$1(node) ? \" \" : line$1 : \"\"])) : node.name === \"else\" ? \" \" : \"\", node.nodes ? concat$5([isSCSSControlDirectiveNode$1(node) ? \"\" : \" \", \"{\", indent$2(concat$5([node.nodes.length > 0 ? softline$1 : \"\", printNodeSequence(path, options, print)])), softline$1, \"}\"]) : isTemplatePlaceholderNode$1(node) && !_parentNode.raws.semicolon && options.originalText[options.locEnd(node) - 1] !== \";\" ? \"\" : \";\"]);\n        }\n      // postcss-media-query-parser\n\n      case \"media-query-list\":\n        {\n          var parts = [];\n          path.each(function (childPath) {\n            var node = childPath.getValue();\n\n            if (node.type === \"media-query\" && node.value === \"\") {\n              return;\n            }\n\n            parts.push(childPath.call(print));\n          }, \"nodes\");\n          return group$1(indent$2(join$2(line$1, parts)));\n        }\n\n      case \"media-query\":\n        {\n          return concat$5([join$2(\" \", path.map(print, \"nodes\")), isLastNode$1(path, node) ? \"\" : \",\"]);\n        }\n\n      case \"media-type\":\n        {\n          return adjustNumbers(adjustStrings(node.value, options));\n        }\n\n      case \"media-feature-expression\":\n        {\n          if (!node.nodes) {\n            return node.value;\n          }\n\n          return concat$5([\"(\", concat$5(path.map(print, \"nodes\")), \")\"]);\n        }\n\n      case \"media-feature\":\n        {\n          return maybeToLowerCase$1(adjustStrings(node.value.replace(/ +/g, \" \"), options));\n        }\n\n      case \"media-colon\":\n        {\n          return concat$5([node.value, \" \"]);\n        }\n\n      case \"media-value\":\n        {\n          return adjustNumbers(adjustStrings(node.value, options));\n        }\n\n      case \"media-keyword\":\n        {\n          return adjustStrings(node.value, options);\n        }\n\n      case \"media-url\":\n        {\n          return adjustStrings(node.value.replace(/^url\\(\\s+/gi, \"url(\").replace(/\\s+\\)$/gi, \")\"), options);\n        }\n\n      case \"media-unknown\":\n        {\n          return node.value;\n        }\n      // postcss-selector-parser\n\n      case \"selector-root\":\n        {\n          return group$1(concat$5([insideAtRuleNode$1(path, \"custom-selector\") ? concat$5([getAncestorNode$1(path, \"css-atrule\").customSelector, line$1]) : \"\", join$2(concat$5([\",\", insideAtRuleNode$1(path, [\"extend\", \"custom-selector\", \"nest\"]) ? line$1 : hardline$4]), path.map(print, \"nodes\"))]));\n        }\n\n      case \"selector-selector\":\n        {\n          return group$1(indent$2(concat$5(path.map(print, \"nodes\"))));\n        }\n\n      case \"selector-comment\":\n        {\n          return node.value;\n        }\n\n      case \"selector-string\":\n        {\n          return adjustStrings(node.value, options);\n        }\n\n      case \"selector-tag\":\n        {\n          var _parentNode2 = path.getParentNode();\n\n          var index = _parentNode2 && _parentNode2.nodes.indexOf(node);\n\n          var prevNode = index && _parentNode2.nodes[index - 1];\n          return concat$5([node.namespace ? concat$5([node.namespace === true ? \"\" : node.namespace.trim(), \"|\"]) : \"\", prevNode.type === \"selector-nesting\" ? node.value : adjustNumbers(isHTMLTag$1(node.value) || isKeyframeAtRuleKeywords$1(path, node.value) ? node.value.toLowerCase() : node.value)]);\n        }\n\n      case \"selector-id\":\n        {\n          return concat$5([\"#\", node.value]);\n        }\n\n      case \"selector-class\":\n        {\n          return concat$5([\".\", adjustNumbers(adjustStrings(node.value, options))]);\n        }\n\n      case \"selector-attribute\":\n        {\n          return concat$5([\"[\", node.namespace ? concat$5([node.namespace === true ? \"\" : node.namespace.trim(), \"|\"]) : \"\", node.attribute.trim(), node.operator ? node.operator : \"\", node.value ? quoteAttributeValue(adjustStrings(node.value.trim(), options), options) : \"\", node.insensitive ? \" i\" : \"\", \"]\"]);\n        }\n\n      case \"selector-combinator\":\n        {\n          if (node.value === \"+\" || node.value === \">\" || node.value === \"~\" || node.value === \">>>\") {\n            var _parentNode3 = path.getParentNode();\n\n            var _leading = _parentNode3.type === \"selector-selector\" && _parentNode3.nodes[0] === node ? \"\" : line$1;\n\n            return concat$5([_leading, node.value, isLastNode$1(path, node) ? \"\" : \" \"]);\n          }\n\n          var leading = node.value.trim().startsWith(\"(\") ? line$1 : \"\";\n          var value = adjustNumbers(adjustStrings(node.value.trim(), options)) || line$1;\n          return concat$5([leading, value]);\n        }\n\n      case \"selector-universal\":\n        {\n          return concat$5([node.namespace ? concat$5([node.namespace === true ? \"\" : node.namespace.trim(), \"|\"]) : \"\", node.value]);\n        }\n\n      case \"selector-pseudo\":\n        {\n          return concat$5([maybeToLowerCase$1(node.value), node.nodes && node.nodes.length > 0 ? concat$5([\"(\", join$2(\", \", path.map(print, \"nodes\")), \")\"]) : \"\"]);\n        }\n\n      case \"selector-nesting\":\n        {\n          return node.value;\n        }\n\n      case \"selector-unknown\":\n        {\n          var ruleAncestorNode = getAncestorNode$1(path, \"css-rule\"); // Nested SCSS property\n\n          if (ruleAncestorNode && ruleAncestorNode.isSCSSNesterProperty) {\n            return adjustNumbers(adjustStrings(maybeToLowerCase$1(node.value), options));\n          }\n\n          return node.value;\n        }\n      // postcss-values-parser\n\n      case \"value-value\":\n      case \"value-root\":\n        {\n          return path.call(print, \"group\");\n        }\n\n      case \"value-comment\":\n        {\n          return concat$5([node.inline ? \"//\" : \"/*\", node.value, node.inline ? \"\" : \"*/\"]);\n        }\n\n      case \"value-comma_group\":\n        {\n          var _parentNode4 = path.getParentNode();\n\n          var parentParentNode = path.getParentNode(1);\n          var declAncestorProp = getPropOfDeclNode$1(path);\n          var isGridValue = declAncestorProp && _parentNode4.type === \"value-value\" && (declAncestorProp === \"grid\" || declAncestorProp.startsWith(\"grid-template\"));\n          var atRuleAncestorNode = getAncestorNode$1(path, \"css-atrule\");\n          var isControlDirective = atRuleAncestorNode && isSCSSControlDirectiveNode$1(atRuleAncestorNode);\n          var printed = path.map(print, \"groups\");\n          var _parts = [];\n          var insideURLFunction = insideValueFunctionNode$1(path, \"url\");\n          var insideSCSSInterpolationInString = false;\n          var didBreak = false;\n\n          for (var i = 0; i < node.groups.length; ++i) {\n            _parts.push(printed[i]); // Ignore value inside `url()`\n\n\n            if (insideURLFunction) {\n              continue;\n            }\n\n            var iPrevNode = node.groups[i - 1];\n            var iNode = node.groups[i];\n            var iNextNode = node.groups[i + 1];\n            var iNextNextNode = node.groups[i + 2]; // Ignore after latest node (i.e. before semicolon)\n\n            if (!iNextNode) {\n              continue;\n            } // Ignore spaces before/after string interpolation (i.e. `\"#{my-fn(\"_\")}\"`)\n\n\n            var isStartSCSSInterpolationInString = iNode.type === \"value-string\" && iNode.value.startsWith(\"#{\");\n            var isEndingSCSSInterpolationInString = insideSCSSInterpolationInString && iNextNode.type === \"value-string\" && iNextNode.value.endsWith(\"}\");\n\n            if (isStartSCSSInterpolationInString || isEndingSCSSInterpolationInString) {\n              insideSCSSInterpolationInString = !insideSCSSInterpolationInString;\n              continue;\n            }\n\n            if (insideSCSSInterpolationInString) {\n              continue;\n            } // Ignore colon (i.e. `:`)\n\n\n            if (isColonNode$1(iNode) || isColonNode$1(iNextNode)) {\n              continue;\n            } // Ignore `@` in Less (i.e. `@@var;`)\n\n\n            if (iNode.type === \"value-atword\" && iNode.value === \"\") {\n              continue;\n            } // Ignore `~` in Less (i.e. `content: ~\"^//* some horrible but needed css hack\";`)\n\n\n            if (iNode.value === \"~\") {\n              continue;\n            } // Ignore escape `\\`\n\n\n            if (iNode.value && iNode.value.indexOf(\"\\\\\") !== -1 && iNextNode && iNextNode.type !== \"value-comment\") {\n              continue;\n            } // Ignore escaped `/`\n\n\n            if (iPrevNode && iPrevNode.value && iPrevNode.value.indexOf(\"\\\\\") === iPrevNode.value.length - 1 && iNode.type === \"value-operator\" && iNode.value === \"/\") {\n              continue;\n            } // Ignore `\\` (i.e. `$variable: \\@small;`)\n\n\n            if (iNode.value === \"\\\\\") {\n              continue;\n            } // Ignore `$$` (i.e. `background-color: $$(style)Color;`)\n\n\n            if (isPostcssSimpleVarNode$1(iNode, iNextNode)) {\n              continue;\n            } // Ignore spaces after `#` and after `{` and before `}` in SCSS interpolation (i.e. `#{variable}`)\n\n\n            if (isHashNode$1(iNode) || isLeftCurlyBraceNode$1(iNode) || isRightCurlyBraceNode$1(iNextNode) || isLeftCurlyBraceNode$1(iNextNode) && hasEmptyRawBefore$1(iNextNode) || isRightCurlyBraceNode$1(iNode) && hasEmptyRawBefore$1(iNextNode)) {\n              continue;\n            } // Ignore css variables and interpolation in SCSS (i.e. `--#{$var}`)\n\n\n            if (iNode.value === \"--\" && isHashNode$1(iNextNode)) {\n              continue;\n            } // Formatting math operations\n\n\n            var isMathOperator = isMathOperatorNode$1(iNode);\n            var isNextMathOperator = isMathOperatorNode$1(iNextNode); // Print spaces before and after math operators beside SCSS interpolation as is\n            // (i.e. `#{$var}+5`, `#{$var} +5`, `#{$var}+ 5`, `#{$var} + 5`)\n            // (i.e. `5+#{$var}`, `5 +#{$var}`, `5+ #{$var}`, `5 + #{$var}`)\n\n            if ((isMathOperator && isHashNode$1(iNextNode) || isNextMathOperator && isRightCurlyBraceNode$1(iNode)) && hasEmptyRawBefore$1(iNextNode)) {\n              continue;\n            } // Print spaces before and after addition and subtraction math operators as is in `calc` function\n            // due to the fact that it is not valid syntax\n            // (i.e. `calc(1px+1px)`, `calc(1px+ 1px)`, `calc(1px +1px)`, `calc(1px + 1px)`)\n\n\n            if (insideValueFunctionNode$1(path, \"calc\") && (isAdditionNode$1(iNode) || isAdditionNode$1(iNextNode) || isSubtractionNode$1(iNode) || isSubtractionNode$1(iNextNode)) && hasEmptyRawBefore$1(iNextNode)) {\n              continue;\n            } // Print spaces after `+` and `-` in color adjuster functions as is (e.g. `color(red l(+ 20%))`)\n            // Adjusters with signed numbers (e.g. `color(red l(+20%))`) output as-is.\n\n\n            var isColorAdjusterNode = (isAdditionNode$1(iNode) || isSubtractionNode$1(iNode)) && i === 0 && (iNextNode.type === \"value-number\" || iNextNode.isHex) && parentParentNode && isColorAdjusterFuncNode$1(parentParentNode) && !hasEmptyRawBefore$1(iNextNode);\n            var requireSpaceBeforeOperator = iNextNextNode && iNextNextNode.type === \"value-func\" || iNextNextNode && isWordNode$1(iNextNextNode) || iNode.type === \"value-func\" || isWordNode$1(iNode);\n            var requireSpaceAfterOperator = iNextNode.type === \"value-func\" || isWordNode$1(iNextNode) || iPrevNode && iPrevNode.type === \"value-func\" || iPrevNode && isWordNode$1(iPrevNode); // Formatting `/`, `+`, `-` sign\n\n            if (!(isMultiplicationNode$1(iNextNode) || isMultiplicationNode$1(iNode)) && !insideValueFunctionNode$1(path, \"calc\") && !isColorAdjusterNode && (isDivisionNode$1(iNextNode) && !requireSpaceBeforeOperator || isDivisionNode$1(iNode) && !requireSpaceAfterOperator || isAdditionNode$1(iNextNode) && !requireSpaceBeforeOperator || isAdditionNode$1(iNode) && !requireSpaceAfterOperator || isSubtractionNode$1(iNextNode) || isSubtractionNode$1(iNode)) && (hasEmptyRawBefore$1(iNextNode) || isMathOperator && (!iPrevNode || iPrevNode && isMathOperatorNode$1(iPrevNode)))) {\n              continue;\n            } // Add `hardline` after inline comment (i.e. `// comment\\n foo: bar;`)\n\n\n            if (isInlineValueCommentNode$1(iNode)) {\n              _parts.push(hardline$4);\n\n              continue;\n            } // Handle keywords in SCSS control directive\n\n\n            if (isControlDirective && (isEqualityOperatorNode$1(iNextNode) || isRelationalOperatorNode$1(iNextNode) || isIfElseKeywordNode$1(iNextNode) || isEachKeywordNode$1(iNode) || isForKeywordNode$1(iNode))) {\n              _parts.push(\" \");\n\n              continue;\n            } // At-rule `namespace` should be in one line\n\n\n            if (atRuleAncestorNode && atRuleAncestorNode.name.toLowerCase() === \"namespace\") {\n              _parts.push(\" \");\n\n              continue;\n            } // Formatting `grid` property\n\n\n            if (isGridValue) {\n              if (iNode.source && iNextNode.source && iNode.source.start.line !== iNextNode.source.start.line) {\n                _parts.push(hardline$4);\n\n                didBreak = true;\n              } else {\n                _parts.push(\" \");\n              }\n\n              continue;\n            } // Add `space` before next math operation\n            // Note: `grip` property have `/` delimiter and it is not math operation, so\n            // `grid` property handles above\n\n\n            if (isNextMathOperator) {\n              _parts.push(\" \");\n\n              continue;\n            } // Be default all values go through `line`\n\n\n            _parts.push(line$1);\n          }\n\n          if (didBreak) {\n            _parts.unshift(hardline$4);\n          }\n\n          if (isControlDirective) {\n            return group$1(indent$2(concat$5(_parts)));\n          } // Indent is not needed for import url when url is very long\n          // and node has two groups\n          // when type is value-comma_group\n          // example @import url(\"verylongurl\") projection,tv\n\n\n          if (insideURLFunctionInImportAtRuleNode$1(path)) {\n            return group$1(fill$2(_parts));\n          }\n\n          return group$1(indent$2(fill$2(_parts)));\n        }\n\n      case \"value-paren_group\":\n        {\n          var _parentNode5 = path.getParentNode();\n\n          if (_parentNode5 && isURLFunctionNode$1(_parentNode5) && (node.groups.length === 1 || node.groups.length > 0 && node.groups[0].type === \"value-comma_group\" && node.groups[0].groups.length > 0 && node.groups[0].groups[0].type === \"value-word\" && node.groups[0].groups[0].value.startsWith(\"data:\"))) {\n            return concat$5([node.open ? path.call(print, \"open\") : \"\", join$2(\",\", path.map(print, \"groups\")), node.close ? path.call(print, \"close\") : \"\"]);\n          }\n\n          if (!node.open) {\n            var _printed = path.map(print, \"groups\");\n\n            var res = [];\n\n            for (var _i = 0; _i < _printed.length; _i++) {\n              if (_i !== 0) {\n                res.push(concat$5([\",\", line$1]));\n              }\n\n              res.push(_printed[_i]);\n            }\n\n            return group$1(indent$2(fill$2(res)));\n          }\n\n          var isSCSSMapItem = isSCSSMapItemNode$1(path);\n          return group$1(concat$5([node.open ? path.call(print, \"open\") : \"\", indent$2(concat$5([softline$1, join$2(concat$5([\",\", line$1]), path.map(function (childPath) {\n            var node = childPath.getValue();\n            var printed = print(childPath); // Key/Value pair in open paren already indented\n\n            if (isKeyValuePairNode$1(node) && node.type === \"value-comma_group\" && node.groups && node.groups[2] && node.groups[2].type === \"value-paren_group\") {\n              printed.contents.contents.parts[1] = group$1(printed.contents.contents.parts[1]);\n              return group$1(dedent$1(printed));\n            }\n\n            return printed;\n          }, \"groups\"))])), ifBreak$1(isSCSS$1(options.parser, options.originalText) && isSCSSMapItem && shouldPrintComma(options) ? \",\" : \"\"), softline$1, node.close ? path.call(print, \"close\") : \"\"]), {\n            shouldBreak: isSCSSMapItem\n          });\n        }\n\n      case \"value-func\":\n        {\n          return concat$5([node.value, insideAtRuleNode$1(path, \"supports\") && isMediaAndSupportsKeywords$1(node) ? \" \" : \"\", path.call(print, \"group\")]);\n        }\n\n      case \"value-paren\":\n        {\n          return node.value;\n        }\n\n      case \"value-number\":\n        {\n          return concat$5([printCssNumber(node.value), maybeToLowerCase$1(node.unit)]);\n        }\n\n      case \"value-operator\":\n        {\n          return node.value;\n        }\n\n      case \"value-word\":\n        {\n          if (node.isColor && node.isHex || isWideKeywords$1(node.value)) {\n            return node.value.toLowerCase();\n          }\n\n          return node.value;\n        }\n\n      case \"value-colon\":\n        {\n          return concat$5([node.value, // Don't add spaces on `:` in `url` function (i.e. `url(fbglyph: cross-outline, fig-white)`)\n          insideValueFunctionNode$1(path, \"url\") ? \"\" : line$1]);\n        }\n\n      case \"value-comma\":\n        {\n          return concat$5([node.value, \" \"]);\n        }\n\n      case \"value-string\":\n        {\n          return printString$1(node.raws.quote + node.value + node.raws.quote, options);\n        }\n\n      case \"value-atword\":\n        {\n          return concat$5([\"@\", node.value]);\n        }\n\n      case \"value-unicode-range\":\n        {\n          return node.value;\n        }\n\n      case \"value-unknown\":\n        {\n          return node.value;\n        }\n\n      default:\n        /* istanbul ignore next */\n        throw new Error(\"Unknown postcss type \".concat(JSON.stringify(node.type)));\n    }\n  }\n\n  function printNodeSequence(path, options, print) {\n    var node = path.getValue();\n    var parts = [];\n    var i = 0;\n    path.map(function (pathChild) {\n      var prevNode = node.nodes[i - 1];\n\n      if (prevNode && prevNode.type === \"css-comment\" && prevNode.text.trim() === \"prettier-ignore\") {\n        var childNode = pathChild.getValue();\n        parts.push(options.originalText.slice(options.locStart(childNode), options.locEnd(childNode)));\n      } else {\n        parts.push(pathChild.call(print));\n      }\n\n      if (i !== node.nodes.length - 1) {\n        if (node.nodes[i + 1].type === \"css-comment\" && !hasNewline$2(options.originalText, options.locStart(node.nodes[i + 1]), {\n          backwards: true\n        }) && node.nodes[i].type !== \"yaml\" && node.nodes[i].type !== \"toml\" || node.nodes[i + 1].type === \"css-atrule\" && node.nodes[i + 1].name === \"else\" && node.nodes[i].type !== \"css-comment\") {\n          parts.push(\" \");\n        } else {\n          parts.push(hardline$4);\n\n          if (isNextLineEmpty$2(options.originalText, pathChild.getValue(), options) && node.nodes[i].type !== \"yaml\" && node.nodes[i].type !== \"toml\") {\n            parts.push(hardline$4);\n          }\n        }\n      }\n\n      i++;\n    }, \"nodes\");\n    return concat$5(parts);\n  }\n\n  var STRING_REGEX$1 = /(['\"])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/g;\n  var NUMBER_REGEX = /(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g;\n  var STANDARD_UNIT_REGEX = /[a-zA-Z]+/g;\n  var WORD_PART_REGEX = /[$@]?[a-zA-Z_\\u0080-\\uFFFF][\\w\\-\\u0080-\\uFFFF]*/g;\n  var ADJUST_NUMBERS_REGEX = RegExp(STRING_REGEX$1.source + \"|\" + \"(\".concat(WORD_PART_REGEX.source, \")?\") + \"(\".concat(NUMBER_REGEX.source, \")\") + \"(\".concat(STANDARD_UNIT_REGEX.source, \")?\"), \"g\");\n\n  function adjustStrings(value, options) {\n    return value.replace(STRING_REGEX$1, function (match) {\n      return printString$1(match, options);\n    });\n  }\n\n  function quoteAttributeValue(value, options) {\n    var quote = options.singleQuote ? \"'\" : '\"';\n    return value.includes('\"') || value.includes(\"'\") ? value : quote + value + quote;\n  }\n\n  function adjustNumbers(value) {\n    return value.replace(ADJUST_NUMBERS_REGEX, function (match, quote, wordPart, number, unit) {\n      return !wordPart && number ? (wordPart || \"\") + printCssNumber(number) + maybeToLowerCase$1(unit || \"\") : match;\n    });\n  }\n\n  function printCssNumber(rawNumber) {\n    return printNumber$1(rawNumber) // Remove trailing `.0`.\n    .replace(/\\.0(?=$|e)/, \"\");\n  }\n\n  var printerPostcss = {\n    print: genericPrint,\n    embed: embed_1,\n    insertPragma: insertPragma$2,\n    hasPrettierIgnore: hasIgnoreComment$1,\n    massageAstNode: clean_1\n  };\n\n  var CATEGORY_COMMON = \"Common\"; // format based on https://github.com/prettier/prettier/blob/master/src/main/core-options.js\n\n  var commonOptions = {\n    bracketSpacing: {\n      since: \"0.0.0\",\n      category: CATEGORY_COMMON,\n      type: \"boolean\",\n      default: true,\n      description: \"Print spaces between brackets.\",\n      oppositeDescription: \"Do not print spaces between brackets.\"\n    },\n    singleQuote: {\n      since: \"0.0.0\",\n      category: CATEGORY_COMMON,\n      type: \"boolean\",\n      default: false,\n      description: \"Use single quotes instead of double quotes.\"\n    },\n    proseWrap: {\n      since: \"1.8.2\",\n      category: CATEGORY_COMMON,\n      type: \"choice\",\n      default: [{\n        since: \"1.8.2\",\n        value: true\n      }, {\n        since: \"1.9.0\",\n        value: \"preserve\"\n      }],\n      description: \"How to wrap prose.\",\n      choices: [{\n        since: \"1.9.0\",\n        value: \"always\",\n        description: \"Wrap prose if it exceeds the print width.\"\n      }, {\n        since: \"1.9.0\",\n        value: \"never\",\n        description: \"Do not wrap prose.\"\n      }, {\n        since: \"1.9.0\",\n        value: \"preserve\",\n        description: \"Wrap prose as-is.\"\n      }, {\n        value: false,\n        deprecated: \"1.9.0\",\n        redirect: \"never\"\n      }, {\n        value: true,\n        deprecated: \"1.9.0\",\n        redirect: \"always\"\n      }]\n    }\n  };\n\n  var options$2 = {\n    singleQuote: commonOptions.singleQuote\n  };\n\n  var createLanguage = function createLanguage(linguistData, transform) {\n    var language = {};\n\n    for (var key in linguistData) {\n      var newKey = key === \"languageId\" ? \"linguistLanguageId\" : key;\n      language[newKey] = linguistData[key];\n    }\n\n    return transform(language);\n  };\n\n  var name$1 = \"CSS\";\n  var type = \"markup\";\n  var tmScope = \"source.css\";\n  var aceMode = \"css\";\n  var codemirrorMode = \"css\";\n  var codemirrorMimeType = \"text/css\";\n  var color = \"#563d7c\";\n  var extensions = [\n  \t\".css\"\n  ];\n  var languageId = 50;\n  var CSS = {\n  \tname: name$1,\n  \ttype: type,\n  \ttmScope: tmScope,\n  \taceMode: aceMode,\n  \tcodemirrorMode: codemirrorMode,\n  \tcodemirrorMimeType: codemirrorMimeType,\n  \tcolor: color,\n  \textensions: extensions,\n  \tlanguageId: languageId\n  };\n\n  var CSS$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$1,\n    type: type,\n    tmScope: tmScope,\n    aceMode: aceMode,\n    codemirrorMode: codemirrorMode,\n    codemirrorMimeType: codemirrorMimeType,\n    color: color,\n    extensions: extensions,\n    languageId: languageId,\n    'default': CSS\n  });\n\n  var name$2 = \"PostCSS\";\n  var type$1 = \"markup\";\n  var tmScope$1 = \"source.postcss\";\n  var group$2 = \"CSS\";\n  var extensions$1 = [\n  \t\".pcss\"\n  ];\n  var aceMode$1 = \"text\";\n  var languageId$1 = 262764437;\n  var PostCSS = {\n  \tname: name$2,\n  \ttype: type$1,\n  \ttmScope: tmScope$1,\n  \tgroup: group$2,\n  \textensions: extensions$1,\n  \taceMode: aceMode$1,\n  \tlanguageId: languageId$1\n  };\n\n  var PostCSS$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$2,\n    type: type$1,\n    tmScope: tmScope$1,\n    group: group$2,\n    extensions: extensions$1,\n    aceMode: aceMode$1,\n    languageId: languageId$1,\n    'default': PostCSS\n  });\n\n  var name$3 = \"Less\";\n  var type$2 = \"markup\";\n  var group$3 = \"CSS\";\n  var extensions$2 = [\n  \t\".less\"\n  ];\n  var tmScope$2 = \"source.css.less\";\n  var aceMode$2 = \"less\";\n  var codemirrorMode$1 = \"css\";\n  var codemirrorMimeType$1 = \"text/css\";\n  var languageId$2 = 198;\n  var Less = {\n  \tname: name$3,\n  \ttype: type$2,\n  \tgroup: group$3,\n  \textensions: extensions$2,\n  \ttmScope: tmScope$2,\n  \taceMode: aceMode$2,\n  \tcodemirrorMode: codemirrorMode$1,\n  \tcodemirrorMimeType: codemirrorMimeType$1,\n  \tlanguageId: languageId$2\n  };\n\n  var Less$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$3,\n    type: type$2,\n    group: group$3,\n    extensions: extensions$2,\n    tmScope: tmScope$2,\n    aceMode: aceMode$2,\n    codemirrorMode: codemirrorMode$1,\n    codemirrorMimeType: codemirrorMimeType$1,\n    languageId: languageId$2,\n    'default': Less\n  });\n\n  var name$4 = \"SCSS\";\n  var type$3 = \"markup\";\n  var tmScope$3 = \"source.css.scss\";\n  var group$4 = \"CSS\";\n  var aceMode$3 = \"scss\";\n  var codemirrorMode$2 = \"css\";\n  var codemirrorMimeType$2 = \"text/x-scss\";\n  var extensions$3 = [\n  \t\".scss\"\n  ];\n  var languageId$3 = 329;\n  var SCSS = {\n  \tname: name$4,\n  \ttype: type$3,\n  \ttmScope: tmScope$3,\n  \tgroup: group$4,\n  \taceMode: aceMode$3,\n  \tcodemirrorMode: codemirrorMode$2,\n  \tcodemirrorMimeType: codemirrorMimeType$2,\n  \textensions: extensions$3,\n  \tlanguageId: languageId$3\n  };\n\n  var SCSS$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$4,\n    type: type$3,\n    tmScope: tmScope$3,\n    group: group$4,\n    aceMode: aceMode$3,\n    codemirrorMode: codemirrorMode$2,\n    codemirrorMimeType: codemirrorMimeType$2,\n    extensions: extensions$3,\n    languageId: languageId$3,\n    'default': SCSS\n  });\n\n  var require$$0$2 = getCjsExportFromNamespace(CSS$1);\n\n  var require$$1 = getCjsExportFromNamespace(PostCSS$1);\n\n  var require$$2 = getCjsExportFromNamespace(Less$1);\n\n  var require$$3 = getCjsExportFromNamespace(SCSS$1);\n\n  var languages = [createLanguage(require$$0$2, function (data) {\n    return Object.assign(data, {\n      since: \"1.4.0\",\n      parsers: [\"css\"],\n      vscodeLanguageIds: [\"css\"]\n    });\n  }), createLanguage(require$$1, function (data) {\n    return Object.assign(data, {\n      since: \"1.4.0\",\n      parsers: [\"css\"],\n      vscodeLanguageIds: [\"postcss\"],\n      extensions: data.extensions.concat(\".postcss\")\n    });\n  }), createLanguage(require$$2, function (data) {\n    return Object.assign(data, {\n      since: \"1.4.0\",\n      parsers: [\"less\"],\n      vscodeLanguageIds: [\"less\"]\n    });\n  }), createLanguage(require$$3, function (data) {\n    return Object.assign(data, {\n      since: \"1.4.0\",\n      parsers: [\"scss\"],\n      vscodeLanguageIds: [\"scss\"]\n    });\n  })];\n  var printers = {\n    postcss: printerPostcss\n  };\n  var languageCss = {\n    languages: languages,\n    options: options$2,\n    printers: printers\n  };\n\n  function hasPragma$2(text) {\n    return /^\\s*#[^\\n\\S]*@(format|prettier)\\s*(\\n|$)/.test(text);\n  }\n\n  function insertPragma$3(text) {\n    return \"# @format\\n\\n\" + text;\n  }\n\n  var pragma$2 = {\n    hasPragma: hasPragma$2,\n    insertPragma: insertPragma$3\n  };\n\n  var _require$$0$builders$2 = doc.builders,\n      concat$6 = _require$$0$builders$2.concat,\n      join$3 = _require$$0$builders$2.join,\n      hardline$5 = _require$$0$builders$2.hardline,\n      line$2 = _require$$0$builders$2.line,\n      softline$2 = _require$$0$builders$2.softline,\n      group$5 = _require$$0$builders$2.group,\n      indent$3 = _require$$0$builders$2.indent,\n      ifBreak$2 = _require$$0$builders$2.ifBreak;\n  var hasIgnoreComment$2 = util.hasIgnoreComment;\n  var isNextLineEmpty$3 = utilShared.isNextLineEmpty;\n  var insertPragma$4 = pragma$2.insertPragma;\n\n  function genericPrint$1(path, options, print) {\n    var n = path.getValue();\n\n    if (!n) {\n      return \"\";\n    }\n\n    if (typeof n === \"string\") {\n      return n;\n    }\n\n    switch (n.kind) {\n      case \"Document\":\n        {\n          var parts = [];\n          path.map(function (pathChild, index) {\n            parts.push(concat$6([pathChild.call(print)]));\n\n            if (index !== n.definitions.length - 1) {\n              parts.push(hardline$5);\n\n              if (isNextLineEmpty$3(options.originalText, pathChild.getValue(), options)) {\n                parts.push(hardline$5);\n              }\n            }\n          }, \"definitions\");\n          return concat$6([concat$6(parts), hardline$5]);\n        }\n\n      case \"OperationDefinition\":\n        {\n          var hasOperation = options.originalText[options.locStart(n)] !== \"{\";\n          var hasName = !!n.name;\n          return concat$6([hasOperation ? n.operation : \"\", hasOperation && hasName ? concat$6([\" \", path.call(print, \"name\")]) : \"\", n.variableDefinitions && n.variableDefinitions.length ? group$5(concat$6([\"(\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.map(print, \"variableDefinitions\"))])), softline$2, \")\"])) : \"\", printDirectives(path, print, n), n.selectionSet ? !hasOperation && !hasName ? \"\" : \" \" : \"\", path.call(print, \"selectionSet\")]);\n        }\n\n      case \"FragmentDefinition\":\n        {\n          return concat$6([\"fragment \", path.call(print, \"name\"), n.variableDefinitions && n.variableDefinitions.length ? group$5(concat$6([\"(\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.map(print, \"variableDefinitions\"))])), softline$2, \")\"])) : \"\", \" on \", path.call(print, \"typeCondition\"), printDirectives(path, print, n), \" \", path.call(print, \"selectionSet\")]);\n        }\n\n      case \"SelectionSet\":\n        {\n          return concat$6([\"{\", indent$3(concat$6([hardline$5, join$3(hardline$5, path.call(function (selectionsPath) {\n            return printSequence(selectionsPath, options, print);\n          }, \"selections\"))])), hardline$5, \"}\"]);\n        }\n\n      case \"Field\":\n        {\n          return group$5(concat$6([n.alias ? concat$6([path.call(print, \"alias\"), \": \"]) : \"\", path.call(print, \"name\"), n.arguments.length > 0 ? group$5(concat$6([\"(\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.call(function (argsPath) {\n            return printSequence(argsPath, options, print);\n          }, \"arguments\"))])), softline$2, \")\"])) : \"\", printDirectives(path, print, n), n.selectionSet ? \" \" : \"\", path.call(print, \"selectionSet\")]));\n        }\n\n      case \"Name\":\n        {\n          return n.value;\n        }\n\n      case \"StringValue\":\n        {\n          if (n.block) {\n            return concat$6(['\"\"\"', hardline$5, join$3(hardline$5, n.value.replace(/\"\"\"/g, \"\\\\$&\").split(\"\\n\")), hardline$5, '\"\"\"']);\n          }\n\n          return concat$6(['\"', n.value.replace(/[\"\\\\]/g, \"\\\\$&\").replace(/\\n/g, \"\\\\n\"), '\"']);\n        }\n\n      case \"IntValue\":\n      case \"FloatValue\":\n      case \"EnumValue\":\n        {\n          return n.value;\n        }\n\n      case \"BooleanValue\":\n        {\n          return n.value ? \"true\" : \"false\";\n        }\n\n      case \"NullValue\":\n        {\n          return \"null\";\n        }\n\n      case \"Variable\":\n        {\n          return concat$6([\"$\", path.call(print, \"name\")]);\n        }\n\n      case \"ListValue\":\n        {\n          return group$5(concat$6([\"[\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.map(print, \"values\"))])), softline$2, \"]\"]));\n        }\n\n      case \"ObjectValue\":\n        {\n          return group$5(concat$6([\"{\", options.bracketSpacing && n.fields.length > 0 ? \" \" : \"\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.map(print, \"fields\"))])), softline$2, ifBreak$2(\"\", options.bracketSpacing && n.fields.length > 0 ? \" \" : \"\"), \"}\"]));\n        }\n\n      case \"ObjectField\":\n      case \"Argument\":\n        {\n          return concat$6([path.call(print, \"name\"), \": \", path.call(print, \"value\")]);\n        }\n\n      case \"Directive\":\n        {\n          return concat$6([\"@\", path.call(print, \"name\"), n.arguments.length > 0 ? group$5(concat$6([\"(\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.call(function (argsPath) {\n            return printSequence(argsPath, options, print);\n          }, \"arguments\"))])), softline$2, \")\"])) : \"\"]);\n        }\n\n      case \"NamedType\":\n        {\n          return path.call(print, \"name\");\n        }\n\n      case \"VariableDefinition\":\n        {\n          return concat$6([path.call(print, \"variable\"), \": \", path.call(print, \"type\"), n.defaultValue ? concat$6([\" = \", path.call(print, \"defaultValue\")]) : \"\", printDirectives(path, print, n)]);\n        }\n\n      case \"TypeExtensionDefinition\":\n        {\n          return concat$6([\"extend \", path.call(print, \"definition\")]);\n        }\n\n      case \"ObjectTypeExtension\":\n      case \"ObjectTypeDefinition\":\n        {\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", n.kind === \"ObjectTypeExtension\" ? \"extend \" : \"\", \"type \", path.call(print, \"name\"), n.interfaces.length > 0 ? concat$6([\" implements \", join$3(determineInterfaceSeparator(options.originalText.substr(options.locStart(n), options.locEnd(n))), path.map(print, \"interfaces\"))]) : \"\", printDirectives(path, print, n), n.fields.length > 0 ? concat$6([\" {\", indent$3(concat$6([hardline$5, join$3(hardline$5, path.call(function (fieldsPath) {\n            return printSequence(fieldsPath, options, print);\n          }, \"fields\"))])), hardline$5, \"}\"]) : \"\"]);\n        }\n\n      case \"FieldDefinition\":\n        {\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", path.call(print, \"name\"), n.arguments.length > 0 ? group$5(concat$6([\"(\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.call(function (argsPath) {\n            return printSequence(argsPath, options, print);\n          }, \"arguments\"))])), softline$2, \")\"])) : \"\", \": \", path.call(print, \"type\"), printDirectives(path, print, n)]);\n        }\n\n      case \"DirectiveDefinition\":\n        {\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", \"directive \", \"@\", path.call(print, \"name\"), n.arguments.length > 0 ? group$5(concat$6([\"(\", indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \", \"), softline$2]), path.call(function (argsPath) {\n            return printSequence(argsPath, options, print);\n          }, \"arguments\"))])), softline$2, \")\"])) : \"\", concat$6([\" on \", join$3(\" | \", path.map(print, \"locations\"))])]);\n        }\n\n      case \"EnumTypeExtension\":\n      case \"EnumTypeDefinition\":\n        {\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", n.kind === \"EnumTypeExtension\" ? \"extend \" : \"\", \"enum \", path.call(print, \"name\"), printDirectives(path, print, n), n.values.length > 0 ? concat$6([\" {\", indent$3(concat$6([hardline$5, join$3(hardline$5, path.call(function (valuesPath) {\n            return printSequence(valuesPath, options, print);\n          }, \"values\"))])), hardline$5, \"}\"]) : \"\"]);\n        }\n\n      case \"EnumValueDefinition\":\n        {\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", path.call(print, \"name\"), printDirectives(path, print, n)]);\n        }\n\n      case \"InputValueDefinition\":\n        {\n          return concat$6([path.call(print, \"description\"), n.description ? n.description.block ? hardline$5 : line$2 : \"\", path.call(print, \"name\"), \": \", path.call(print, \"type\"), n.defaultValue ? concat$6([\" = \", path.call(print, \"defaultValue\")]) : \"\", printDirectives(path, print, n)]);\n        }\n\n      case \"InputObjectTypeExtension\":\n      case \"InputObjectTypeDefinition\":\n        {\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", n.kind === \"InputObjectTypeExtension\" ? \"extend \" : \"\", \"input \", path.call(print, \"name\"), printDirectives(path, print, n), n.fields.length > 0 ? concat$6([\" {\", indent$3(concat$6([hardline$5, join$3(hardline$5, path.call(function (fieldsPath) {\n            return printSequence(fieldsPath, options, print);\n          }, \"fields\"))])), hardline$5, \"}\"]) : \"\"]);\n        }\n\n      case \"SchemaDefinition\":\n        {\n          return concat$6([\"schema\", printDirectives(path, print, n), \" {\", n.operationTypes.length > 0 ? indent$3(concat$6([hardline$5, join$3(hardline$5, path.call(function (opsPath) {\n            return printSequence(opsPath, options, print);\n          }, \"operationTypes\"))])) : \"\", hardline$5, \"}\"]);\n        }\n\n      case \"OperationTypeDefinition\":\n        {\n          return concat$6([path.call(print, \"operation\"), \": \", path.call(print, \"type\")]);\n        }\n\n      case \"InterfaceTypeExtension\":\n      case \"InterfaceTypeDefinition\":\n        {\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", n.kind === \"InterfaceTypeExtension\" ? \"extend \" : \"\", \"interface \", path.call(print, \"name\"), printDirectives(path, print, n), n.fields.length > 0 ? concat$6([\" {\", indent$3(concat$6([hardline$5, join$3(hardline$5, path.call(function (fieldsPath) {\n            return printSequence(fieldsPath, options, print);\n          }, \"fields\"))])), hardline$5, \"}\"]) : \"\"]);\n        }\n\n      case \"FragmentSpread\":\n        {\n          return concat$6([\"...\", path.call(print, \"name\"), printDirectives(path, print, n)]);\n        }\n\n      case \"InlineFragment\":\n        {\n          return concat$6([\"...\", n.typeCondition ? concat$6([\" on \", path.call(print, \"typeCondition\")]) : \"\", printDirectives(path, print, n), \" \", path.call(print, \"selectionSet\")]);\n        }\n\n      case \"UnionTypeExtension\":\n      case \"UnionTypeDefinition\":\n        {\n          return group$5(concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", group$5(concat$6([n.kind === \"UnionTypeExtension\" ? \"extend \" : \"\", \"union \", path.call(print, \"name\"), printDirectives(path, print, n), n.types.length > 0 ? concat$6([\" =\", ifBreak$2(\"\", \" \"), indent$3(concat$6([ifBreak$2(concat$6([line$2, \"  \"])), join$3(concat$6([line$2, \"| \"]), path.map(print, \"types\"))]))]) : \"\"]))]));\n        }\n\n      case \"ScalarTypeExtension\":\n      case \"ScalarTypeDefinition\":\n        {\n          return concat$6([path.call(print, \"description\"), n.description ? hardline$5 : \"\", n.kind === \"ScalarTypeExtension\" ? \"extend \" : \"\", \"scalar \", path.call(print, \"name\"), printDirectives(path, print, n)]);\n        }\n\n      case \"NonNullType\":\n        {\n          return concat$6([path.call(print, \"type\"), \"!\"]);\n        }\n\n      case \"ListType\":\n        {\n          return concat$6([\"[\", path.call(print, \"type\"), \"]\"]);\n        }\n\n      default:\n        /* istanbul ignore next */\n        throw new Error(\"unknown graphql type: \" + JSON.stringify(n.kind));\n    }\n  }\n\n  function printDirectives(path, print, n) {\n    if (n.directives.length === 0) {\n      return \"\";\n    }\n\n    return concat$6([\" \", group$5(indent$3(concat$6([softline$2, join$3(concat$6([ifBreak$2(\"\", \" \"), softline$2]), path.map(print, \"directives\"))])))]);\n  }\n\n  function printSequence(sequencePath, options, print) {\n    var count = sequencePath.getValue().length;\n    return sequencePath.map(function (path, i) {\n      var printed = print(path);\n\n      if (isNextLineEmpty$3(options.originalText, path.getValue(), options) && i < count - 1) {\n        return concat$6([printed, hardline$5]);\n      }\n\n      return printed;\n    });\n  }\n\n  function canAttachComment(node) {\n    return node.kind && node.kind !== \"Comment\";\n  }\n\n  function printComment$1(commentPath) {\n    var comment = commentPath.getValue();\n\n    if (comment.kind === \"Comment\") {\n      return \"#\" + comment.value.trimRight();\n    }\n\n    throw new Error(\"Not a comment: \" + JSON.stringify(comment));\n  }\n\n  function determineInterfaceSeparator(originalSource) {\n    var start = originalSource.indexOf(\"implements\");\n\n    if (start === -1) {\n      throw new Error(\"Must implement interfaces: \" + originalSource);\n    }\n\n    var end = originalSource.indexOf(\"{\");\n\n    if (end === -1) {\n      end = originalSource.length;\n    }\n\n    return originalSource.substr(start, end).includes(\"&\") ? \" & \" : \", \";\n  }\n\n  function clean$1(node, newNode\n  /*, parent*/\n  ) {\n    delete newNode.loc;\n    delete newNode.comments;\n  }\n\n  var printerGraphql = {\n    print: genericPrint$1,\n    massageAstNode: clean$1,\n    hasPrettierIgnore: hasIgnoreComment$2,\n    insertPragma: insertPragma$4,\n    printComment: printComment$1,\n    canAttachComment: canAttachComment\n  };\n\n  var options$3 = {\n    bracketSpacing: commonOptions.bracketSpacing\n  };\n\n  var name$5 = \"GraphQL\";\n  var type$4 = \"data\";\n  var extensions$4 = [\n  \t\".graphql\",\n  \t\".gql\",\n  \t\".graphqls\"\n  ];\n  var tmScope$4 = \"source.graphql\";\n  var aceMode$4 = \"text\";\n  var languageId$4 = 139;\n  var GraphQL = {\n  \tname: name$5,\n  \ttype: type$4,\n  \textensions: extensions$4,\n  \ttmScope: tmScope$4,\n  \taceMode: aceMode$4,\n  \tlanguageId: languageId$4\n  };\n\n  var GraphQL$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$5,\n    type: type$4,\n    extensions: extensions$4,\n    tmScope: tmScope$4,\n    aceMode: aceMode$4,\n    languageId: languageId$4,\n    'default': GraphQL\n  });\n\n  var require$$0$3 = getCjsExportFromNamespace(GraphQL$1);\n\n  var languages$1 = [createLanguage(require$$0$3, function (data) {\n    return Object.assign(data, {\n      since: \"1.5.0\",\n      parsers: [\"graphql\"],\n      vscodeLanguageIds: [\"graphql\"]\n    });\n  })];\n  var printers$1 = {\n    graphql: printerGraphql\n  };\n  var languageGraphql = {\n    languages: languages$1,\n    options: options$3,\n    printers: printers$1\n  };\n\n  var _require$$0$builders$3 = doc.builders,\n      concat$7 = _require$$0$builders$3.concat,\n      join$4 = _require$$0$builders$3.join,\n      softline$3 = _require$$0$builders$3.softline,\n      hardline$6 = _require$$0$builders$3.hardline,\n      line$3 = _require$$0$builders$3.line,\n      group$6 = _require$$0$builders$3.group,\n      indent$4 = _require$$0$builders$3.indent,\n      ifBreak$3 = _require$$0$builders$3.ifBreak; // http://w3c.github.io/html/single-page.html#void-elements\n\n  var voidTags = [\"area\", \"base\", \"br\", \"col\", \"embed\", \"hr\", \"img\", \"input\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"]; // Formatter based on @glimmerjs/syntax's built-in test formatter:\n  // https://github.com/glimmerjs/glimmer-vm/blob/master/packages/%40glimmer/syntax/lib/generation/print.ts\n\n  function printChildren(path, options, print) {\n    return concat$7(path.map(function (childPath, childIndex) {\n      var childNode = path.getValue();\n      var isFirstNode = childIndex === 0;\n      var isLastNode = childIndex == path.getParentNode(0).children.length - 1;\n      var isLastNodeInMultiNodeList = isLastNode && !isFirstNode;\n      var isWhitespace = isWhitespaceNode(childNode);\n\n      if (isWhitespace && isLastNodeInMultiNodeList) {\n        return print(childPath, options, print);\n      } else if (isFirstNode) {\n        return concat$7([softline$3, print(childPath, options, print)]);\n      }\n\n      return print(childPath, options, print);\n    }, \"children\"));\n  }\n\n  function print(path, options, print) {\n    var n = path.getValue();\n    /* istanbul ignore if*/\n\n    if (!n) {\n      return \"\";\n    }\n\n    switch (n.type) {\n      case \"Block\":\n      case \"Program\":\n      case \"Template\":\n        {\n          return group$6(concat$7(path.map(print, \"body\").filter(function (text) {\n            return text !== \"\";\n          })));\n        }\n\n      case \"ElementNode\":\n        {\n          var tagFirstChar = n.tag[0];\n          var isLocal = n.tag.indexOf(\".\") !== -1;\n          var isGlimmerComponent = tagFirstChar.toUpperCase() === tagFirstChar || isLocal;\n          var hasChildren = n.children.length > 0;\n          var hasNonWhitespaceChildren = n.children.some(function (n) {\n            return !isWhitespaceNode(n);\n          });\n          var isVoid = isGlimmerComponent && (!hasChildren || !hasNonWhitespaceChildren) || voidTags.indexOf(n.tag) !== -1;\n          var closeTagForNoBreak = isVoid ? concat$7([\" />\", softline$3]) : \">\";\n          var closeTagForBreak = isVoid ? \"/>\" : \">\";\n\n          var _getParams = function _getParams(path, print) {\n            return indent$4(concat$7([n.attributes.length ? line$3 : \"\", join$4(line$3, path.map(print, \"attributes\")), n.modifiers.length ? line$3 : \"\", join$4(line$3, path.map(print, \"modifiers\")), n.comments.length ? line$3 : \"\", join$4(line$3, path.map(print, \"comments\"))]));\n          };\n\n          var nextNode = getNextNode(path);\n          return concat$7([group$6(concat$7([\"<\", n.tag, _getParams(path, print), n.blockParams.length ? \" as |\".concat(n.blockParams.join(\" \"), \"|\") : \"\", ifBreak$3(softline$3, \"\"), ifBreak$3(closeTagForBreak, closeTagForNoBreak)])), !isVoid ? group$6(concat$7([hasNonWhitespaceChildren ? indent$4(printChildren(path, options, print)) : \"\", ifBreak$3(hasChildren ? hardline$6 : \"\", \"\"), concat$7([\"</\", n.tag, \">\"])])) : \"\", nextNode && nextNode.type === \"ElementNode\" ? hardline$6 : \"\"]);\n        }\n\n      case \"BlockStatement\":\n        {\n          var pp = path.getParentNode(1);\n          var isElseIf = pp && pp.inverse && pp.inverse.body.length === 1 && pp.inverse.body[0] === n && pp.inverse.body[0].path.parts[0] === \"if\";\n          var hasElseIf = n.inverse && n.inverse.body.length === 1 && n.inverse.body[0].type === \"BlockStatement\" && n.inverse.body[0].path.parts[0] === \"if\";\n          var indentElse = hasElseIf ? function (a) {\n            return a;\n          } : indent$4;\n\n          if (n.inverse) {\n            return concat$7([isElseIf ? concat$7([\"{{else \", printPathParams(path, print), \"}}\"]) : printOpenBlock(path, print), indent$4(concat$7([hardline$6, path.call(print, \"program\")])), n.inverse && !hasElseIf ? concat$7([hardline$6, \"{{else}}\"]) : \"\", n.inverse ? indentElse(concat$7([hardline$6, path.call(print, \"inverse\")])) : \"\", isElseIf ? \"\" : concat$7([hardline$6, printCloseBlock(path, print)])]);\n          } else if (isElseIf) {\n            return concat$7([concat$7([\"{{else \", printPathParams(path, print), \"}}\"]), indent$4(concat$7([hardline$6, path.call(print, \"program\")]))]);\n          }\n\n          var _hasNonWhitespaceChildren = n.program.body.some(function (n) {\n            return !isWhitespaceNode(n);\n          });\n\n          return concat$7([printOpenBlock(path, print), group$6(concat$7([indent$4(concat$7([softline$3, path.call(print, \"program\")])), _hasNonWhitespaceChildren ? hardline$6 : softline$3, printCloseBlock(path, print)]))]);\n        }\n\n      case \"ElementModifierStatement\":\n      case \"MustacheStatement\":\n        {\n          var _pp = path.getParentNode(1);\n\n          var isConcat = _pp && _pp.type === \"ConcatStatement\";\n          return group$6(concat$7([n.escaped === false ? \"{{{\" : \"{{\", printPathParams(path, print, {\n            group: false\n          }), isConcat ? \"\" : softline$3, n.escaped === false ? \"}}}\" : \"}}\"]));\n        }\n\n      case \"SubExpression\":\n        {\n          var params = getParams(path, print);\n          var printedParams = params.length > 0 ? indent$4(concat$7([line$3, group$6(join$4(line$3, params))])) : \"\";\n          return group$6(concat$7([\"(\", printPath(path, print), printedParams, softline$3, \")\"]));\n        }\n\n      case \"AttrNode\":\n        {\n          var isText = n.value.type === \"TextNode\";\n\n          if (isText && n.value.loc.start.column === n.value.loc.end.column) {\n            return concat$7([n.name]);\n          }\n\n          var value = path.call(print, \"value\");\n          var quotedValue = isText ? printStringLiteral(value.parts.join(), options) : value;\n          return concat$7([n.name, \"=\", quotedValue]);\n        }\n\n      case \"ConcatStatement\":\n        {\n          return concat$7(['\"', group$6(indent$4(join$4(softline$3, path.map(function (partPath) {\n            return print(partPath);\n          }, \"parts\").filter(function (a) {\n            return a !== \"\";\n          })))), '\"']);\n        }\n\n      case \"Hash\":\n        {\n          return concat$7([join$4(line$3, path.map(print, \"pairs\"))]);\n        }\n\n      case \"HashPair\":\n        {\n          return concat$7([n.key, \"=\", path.call(print, \"value\")]);\n        }\n\n      case \"TextNode\":\n        {\n          var maxLineBreaksToPreserve = 2;\n          var isFirstElement = !getPreviousNode(path);\n          var isLastElement = !getNextNode(path);\n          var isWhitespaceOnly = !/\\S/.test(n.chars);\n          var lineBreaksCount = countNewLines(n.chars);\n          var hasBlockParent = path.getParentNode(0).type === \"Block\";\n          var hasElementParent = path.getParentNode(0).type === \"ElementNode\";\n          var hasTemplateParent = path.getParentNode(0).type === \"Template\";\n          var leadingLineBreaksCount = countLeadingNewLines(n.chars);\n          var trailingLineBreaksCount = countTrailingNewLines(n.chars);\n\n          if ((isFirstElement || isLastElement) && isWhitespaceOnly && (hasBlockParent || hasElementParent || hasTemplateParent)) {\n            return \"\";\n          }\n\n          if (isWhitespaceOnly && lineBreaksCount) {\n            leadingLineBreaksCount = Math.min(lineBreaksCount, maxLineBreaksToPreserve);\n            trailingLineBreaksCount = 0;\n          } else {\n            if (isNextNodeOfType(path, \"ElementNode\") || isNextNodeOfType(path, \"BlockStatement\")) {\n              trailingLineBreaksCount = Math.max(trailingLineBreaksCount, 1);\n            }\n\n            if (isPreviousNodeOfSomeType(path, [\"ElementNode\"]) || isPreviousNodeOfSomeType(path, [\"BlockStatement\"])) {\n              leadingLineBreaksCount = Math.max(leadingLineBreaksCount, 1);\n            }\n          }\n\n          var leadingSpace = \"\";\n          var trailingSpace = \"\"; // preserve a space inside of an attribute node where whitespace present,\n          // when next to mustache statement.\n\n          var inAttrNode = path.stack.indexOf(\"attributes\") >= 0;\n\n          if (inAttrNode) {\n            var parentNode = path.getParentNode(0);\n\n            var _isConcat = parentNode.type === \"ConcatStatement\";\n\n            if (_isConcat) {\n              var parts = parentNode.parts;\n              var partIndex = parts.indexOf(n);\n\n              if (partIndex > 0) {\n                var partType = parts[partIndex - 1].type;\n                var isMustache = partType === \"MustacheStatement\";\n\n                if (isMustache) {\n                  leadingSpace = \" \";\n                }\n              }\n\n              if (partIndex < parts.length - 1) {\n                var _partType = parts[partIndex + 1].type;\n\n                var _isMustache = _partType === \"MustacheStatement\";\n\n                if (_isMustache) {\n                  trailingSpace = \" \";\n                }\n              }\n            }\n          } else {\n            if (trailingLineBreaksCount === 0 && isNextNodeOfType(path, \"MustacheStatement\")) {\n              trailingSpace = \" \";\n            }\n\n            if (leadingLineBreaksCount === 0 && isPreviousNodeOfSomeType(path, [\"MustacheStatement\"])) {\n              leadingSpace = \" \";\n            }\n\n            if (isFirstElement) {\n              leadingLineBreaksCount = 0;\n              leadingSpace = \"\";\n            }\n\n            if (isLastElement) {\n              trailingLineBreaksCount = 0;\n              trailingSpace = \"\";\n            }\n          }\n\n          return concat$7([].concat(_toConsumableArray(generateHardlines(leadingLineBreaksCount, maxLineBreaksToPreserve)), [n.chars.replace(/^[\\s ]+/g, leadingSpace).replace(/[\\s ]+$/, trailingSpace)], _toConsumableArray(generateHardlines(trailingLineBreaksCount, maxLineBreaksToPreserve))).filter(Boolean));\n        }\n\n      case \"MustacheCommentStatement\":\n        {\n          var dashes = n.value.indexOf(\"}}\") > -1 ? \"--\" : \"\";\n          return concat$7([\"{{!\", dashes, n.value, dashes, \"}}\"]);\n        }\n\n      case \"PathExpression\":\n        {\n          return n.original;\n        }\n\n      case \"BooleanLiteral\":\n        {\n          return String(n.value);\n        }\n\n      case \"CommentStatement\":\n        {\n          return concat$7([\"<!--\", n.value, \"-->\"]);\n        }\n\n      case \"StringLiteral\":\n        {\n          return printStringLiteral(n.value, options);\n        }\n\n      case \"NumberLiteral\":\n        {\n          return String(n.value);\n        }\n\n      case \"UndefinedLiteral\":\n        {\n          return \"undefined\";\n        }\n\n      case \"NullLiteral\":\n        {\n          return \"null\";\n        }\n\n      /* istanbul ignore next */\n\n      default:\n        throw new Error(\"unknown glimmer type: \" + JSON.stringify(n.type));\n    }\n  }\n  /**\n   * Prints a string literal with the correct surrounding quotes based on\n   * `options.singleQuote` and the number of escaped quotes contained in\n   * the string literal. This function is the glimmer equivalent of `printString`\n   * in `common/util`, but has differences because of the way escaped characters\n   * are treated in hbs string literals.\n   * @param {string} stringLiteral - the string literal value\n   * @param {object} options - the prettier options object\n   */\n\n\n  function printStringLiteral(stringLiteral, options) {\n    var double = {\n      quote: '\"',\n      regex: /\"/g\n    };\n    var single = {\n      quote: \"'\",\n      regex: /'/g\n    };\n    var preferred = options.singleQuote ? single : double;\n    var alternate = preferred === single ? double : single;\n    var shouldUseAlternateQuote = false; // If `stringLiteral` contains at least one of the quote preferred for\n    // enclosing the string, we might want to enclose with the alternate quote\n    // instead, to minimize the number of escaped quotes.\n\n    if (stringLiteral.includes(preferred.quote) || stringLiteral.includes(alternate.quote)) {\n      var numPreferredQuotes = (stringLiteral.match(preferred.regex) || []).length;\n      var numAlternateQuotes = (stringLiteral.match(alternate.regex) || []).length;\n      shouldUseAlternateQuote = numPreferredQuotes > numAlternateQuotes;\n    }\n\n    var enclosingQuote = shouldUseAlternateQuote ? alternate : preferred;\n    var escapedStringLiteral = stringLiteral.replace(enclosingQuote.regex, \"\\\\\".concat(enclosingQuote.quote));\n    return \"\".concat(enclosingQuote.quote).concat(escapedStringLiteral).concat(enclosingQuote.quote);\n  }\n\n  function printPath(path, print) {\n    return path.call(print, \"path\");\n  }\n\n  function getParams(path, print) {\n    var node = path.getValue();\n    var parts = [];\n\n    if (node.params.length > 0) {\n      parts = parts.concat(path.map(print, \"params\"));\n    }\n\n    if (node.hash && node.hash.pairs.length > 0) {\n      parts.push(path.call(print, \"hash\"));\n    }\n\n    return parts;\n  }\n\n  function printPathParams(path, print, options) {\n    var parts = [];\n    options = Object.assign({\n      group: true\n    }, options || {});\n    parts.push(printPath(path, print));\n    parts = parts.concat(getParams(path, print));\n\n    if (!options.group) {\n      return indent$4(join$4(line$3, parts));\n    }\n\n    return indent$4(group$6(join$4(line$3, parts)));\n  }\n\n  function printBlockParams(path) {\n    var block = path.getValue();\n\n    if (!block.program || !block.program.blockParams.length) {\n      return \"\";\n    }\n\n    return concat$7([\" as |\", block.program.blockParams.join(\" \"), \"|\"]);\n  }\n\n  function printOpenBlock(path, print) {\n    return group$6(concat$7([\"{{#\", printPathParams(path, print), printBlockParams(path), softline$3, \"}}\"]));\n  }\n\n  function printCloseBlock(path, print) {\n    return concat$7([\"{{/\", path.call(print, \"path\"), \"}}\"]);\n  }\n\n  function isWhitespaceNode(node) {\n    return node.type === \"TextNode\" && !/\\S/.test(node.chars);\n  }\n\n  function getPreviousNode(path) {\n    var node = path.getValue();\n    var parentNode = path.getParentNode(0);\n    var children = parentNode.children || parentNode.body;\n\n    if (children) {\n      var nodeIndex = children.indexOf(node);\n\n      if (nodeIndex > 0) {\n        var previousNode = children[nodeIndex - 1];\n        return previousNode;\n      }\n    }\n  }\n\n  function getNextNode(path) {\n    var node = path.getValue();\n    var parentNode = path.getParentNode(0);\n    var children = parentNode.children || parentNode.body;\n\n    if (children) {\n      var nodeIndex = children.indexOf(node);\n\n      if (nodeIndex < children.length) {\n        var nextNode = children[nodeIndex + 1];\n        return nextNode;\n      }\n    }\n  }\n\n  function isPreviousNodeOfSomeType(path, types) {\n    var previousNode = getPreviousNode(path);\n\n    if (previousNode) {\n      return types.some(function (type) {\n        return previousNode.type === type;\n      });\n    }\n\n    return false;\n  }\n\n  function isNextNodeOfType(path, type) {\n    var nextNode = getNextNode(path);\n    return nextNode && nextNode.type === type;\n  }\n\n  function clean$2(ast, newObj) {\n    delete newObj.loc;\n    delete newObj.selfClosing; // (Glimmer/HTML) ignore TextNode whitespace\n\n    if (ast.type === \"TextNode\") {\n      if (ast.chars.replace(/\\s+/, \"\") === \"\") {\n        return null;\n      }\n\n      newObj.chars = ast.chars.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n    }\n  }\n\n  function countNewLines(string) {\n    /* istanbul ignore next */\n    string = typeof string === \"string\" ? string : \"\";\n    return string.split(\"\\n\").length - 1;\n  }\n\n  function countLeadingNewLines(string) {\n    /* istanbul ignore next */\n    string = typeof string === \"string\" ? string : \"\";\n    var newLines = (string.match(/^([^\\S\\r\\n]*[\\r\\n])+/g) || [])[0] || \"\";\n    return countNewLines(newLines);\n  }\n\n  function countTrailingNewLines(string) {\n    /* istanbul ignore next */\n    string = typeof string === \"string\" ? string : \"\";\n    var newLines = (string.match(/([\\r\\n][^\\S\\r\\n]*)+$/g) || [])[0] || \"\";\n    return countNewLines(newLines);\n  }\n\n  function generateHardlines() {\n    var number = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return new Array(Math.min(number, max)).fill(hardline$6);\n  }\n\n  var printerGlimmer = {\n    print: print,\n    massageAstNode: clean$2\n  };\n\n  var name$6 = \"Handlebars\";\n  var type$5 = \"markup\";\n  var group$7 = \"HTML\";\n  var aliases = [\n  \t\"hbs\",\n  \t\"htmlbars\"\n  ];\n  var extensions$5 = [\n  \t\".handlebars\",\n  \t\".hbs\"\n  ];\n  var tmScope$5 = \"text.html.handlebars\";\n  var aceMode$5 = \"handlebars\";\n  var languageId$5 = 155;\n  var Handlebars = {\n  \tname: name$6,\n  \ttype: type$5,\n  \tgroup: group$7,\n  \taliases: aliases,\n  \textensions: extensions$5,\n  \ttmScope: tmScope$5,\n  \taceMode: aceMode$5,\n  \tlanguageId: languageId$5\n  };\n\n  var Handlebars$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$6,\n    type: type$5,\n    group: group$7,\n    aliases: aliases,\n    extensions: extensions$5,\n    tmScope: tmScope$5,\n    aceMode: aceMode$5,\n    languageId: languageId$5,\n    'default': Handlebars\n  });\n\n  var require$$0$4 = getCjsExportFromNamespace(Handlebars$1);\n\n  var languages$2 = [createLanguage(require$$0$4, function (data) {\n    return Object.assign(data, {\n      since: null,\n      // unreleased\n      parsers: [\"glimmer\"],\n      vscodeLanguageIds: [\"handlebars\"]\n    });\n  })];\n  var printers$2 = {\n    glimmer: printerGlimmer\n  };\n  var languageHandlebars = {\n    languages: languages$2,\n    printers: printers$2\n  };\n\n  var clean$3 = function clean(ast, newNode) {\n    delete newNode.sourceSpan;\n    delete newNode.startSourceSpan;\n    delete newNode.endSourceSpan;\n    delete newNode.nameSpan;\n    delete newNode.valueSpan;\n\n    if (ast.type === \"text\" || ast.type === \"comment\") {\n      return null;\n    } // may be formatted by multiparser\n\n\n    if (ast.type === \"yaml\" || ast.type === \"toml\") {\n      return null;\n    }\n\n    if (ast.type === \"attribute\") {\n      delete newNode.value;\n    }\n\n    if (ast.type === \"docType\") {\n      delete newNode.value;\n    }\n  };\n\n  var json = {\n    \"CSS_DISPLAY_TAGS\": {\n      \"area\": \"none\",\n      \"base\": \"none\",\n      \"basefont\": \"none\",\n      \"datalist\": \"none\",\n      \"head\": \"none\",\n      \"link\": \"none\",\n      \"meta\": \"none\",\n      \"noembed\": \"none\",\n      \"noframes\": \"none\",\n      \"param\": \"none\",\n      \"rp\": \"none\",\n      \"script\": \"block\",\n      \"source\": \"block\",\n      \"style\": \"none\",\n      \"template\": \"inline\",\n      \"track\": \"block\",\n      \"title\": \"none\",\n      \"html\": \"block\",\n      \"body\": \"block\",\n      \"address\": \"block\",\n      \"blockquote\": \"block\",\n      \"center\": \"block\",\n      \"div\": \"block\",\n      \"figure\": \"block\",\n      \"figcaption\": \"block\",\n      \"footer\": \"block\",\n      \"form\": \"block\",\n      \"header\": \"block\",\n      \"hr\": \"block\",\n      \"legend\": \"block\",\n      \"listing\": \"block\",\n      \"main\": \"block\",\n      \"p\": \"block\",\n      \"plaintext\": \"block\",\n      \"pre\": \"block\",\n      \"xmp\": \"block\",\n      \"slot\": \"contents\",\n      \"ruby\": \"ruby\",\n      \"rt\": \"ruby-text\",\n      \"article\": \"block\",\n      \"aside\": \"block\",\n      \"h1\": \"block\",\n      \"h2\": \"block\",\n      \"h3\": \"block\",\n      \"h4\": \"block\",\n      \"h5\": \"block\",\n      \"h6\": \"block\",\n      \"hgroup\": \"block\",\n      \"nav\": \"block\",\n      \"section\": \"block\",\n      \"dir\": \"block\",\n      \"dd\": \"block\",\n      \"dl\": \"block\",\n      \"dt\": \"block\",\n      \"ol\": \"block\",\n      \"ul\": \"block\",\n      \"li\": \"list-item\",\n      \"table\": \"table\",\n      \"caption\": \"table-caption\",\n      \"colgroup\": \"table-column-group\",\n      \"col\": \"table-column\",\n      \"thead\": \"table-header-group\",\n      \"tbody\": \"table-row-group\",\n      \"tfoot\": \"table-footer-group\",\n      \"tr\": \"table-row\",\n      \"td\": \"table-cell\",\n      \"th\": \"table-cell\",\n      \"fieldset\": \"block\",\n      \"button\": \"inline-block\",\n      \"video\": \"inline-block\",\n      \"audio\": \"inline-block\"\n    },\n    \"CSS_DISPLAY_DEFAULT\": \"inline\",\n    \"CSS_WHITE_SPACE_TAGS\": {\n      \"listing\": \"pre\",\n      \"plaintext\": \"pre\",\n      \"pre\": \"pre\",\n      \"xmp\": \"pre\",\n      \"nobr\": \"nowrap\",\n      \"table\": \"initial\",\n      \"textarea\": \"pre-wrap\"\n    },\n    \"CSS_WHITE_SPACE_DEFAULT\": \"normal\"\n  };\n\n  var a = [\n  \t\"accesskey\",\n  \t\"charset\",\n  \t\"coords\",\n  \t\"download\",\n  \t\"href\",\n  \t\"hreflang\",\n  \t\"name\",\n  \t\"ping\",\n  \t\"referrerpolicy\",\n  \t\"rel\",\n  \t\"rev\",\n  \t\"shape\",\n  \t\"tabindex\",\n  \t\"target\",\n  \t\"type\"\n  ];\n  var abbr = [\n  \t\"title\"\n  ];\n  var applet = [\n  \t\"align\",\n  \t\"alt\",\n  \t\"archive\",\n  \t\"code\",\n  \t\"codebase\",\n  \t\"height\",\n  \t\"hspace\",\n  \t\"name\",\n  \t\"object\",\n  \t\"vspace\",\n  \t\"width\"\n  ];\n  var area = [\n  \t\"accesskey\",\n  \t\"alt\",\n  \t\"coords\",\n  \t\"download\",\n  \t\"href\",\n  \t\"hreflang\",\n  \t\"nohref\",\n  \t\"ping\",\n  \t\"referrerpolicy\",\n  \t\"rel\",\n  \t\"shape\",\n  \t\"tabindex\",\n  \t\"target\",\n  \t\"type\"\n  ];\n  var audio = [\n  \t\"autoplay\",\n  \t\"controls\",\n  \t\"crossorigin\",\n  \t\"loop\",\n  \t\"muted\",\n  \t\"preload\",\n  \t\"src\"\n  ];\n  var base = [\n  \t\"href\",\n  \t\"target\"\n  ];\n  var basefont = [\n  \t\"color\",\n  \t\"face\",\n  \t\"size\"\n  ];\n  var bdo = [\n  \t\"dir\"\n  ];\n  var blockquote = [\n  \t\"cite\"\n  ];\n  var body = [\n  \t\"alink\",\n  \t\"background\",\n  \t\"bgcolor\",\n  \t\"link\",\n  \t\"text\",\n  \t\"vlink\"\n  ];\n  var br = [\n  \t\"clear\"\n  ];\n  var button = [\n  \t\"accesskey\",\n  \t\"autofocus\",\n  \t\"disabled\",\n  \t\"form\",\n  \t\"formaction\",\n  \t\"formenctype\",\n  \t\"formmethod\",\n  \t\"formnovalidate\",\n  \t\"formtarget\",\n  \t\"name\",\n  \t\"tabindex\",\n  \t\"type\",\n  \t\"value\"\n  ];\n  var canvas = [\n  \t\"height\",\n  \t\"width\"\n  ];\n  var caption = [\n  \t\"align\"\n  ];\n  var col = [\n  \t\"align\",\n  \t\"char\",\n  \t\"charoff\",\n  \t\"span\",\n  \t\"valign\",\n  \t\"width\"\n  ];\n  var colgroup = [\n  \t\"align\",\n  \t\"char\",\n  \t\"charoff\",\n  \t\"span\",\n  \t\"valign\",\n  \t\"width\"\n  ];\n  var data = [\n  \t\"value\"\n  ];\n  var del = [\n  \t\"cite\",\n  \t\"datetime\"\n  ];\n  var details = [\n  \t\"open\"\n  ];\n  var dfn = [\n  \t\"title\"\n  ];\n  var dialog = [\n  \t\"open\"\n  ];\n  var dir = [\n  \t\"compact\"\n  ];\n  var div = [\n  \t\"align\"\n  ];\n  var dl = [\n  \t\"compact\"\n  ];\n  var embed$1 = [\n  \t\"height\",\n  \t\"src\",\n  \t\"type\",\n  \t\"width\"\n  ];\n  var fieldset = [\n  \t\"disabled\",\n  \t\"form\",\n  \t\"name\"\n  ];\n  var font = [\n  \t\"color\",\n  \t\"face\",\n  \t\"size\"\n  ];\n  var form = [\n  \t\"accept\",\n  \t\"accept-charset\",\n  \t\"action\",\n  \t\"autocomplete\",\n  \t\"enctype\",\n  \t\"method\",\n  \t\"name\",\n  \t\"novalidate\",\n  \t\"target\"\n  ];\n  var frame = [\n  \t\"frameborder\",\n  \t\"longdesc\",\n  \t\"marginheight\",\n  \t\"marginwidth\",\n  \t\"name\",\n  \t\"noresize\",\n  \t\"scrolling\",\n  \t\"src\"\n  ];\n  var frameset = [\n  \t\"cols\",\n  \t\"rows\"\n  ];\n  var h1 = [\n  \t\"align\"\n  ];\n  var h2 = [\n  \t\"align\"\n  ];\n  var h3 = [\n  \t\"align\"\n  ];\n  var h4 = [\n  \t\"align\"\n  ];\n  var h5 = [\n  \t\"align\"\n  ];\n  var h6 = [\n  \t\"align\"\n  ];\n  var head = [\n  \t\"profile\"\n  ];\n  var hr = [\n  \t\"align\",\n  \t\"noshade\",\n  \t\"size\",\n  \t\"width\"\n  ];\n  var html = [\n  \t\"manifest\",\n  \t\"version\"\n  ];\n  var iframe = [\n  \t\"align\",\n  \t\"allow\",\n  \t\"allowfullscreen\",\n  \t\"allowpaymentrequest\",\n  \t\"allowusermedia\",\n  \t\"frameborder\",\n  \t\"height\",\n  \t\"longdesc\",\n  \t\"marginheight\",\n  \t\"marginwidth\",\n  \t\"name\",\n  \t\"referrerpolicy\",\n  \t\"sandbox\",\n  \t\"scrolling\",\n  \t\"src\",\n  \t\"srcdoc\",\n  \t\"width\"\n  ];\n  var img = [\n  \t\"align\",\n  \t\"alt\",\n  \t\"border\",\n  \t\"crossorigin\",\n  \t\"decoding\",\n  \t\"height\",\n  \t\"hspace\",\n  \t\"ismap\",\n  \t\"longdesc\",\n  \t\"name\",\n  \t\"referrerpolicy\",\n  \t\"sizes\",\n  \t\"src\",\n  \t\"srcset\",\n  \t\"usemap\",\n  \t\"vspace\",\n  \t\"width\"\n  ];\n  var input = [\n  \t\"accept\",\n  \t\"accesskey\",\n  \t\"align\",\n  \t\"alt\",\n  \t\"autocomplete\",\n  \t\"autofocus\",\n  \t\"checked\",\n  \t\"dirname\",\n  \t\"disabled\",\n  \t\"form\",\n  \t\"formaction\",\n  \t\"formenctype\",\n  \t\"formmethod\",\n  \t\"formnovalidate\",\n  \t\"formtarget\",\n  \t\"height\",\n  \t\"ismap\",\n  \t\"list\",\n  \t\"max\",\n  \t\"maxlength\",\n  \t\"min\",\n  \t\"minlength\",\n  \t\"multiple\",\n  \t\"name\",\n  \t\"pattern\",\n  \t\"placeholder\",\n  \t\"readonly\",\n  \t\"required\",\n  \t\"size\",\n  \t\"src\",\n  \t\"step\",\n  \t\"tabindex\",\n  \t\"title\",\n  \t\"type\",\n  \t\"usemap\",\n  \t\"value\",\n  \t\"width\"\n  ];\n  var ins = [\n  \t\"cite\",\n  \t\"datetime\"\n  ];\n  var isindex = [\n  \t\"prompt\"\n  ];\n  var label = [\n  \t\"accesskey\",\n  \t\"for\",\n  \t\"form\"\n  ];\n  var legend = [\n  \t\"accesskey\",\n  \t\"align\"\n  ];\n  var li = [\n  \t\"type\",\n  \t\"value\"\n  ];\n  var link$1 = [\n  \t\"as\",\n  \t\"charset\",\n  \t\"color\",\n  \t\"crossorigin\",\n  \t\"href\",\n  \t\"hreflang\",\n  \t\"imagesizes\",\n  \t\"imagesrcset\",\n  \t\"integrity\",\n  \t\"media\",\n  \t\"nonce\",\n  \t\"referrerpolicy\",\n  \t\"rel\",\n  \t\"rev\",\n  \t\"sizes\",\n  \t\"target\",\n  \t\"title\",\n  \t\"type\"\n  ];\n  var map = [\n  \t\"name\"\n  ];\n  var menu = [\n  \t\"compact\"\n  ];\n  var meta = [\n  \t\"charset\",\n  \t\"content\",\n  \t\"http-equiv\",\n  \t\"name\",\n  \t\"scheme\"\n  ];\n  var meter = [\n  \t\"high\",\n  \t\"low\",\n  \t\"max\",\n  \t\"min\",\n  \t\"optimum\",\n  \t\"value\"\n  ];\n  var object = [\n  \t\"align\",\n  \t\"archive\",\n  \t\"border\",\n  \t\"classid\",\n  \t\"codebase\",\n  \t\"codetype\",\n  \t\"data\",\n  \t\"declare\",\n  \t\"form\",\n  \t\"height\",\n  \t\"hspace\",\n  \t\"name\",\n  \t\"standby\",\n  \t\"tabindex\",\n  \t\"type\",\n  \t\"typemustmatch\",\n  \t\"usemap\",\n  \t\"vspace\",\n  \t\"width\"\n  ];\n  var ol = [\n  \t\"compact\",\n  \t\"reversed\",\n  \t\"start\",\n  \t\"type\"\n  ];\n  var optgroup = [\n  \t\"disabled\",\n  \t\"label\"\n  ];\n  var option = [\n  \t\"disabled\",\n  \t\"label\",\n  \t\"selected\",\n  \t\"value\"\n  ];\n  var output = [\n  \t\"for\",\n  \t\"form\",\n  \t\"name\"\n  ];\n  var p = [\n  \t\"align\"\n  ];\n  var param = [\n  \t\"name\",\n  \t\"type\",\n  \t\"value\",\n  \t\"valuetype\"\n  ];\n  var pre = [\n  \t\"width\"\n  ];\n  var progress = [\n  \t\"max\",\n  \t\"value\"\n  ];\n  var q = [\n  \t\"cite\"\n  ];\n  var script = [\n  \t\"async\",\n  \t\"charset\",\n  \t\"crossorigin\",\n  \t\"defer\",\n  \t\"integrity\",\n  \t\"language\",\n  \t\"nomodule\",\n  \t\"nonce\",\n  \t\"referrerpolicy\",\n  \t\"src\",\n  \t\"type\"\n  ];\n  var select = [\n  \t\"autocomplete\",\n  \t\"autofocus\",\n  \t\"disabled\",\n  \t\"form\",\n  \t\"multiple\",\n  \t\"name\",\n  \t\"required\",\n  \t\"size\",\n  \t\"tabindex\"\n  ];\n  var slot = [\n  \t\"name\"\n  ];\n  var source = [\n  \t\"media\",\n  \t\"sizes\",\n  \t\"src\",\n  \t\"srcset\",\n  \t\"type\"\n  ];\n  var style = [\n  \t\"media\",\n  \t\"nonce\",\n  \t\"title\",\n  \t\"type\"\n  ];\n  var table = [\n  \t\"align\",\n  \t\"bgcolor\",\n  \t\"border\",\n  \t\"cellpadding\",\n  \t\"cellspacing\",\n  \t\"frame\",\n  \t\"rules\",\n  \t\"summary\",\n  \t\"width\"\n  ];\n  var tbody = [\n  \t\"align\",\n  \t\"char\",\n  \t\"charoff\",\n  \t\"valign\"\n  ];\n  var td = [\n  \t\"abbr\",\n  \t\"align\",\n  \t\"axis\",\n  \t\"bgcolor\",\n  \t\"char\",\n  \t\"charoff\",\n  \t\"colspan\",\n  \t\"headers\",\n  \t\"height\",\n  \t\"nowrap\",\n  \t\"rowspan\",\n  \t\"scope\",\n  \t\"valign\",\n  \t\"width\"\n  ];\n  var textarea = [\n  \t\"accesskey\",\n  \t\"autocomplete\",\n  \t\"autofocus\",\n  \t\"cols\",\n  \t\"dirname\",\n  \t\"disabled\",\n  \t\"form\",\n  \t\"maxlength\",\n  \t\"minlength\",\n  \t\"name\",\n  \t\"placeholder\",\n  \t\"readonly\",\n  \t\"required\",\n  \t\"rows\",\n  \t\"tabindex\",\n  \t\"wrap\"\n  ];\n  var tfoot = [\n  \t\"align\",\n  \t\"char\",\n  \t\"charoff\",\n  \t\"valign\"\n  ];\n  var th = [\n  \t\"abbr\",\n  \t\"align\",\n  \t\"axis\",\n  \t\"bgcolor\",\n  \t\"char\",\n  \t\"charoff\",\n  \t\"colspan\",\n  \t\"headers\",\n  \t\"height\",\n  \t\"nowrap\",\n  \t\"rowspan\",\n  \t\"scope\",\n  \t\"valign\",\n  \t\"width\"\n  ];\n  var thead = [\n  \t\"align\",\n  \t\"char\",\n  \t\"charoff\",\n  \t\"valign\"\n  ];\n  var time = [\n  \t\"datetime\"\n  ];\n  var tr = [\n  \t\"align\",\n  \t\"bgcolor\",\n  \t\"char\",\n  \t\"charoff\",\n  \t\"valign\"\n  ];\n  var track = [\n  \t\"default\",\n  \t\"kind\",\n  \t\"label\",\n  \t\"src\",\n  \t\"srclang\"\n  ];\n  var ul = [\n  \t\"compact\",\n  \t\"type\"\n  ];\n  var video = [\n  \t\"autoplay\",\n  \t\"controls\",\n  \t\"crossorigin\",\n  \t\"height\",\n  \t\"loop\",\n  \t\"muted\",\n  \t\"playsinline\",\n  \t\"poster\",\n  \t\"preload\",\n  \t\"src\",\n  \t\"width\"\n  ];\n  var index$1 = {\n  \t\"*\": [\n  \t\"accesskey\",\n  \t\"autocapitalize\",\n  \t\"autofocus\",\n  \t\"class\",\n  \t\"contenteditable\",\n  \t\"dir\",\n  \t\"draggable\",\n  \t\"enterkeyhint\",\n  \t\"hidden\",\n  \t\"id\",\n  \t\"inputmode\",\n  \t\"is\",\n  \t\"itemid\",\n  \t\"itemprop\",\n  \t\"itemref\",\n  \t\"itemscope\",\n  \t\"itemtype\",\n  \t\"lang\",\n  \t\"nonce\",\n  \t\"slot\",\n  \t\"spellcheck\",\n  \t\"style\",\n  \t\"tabindex\",\n  \t\"title\",\n  \t\"translate\"\n  ],\n  \ta: a,\n  \tabbr: abbr,\n  \tapplet: applet,\n  \tarea: area,\n  \taudio: audio,\n  \tbase: base,\n  \tbasefont: basefont,\n  \tbdo: bdo,\n  \tblockquote: blockquote,\n  \tbody: body,\n  \tbr: br,\n  \tbutton: button,\n  \tcanvas: canvas,\n  \tcaption: caption,\n  \tcol: col,\n  \tcolgroup: colgroup,\n  \tdata: data,\n  \tdel: del,\n  \tdetails: details,\n  \tdfn: dfn,\n  \tdialog: dialog,\n  \tdir: dir,\n  \tdiv: div,\n  \tdl: dl,\n  \tembed: embed$1,\n  \tfieldset: fieldset,\n  \tfont: font,\n  \tform: form,\n  \tframe: frame,\n  \tframeset: frameset,\n  \th1: h1,\n  \th2: h2,\n  \th3: h3,\n  \th4: h4,\n  \th5: h5,\n  \th6: h6,\n  \thead: head,\n  \thr: hr,\n  \thtml: html,\n  \tiframe: iframe,\n  \timg: img,\n  \tinput: input,\n  \tins: ins,\n  \tisindex: isindex,\n  \tlabel: label,\n  \tlegend: legend,\n  \tli: li,\n  \tlink: link$1,\n  \tmap: map,\n  \tmenu: menu,\n  \tmeta: meta,\n  \tmeter: meter,\n  \tobject: object,\n  \tol: ol,\n  \toptgroup: optgroup,\n  \toption: option,\n  \toutput: output,\n  \tp: p,\n  \tparam: param,\n  \tpre: pre,\n  \tprogress: progress,\n  \tq: q,\n  \tscript: script,\n  \tselect: select,\n  \tslot: slot,\n  \tsource: source,\n  \tstyle: style,\n  \ttable: table,\n  \ttbody: tbody,\n  \ttd: td,\n  \ttextarea: textarea,\n  \ttfoot: tfoot,\n  \tth: th,\n  \tthead: thead,\n  \ttime: time,\n  \ttr: tr,\n  \ttrack: track,\n  \tul: ul,\n  \tvideo: video\n  };\n\n  var htmlElementAttributes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    a: a,\n    abbr: abbr,\n    applet: applet,\n    area: area,\n    audio: audio,\n    base: base,\n    basefont: basefont,\n    bdo: bdo,\n    blockquote: blockquote,\n    body: body,\n    br: br,\n    button: button,\n    canvas: canvas,\n    caption: caption,\n    col: col,\n    colgroup: colgroup,\n    data: data,\n    del: del,\n    details: details,\n    dfn: dfn,\n    dialog: dialog,\n    dir: dir,\n    div: div,\n    dl: dl,\n    embed: embed$1,\n    fieldset: fieldset,\n    font: font,\n    form: form,\n    frame: frame,\n    frameset: frameset,\n    h1: h1,\n    h2: h2,\n    h3: h3,\n    h4: h4,\n    h5: h5,\n    h6: h6,\n    head: head,\n    hr: hr,\n    html: html,\n    iframe: iframe,\n    img: img,\n    input: input,\n    ins: ins,\n    isindex: isindex,\n    label: label,\n    legend: legend,\n    li: li,\n    link: link$1,\n    map: map,\n    menu: menu,\n    meta: meta,\n    meter: meter,\n    object: object,\n    ol: ol,\n    optgroup: optgroup,\n    option: option,\n    output: output,\n    p: p,\n    param: param,\n    pre: pre,\n    progress: progress,\n    q: q,\n    script: script,\n    select: select,\n    slot: slot,\n    source: source,\n    style: style,\n    table: table,\n    tbody: tbody,\n    td: td,\n    textarea: textarea,\n    tfoot: tfoot,\n    th: th,\n    thead: thead,\n    time: time,\n    tr: tr,\n    track: track,\n    ul: ul,\n    video: video,\n    'default': index$1\n  });\n\n  var htmlElementAttributes$1 = getCjsExportFromNamespace(htmlElementAttributes);\n\n  var CSS_DISPLAY_TAGS = json.CSS_DISPLAY_TAGS,\n      CSS_DISPLAY_DEFAULT = json.CSS_DISPLAY_DEFAULT,\n      CSS_WHITE_SPACE_TAGS = json.CSS_WHITE_SPACE_TAGS,\n      CSS_WHITE_SPACE_DEFAULT = json.CSS_WHITE_SPACE_DEFAULT;\n  var HTML_TAGS = arrayToMap(htmlTagNames$1);\n  var HTML_ELEMENT_ATTRIBUTES = mapObject(htmlElementAttributes$1, arrayToMap);\n\n  function arrayToMap(array) {\n    var map = Object.create(null);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = array[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var value = _step.value;\n        map[value] = true;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return map;\n  }\n\n  function mapObject(object, fn) {\n    var newObject = Object.create(null);\n\n    for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      newObject[key] = fn(object[key], key);\n    }\n\n    return newObject;\n  }\n\n  function shouldPreserveContent(node, options) {\n    if (node.type === \"element\" && node.fullName === \"template\" && node.attrMap.lang && node.attrMap.lang !== \"html\") {\n      return true;\n    } // unterminated node in ie conditional comment\n    // e.g. <!--[if lt IE 9]><html><![endif]-->\n\n\n    if (node.type === \"ieConditionalComment\" && node.lastChild && !node.lastChild.isSelfClosing && !node.lastChild.endSourceSpan) {\n      return true;\n    } // incomplete html in ie conditional comment\n    // e.g. <!--[if lt IE 9]></div><![endif]-->\n\n\n    if (node.type === \"ieConditionalComment\" && !node.complete) {\n      return true;\n    } // top-level elements (excluding <template>, <style> and <script>) in Vue SFC are considered custom block\n    // custom blocks can be written in other languages so we should preserve them to not break the code\n\n\n    if (options.parser === \"vue\" && node.type === \"element\" && node.parent.type === \"root\" && [\"template\", \"style\", \"script\", // vue parser can be used for vue dom template as well, so we should still format top-level <html>\n    \"html\"].indexOf(node.fullName) === -1) {\n      return true;\n    } // TODO: handle non-text children in <pre>\n\n\n    if (isPreLikeNode(node) && node.children.some(function (child) {\n      return child.type !== \"text\" && child.type !== \"interpolation\";\n    })) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function hasPrettierIgnore(node) {\n    if (node.type === \"attribute\" || isTextLikeNode(node)) {\n      return false;\n    }\n\n    if (!node.parent) {\n      return false;\n    }\n\n    if (typeof node.index !== \"number\" || node.index === 0) {\n      return false;\n    }\n\n    var prevNode = node.parent.children[node.index - 1];\n    return isPrettierIgnore(prevNode);\n  }\n\n  function isPrettierIgnore(node) {\n    return node.type === \"comment\" && node.value.trim() === \"prettier-ignore\";\n  }\n\n  function getPrettierIgnoreAttributeCommentData(value) {\n    var match = value.trim().match(/^prettier-ignore-attribute(?:\\s+([^]+))?$/);\n\n    if (!match) {\n      return false;\n    }\n\n    if (!match[1]) {\n      return true;\n    }\n\n    return match[1].split(/\\s+/);\n  }\n  /** there's no opening/closing tag or it's considered not breakable */\n\n\n  function isTextLikeNode(node) {\n    return node.type === \"text\" || node.type === \"comment\";\n  }\n\n  function isScriptLikeTag(node) {\n    return node.type === \"element\" && (node.fullName === \"script\" || node.fullName === \"style\" || node.fullName === \"svg:style\");\n  }\n\n  function isFrontMatterNode(node) {\n    return node.type === \"yaml\" || node.type === \"toml\";\n  }\n\n  function canHaveInterpolation(node) {\n    return node.children && !isScriptLikeTag(node);\n  }\n\n  function isWhitespaceSensitiveNode(node) {\n    return isScriptLikeTag(node) || node.type === \"interpolation\" || isIndentationSensitiveNode(node);\n  }\n\n  function isIndentationSensitiveNode(node) {\n    return getNodeCssStyleWhiteSpace(node).startsWith(\"pre\");\n  }\n\n  function isLeadingSpaceSensitiveNode(node) {\n    var isLeadingSpaceSensitive = _isLeadingSpaceSensitiveNode();\n\n    if (isLeadingSpaceSensitive && !node.prev && node.parent && node.parent.tagDefinition && node.parent.tagDefinition.ignoreFirstLf) {\n      return node.type === \"interpolation\";\n    }\n\n    return isLeadingSpaceSensitive;\n\n    function _isLeadingSpaceSensitiveNode() {\n      if (isFrontMatterNode(node)) {\n        return false;\n      }\n\n      if ((node.type === \"text\" || node.type === \"interpolation\") && node.prev && (node.prev.type === \"text\" || node.prev.type === \"interpolation\")) {\n        return true;\n      }\n\n      if (!node.parent || node.parent.cssDisplay === \"none\") {\n        return false;\n      }\n\n      if (isPreLikeNode(node.parent)) {\n        return true;\n      }\n\n      if (!node.prev && (node.parent.type === \"root\" || isScriptLikeTag(node.parent) || !isFirstChildLeadingSpaceSensitiveCssDisplay(node.parent.cssDisplay))) {\n        return false;\n      }\n\n      if (node.prev && !isNextLeadingSpaceSensitiveCssDisplay(node.prev.cssDisplay)) {\n        return false;\n      }\n\n      return true;\n    }\n  }\n\n  function isTrailingSpaceSensitiveNode(node) {\n    if (isFrontMatterNode(node)) {\n      return false;\n    }\n\n    if ((node.type === \"text\" || node.type === \"interpolation\") && node.next && (node.next.type === \"text\" || node.next.type === \"interpolation\")) {\n      return true;\n    }\n\n    if (!node.parent || node.parent.cssDisplay === \"none\") {\n      return false;\n    }\n\n    if (isPreLikeNode(node.parent)) {\n      return true;\n    }\n\n    if (!node.next && (node.parent.type === \"root\" || isScriptLikeTag(node.parent) || !isLastChildTrailingSpaceSensitiveCssDisplay(node.parent.cssDisplay))) {\n      return false;\n    }\n\n    if (node.next && !isPrevTrailingSpaceSensitiveCssDisplay(node.next.cssDisplay)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function isDanglingSpaceSensitiveNode(node) {\n    return isDanglingSpaceSensitiveCssDisplay(node.cssDisplay) && !isScriptLikeTag(node);\n  }\n\n  function forceNextEmptyLine(node) {\n    return isFrontMatterNode(node) || node.next && node.sourceSpan.end.line + 1 < node.next.sourceSpan.start.line;\n  }\n  /** firstChild leadingSpaces and lastChild trailingSpaces */\n\n\n  function forceBreakContent(node) {\n    return forceBreakChildren(node) || node.type === \"element\" && node.children.length !== 0 && ([\"body\", \"script\", \"style\"].indexOf(node.name) !== -1 || node.children.some(function (child) {\n      return hasNonTextChild(child);\n    })) || node.firstChild && node.firstChild === node.lastChild && hasLeadingLineBreak(node.firstChild) && (!node.lastChild.isTrailingSpaceSensitive || hasTrailingLineBreak(node.lastChild));\n  }\n  /** spaces between children */\n\n\n  function forceBreakChildren(node) {\n    return node.type === \"element\" && node.children.length !== 0 && ([\"html\", \"head\", \"ul\", \"ol\", \"select\"].indexOf(node.name) !== -1 || node.cssDisplay.startsWith(\"table\") && node.cssDisplay !== \"table-cell\");\n  }\n\n  function preferHardlineAsLeadingSpaces(node) {\n    return preferHardlineAsSurroundingSpaces(node) || node.prev && preferHardlineAsTrailingSpaces(node.prev) || hasSurroundingLineBreak(node);\n  }\n\n  function preferHardlineAsTrailingSpaces(node) {\n    return preferHardlineAsSurroundingSpaces(node) || node.type === \"element\" && node.fullName === \"br\" || hasSurroundingLineBreak(node);\n  }\n\n  function hasSurroundingLineBreak(node) {\n    return hasLeadingLineBreak(node) && hasTrailingLineBreak(node);\n  }\n\n  function hasLeadingLineBreak(node) {\n    return node.hasLeadingSpaces && (node.prev ? node.prev.sourceSpan.end.line < node.sourceSpan.start.line : node.parent.type === \"root\" || node.parent.startSourceSpan.end.line < node.sourceSpan.start.line);\n  }\n\n  function hasTrailingLineBreak(node) {\n    return node.hasTrailingSpaces && (node.next ? node.next.sourceSpan.start.line > node.sourceSpan.end.line : node.parent.type === \"root\" || node.parent.endSourceSpan.start.line > node.sourceSpan.end.line);\n  }\n\n  function preferHardlineAsSurroundingSpaces(node) {\n    switch (node.type) {\n      case \"ieConditionalComment\":\n      case \"comment\":\n      case \"directive\":\n        return true;\n\n      case \"element\":\n        return [\"script\", \"select\"].indexOf(node.name) !== -1;\n    }\n\n    return false;\n  }\n\n  function getLastDescendant(node) {\n    return node.lastChild ? getLastDescendant(node.lastChild) : node;\n  }\n\n  function hasNonTextChild(node) {\n    return node.children && node.children.some(function (child) {\n      return child.type !== \"text\";\n    });\n  }\n\n  function inferScriptParser(node) {\n    if (node.name === \"script\" && !node.attrMap.src) {\n      if (!node.attrMap.lang && !node.attrMap.type || node.attrMap.type === \"module\" || node.attrMap.type === \"text/javascript\" || node.attrMap.type === \"text/babel\" || node.attrMap.type === \"application/javascript\") {\n        return \"babel\";\n      }\n\n      if (node.attrMap.type === \"application/x-typescript\" || node.attrMap.lang === \"ts\" || node.attrMap.lang === \"tsx\") {\n        return \"typescript\";\n      }\n\n      if (node.attrMap.type === \"text/markdown\") {\n        return \"markdown\";\n      }\n\n      if (node.attrMap.type.endsWith(\"json\") || node.attrMap.type.endsWith(\"importmap\")) {\n        return \"json\";\n      }\n    }\n\n    if (node.name === \"style\") {\n      if (!node.attrMap.lang || node.attrMap.lang === \"postcss\" || node.attrMap.lang === \"css\") {\n        return \"css\";\n      }\n\n      if (node.attrMap.lang === \"scss\") {\n        return \"scss\";\n      }\n\n      if (node.attrMap.lang === \"less\") {\n        return \"less\";\n      }\n    }\n\n    return null;\n  }\n\n  function isBlockLikeCssDisplay(cssDisplay) {\n    return cssDisplay === \"block\" || cssDisplay === \"list-item\" || cssDisplay.startsWith(\"table\");\n  }\n\n  function isFirstChildLeadingSpaceSensitiveCssDisplay(cssDisplay) {\n    return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== \"inline-block\";\n  }\n\n  function isLastChildTrailingSpaceSensitiveCssDisplay(cssDisplay) {\n    return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== \"inline-block\";\n  }\n\n  function isPrevTrailingSpaceSensitiveCssDisplay(cssDisplay) {\n    return !isBlockLikeCssDisplay(cssDisplay);\n  }\n\n  function isNextLeadingSpaceSensitiveCssDisplay(cssDisplay) {\n    return !isBlockLikeCssDisplay(cssDisplay);\n  }\n\n  function isDanglingSpaceSensitiveCssDisplay(cssDisplay) {\n    return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== \"inline-block\";\n  }\n\n  function isPreLikeNode(node) {\n    return getNodeCssStyleWhiteSpace(node).startsWith(\"pre\");\n  }\n\n  function countParents(path) {\n    var predicate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n      return true;\n    };\n    var counter = 0;\n\n    for (var i = path.stack.length - 1; i >= 0; i--) {\n      var value = path.stack[i];\n\n      if (value && _typeof(value) === \"object\" && !Array.isArray(value) && predicate(value)) {\n        counter++;\n      }\n    }\n\n    return counter;\n  }\n\n  function hasParent(node, fn) {\n    var current = node;\n\n    while (current) {\n      if (fn(current)) {\n        return true;\n      }\n\n      current = current.parent;\n    }\n\n    return false;\n  }\n\n  function getNodeCssStyleDisplay(node, options) {\n    if (node.prev && node.prev.type === \"comment\") {\n      // <!-- display: block -->\n      var match = node.prev.value.match(/^\\s*display:\\s*([a-z]+)\\s*$/);\n\n      if (match) {\n        return match[1];\n      }\n    }\n\n    var isInSvgForeignObject = false;\n\n    if (node.type === \"element\" && node.namespace === \"svg\") {\n      if (hasParent(node, function (parent) {\n        return parent.fullName === \"svg:foreignObject\";\n      })) {\n        isInSvgForeignObject = true;\n      } else {\n        return node.name === \"svg\" ? \"inline-block\" : \"block\";\n      }\n    }\n\n    switch (options.htmlWhitespaceSensitivity) {\n      case \"strict\":\n        return \"inline\";\n\n      case \"ignore\":\n        return \"block\";\n\n      default:\n        return node.type === \"element\" && (!node.namespace || isInSvgForeignObject) && CSS_DISPLAY_TAGS[node.name] || CSS_DISPLAY_DEFAULT;\n    }\n  }\n\n  function getNodeCssStyleWhiteSpace(node) {\n    return node.type === \"element\" && !node.namespace && CSS_WHITE_SPACE_TAGS[node.name] || CSS_WHITE_SPACE_DEFAULT;\n  }\n\n  function getMinIndentation(text) {\n    var minIndentation = Infinity;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = text.split(\"\\n\")[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var lineText = _step2.value;\n\n        if (lineText.length === 0) {\n          continue;\n        }\n\n        if (/\\S/.test(lineText[0])) {\n          return 0;\n        }\n\n        var indentation = lineText.match(/^\\s*/)[0].length;\n\n        if (lineText.length === indentation) {\n          continue;\n        }\n\n        if (indentation < minIndentation) {\n          minIndentation = indentation;\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    return minIndentation === Infinity ? 0 : minIndentation;\n  }\n\n  function dedentString(text) {\n    var minIndent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getMinIndentation(text);\n    return minIndent === 0 ? text : text.split(\"\\n\").map(function (lineText) {\n      return lineText.slice(minIndent);\n    }).join(\"\\n\");\n  }\n\n  function normalizeParts(parts) {\n    var newParts = [];\n    var restParts = parts.slice();\n\n    while (restParts.length !== 0) {\n      var part = restParts.shift();\n\n      if (!part) {\n        continue;\n      }\n\n      if (part.type === \"concat\") {\n        Array.prototype.unshift.apply(restParts, part.parts);\n        continue;\n      }\n\n      if (newParts.length !== 0 && typeof newParts[newParts.length - 1] === \"string\" && typeof part === \"string\") {\n        newParts.push(newParts.pop() + part);\n        continue;\n      }\n\n      newParts.push(part);\n    }\n\n    return newParts;\n  }\n\n  function identity(x) {\n    return x;\n  }\n\n  function shouldNotPrintClosingTag(node, options) {\n    return !node.isSelfClosing && !node.endSourceSpan && (hasPrettierIgnore(node) || shouldPreserveContent(node.parent, options));\n  }\n\n  function countChars(text, char) {\n    var counter = 0;\n\n    for (var i = 0; i < text.length; i++) {\n      if (text[i] === char) {\n        counter++;\n      }\n    }\n\n    return counter;\n  }\n\n  function unescapeQuoteEntities(text) {\n    return text.replace(/&apos;/g, \"'\").replace(/&quot;/g, '\"');\n  }\n\n  var utils$3 = {\n    HTML_ELEMENT_ATTRIBUTES: HTML_ELEMENT_ATTRIBUTES,\n    HTML_TAGS: HTML_TAGS,\n    canHaveInterpolation: canHaveInterpolation,\n    countChars: countChars,\n    countParents: countParents,\n    dedentString: dedentString,\n    forceBreakChildren: forceBreakChildren,\n    forceBreakContent: forceBreakContent,\n    forceNextEmptyLine: forceNextEmptyLine,\n    getLastDescendant: getLastDescendant,\n    getNodeCssStyleDisplay: getNodeCssStyleDisplay,\n    getNodeCssStyleWhiteSpace: getNodeCssStyleWhiteSpace,\n    getPrettierIgnoreAttributeCommentData: getPrettierIgnoreAttributeCommentData,\n    hasPrettierIgnore: hasPrettierIgnore,\n    identity: identity,\n    inferScriptParser: inferScriptParser,\n    isDanglingSpaceSensitiveNode: isDanglingSpaceSensitiveNode,\n    isFrontMatterNode: isFrontMatterNode,\n    isIndentationSensitiveNode: isIndentationSensitiveNode,\n    isLeadingSpaceSensitiveNode: isLeadingSpaceSensitiveNode,\n    isPreLikeNode: isPreLikeNode,\n    isScriptLikeTag: isScriptLikeTag,\n    isTextLikeNode: isTextLikeNode,\n    isTrailingSpaceSensitiveNode: isTrailingSpaceSensitiveNode,\n    isWhitespaceSensitiveNode: isWhitespaceSensitiveNode,\n    normalizeParts: normalizeParts,\n    preferHardlineAsLeadingSpaces: preferHardlineAsLeadingSpaces,\n    preferHardlineAsTrailingSpaces: preferHardlineAsTrailingSpaces,\n    shouldNotPrintClosingTag: shouldNotPrintClosingTag,\n    shouldPreserveContent: shouldPreserveContent,\n    unescapeQuoteEntities: unescapeQuoteEntities\n  };\n\n  var canHaveInterpolation$1 = utils$3.canHaveInterpolation,\n      getNodeCssStyleDisplay$1 = utils$3.getNodeCssStyleDisplay,\n      isDanglingSpaceSensitiveNode$1 = utils$3.isDanglingSpaceSensitiveNode,\n      isIndentationSensitiveNode$1 = utils$3.isIndentationSensitiveNode,\n      isLeadingSpaceSensitiveNode$1 = utils$3.isLeadingSpaceSensitiveNode,\n      isTrailingSpaceSensitiveNode$1 = utils$3.isTrailingSpaceSensitiveNode,\n      isWhitespaceSensitiveNode$1 = utils$3.isWhitespaceSensitiveNode;\n  var PREPROCESS_PIPELINE = [removeIgnorableFirstLf, mergeIeConditonalStartEndCommentIntoElementOpeningTag, mergeCdataIntoText, extractInterpolation, extractWhitespaces, addCssDisplay, addIsSelfClosing, addHasHtmComponentClosingTag, addIsSpaceSensitive, mergeSimpleElementIntoText];\n\n  function preprocess(ast, options) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = PREPROCESS_PIPELINE[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var fn = _step.value;\n        ast = fn(ast, options);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return ast;\n  }\n\n  function removeIgnorableFirstLf(ast\n  /*, options */\n  ) {\n    return ast.map(function (node) {\n      if (node.type === \"element\" && node.tagDefinition.ignoreFirstLf && node.children.length !== 0 && node.children[0].type === \"text\" && node.children[0].value[0] === \"\\n\") {\n        var text = node.children[0];\n        return node.clone({\n          children: text.value.length === 1 ? node.children.slice(1) : [].concat(text.clone({\n            value: text.value.slice(1)\n          }), node.children.slice(1))\n        });\n      }\n\n      return node;\n    });\n  }\n\n  function mergeIeConditonalStartEndCommentIntoElementOpeningTag(ast\n  /*, options */\n  ) {\n    /**\n     *     <!--[if ...]><!--><target><!--<![endif]-->\n     */\n    var isTarget = function isTarget(node) {\n      return node.type === \"element\" && node.prev && node.prev.type === \"ieConditionalStartComment\" && node.prev.sourceSpan.end.offset === node.startSourceSpan.start.offset && node.firstChild && node.firstChild.type === \"ieConditionalEndComment\" && node.firstChild.sourceSpan.start.offset === node.startSourceSpan.end.offset;\n    };\n\n    return ast.map(function (node) {\n      if (node.children) {\n        var isTargetResults = node.children.map(isTarget);\n\n        if (isTargetResults.some(Boolean)) {\n          var newChildren = [];\n\n          for (var i = 0; i < node.children.length; i++) {\n            var child = node.children[i];\n\n            if (isTargetResults[i + 1]) {\n              // ieConditionalStartComment\n              continue;\n            }\n\n            if (isTargetResults[i]) {\n              var ieConditionalStartComment = child.prev;\n              var ieConditionalEndComment = child.firstChild;\n              var ParseSourceSpan = child.sourceSpan.constructor;\n              var startSourceSpan = new ParseSourceSpan(ieConditionalStartComment.sourceSpan.start, ieConditionalEndComment.sourceSpan.end);\n              var sourceSpan = new ParseSourceSpan(startSourceSpan.start, child.sourceSpan.end);\n              newChildren.push(child.clone({\n                condition: ieConditionalStartComment.condition,\n                sourceSpan: sourceSpan,\n                startSourceSpan: startSourceSpan,\n                children: child.children.slice(1)\n              }));\n              continue;\n            }\n\n            newChildren.push(child);\n          }\n\n          return node.clone({\n            children: newChildren\n          });\n        }\n      }\n\n      return node;\n    });\n  }\n\n  function mergeNodeIntoText(ast, shouldMerge, getValue) {\n    return ast.map(function (node) {\n      if (node.children) {\n        var shouldMergeResults = node.children.map(shouldMerge);\n\n        if (shouldMergeResults.some(Boolean)) {\n          var newChildren = [];\n\n          for (var i = 0; i < node.children.length; i++) {\n            var child = node.children[i];\n\n            if (child.type !== \"text\" && !shouldMergeResults[i]) {\n              newChildren.push(child);\n              continue;\n            }\n\n            var newChild = child.type === \"text\" ? child : child.clone({\n              type: \"text\",\n              value: getValue(child)\n            });\n\n            if (newChildren.length === 0 || newChildren[newChildren.length - 1].type !== \"text\") {\n              newChildren.push(newChild);\n              continue;\n            }\n\n            var lastChild = newChildren.pop();\n            var ParseSourceSpan = lastChild.sourceSpan.constructor;\n            newChildren.push(lastChild.clone({\n              value: lastChild.value + newChild.value,\n              sourceSpan: new ParseSourceSpan(lastChild.sourceSpan.start, newChild.sourceSpan.end)\n            }));\n          }\n\n          return node.clone({\n            children: newChildren\n          });\n        }\n      }\n\n      return node;\n    });\n  }\n\n  function mergeCdataIntoText(ast\n  /*, options */\n  ) {\n    return mergeNodeIntoText(ast, function (node) {\n      return node.type === \"cdata\";\n    }, function (node) {\n      return \"<![CDATA[\".concat(node.value, \"]]>\");\n    });\n  }\n\n  function mergeSimpleElementIntoText(ast\n  /*, options */\n  ) {\n    var isSimpleElement = function isSimpleElement(node) {\n      return node.type === \"element\" && node.attrs.length === 0 && node.children.length === 1 && node.firstChild.type === \"text\" && // \\xA0: non-breaking whitespace\n      !/[^\\S\\xA0]/.test(node.children[0].value) && !node.firstChild.hasLeadingSpaces && !node.firstChild.hasTrailingSpaces && node.isLeadingSpaceSensitive && !node.hasLeadingSpaces && node.isTrailingSpaceSensitive && !node.hasTrailingSpaces && node.prev && node.prev.type === \"text\" && node.next && node.next.type === \"text\";\n    };\n\n    return ast.map(function (node) {\n      if (node.children) {\n        var isSimpleElementResults = node.children.map(isSimpleElement);\n\n        if (isSimpleElementResults.some(Boolean)) {\n          var newChildren = [];\n\n          for (var i = 0; i < node.children.length; i++) {\n            var child = node.children[i];\n\n            if (isSimpleElementResults[i]) {\n              var lastChild = newChildren.pop();\n              var nextChild = node.children[++i];\n              var ParseSourceSpan = node.sourceSpan.constructor;\n              var isTrailingSpaceSensitive = nextChild.isTrailingSpaceSensitive,\n                  hasTrailingSpaces = nextChild.hasTrailingSpaces;\n              newChildren.push(lastChild.clone({\n                value: lastChild.value + \"<\".concat(child.rawName, \">\") + child.firstChild.value + \"</\".concat(child.rawName, \">\") + nextChild.value,\n                sourceSpan: new ParseSourceSpan(lastChild.sourceSpan.start, nextChild.sourceSpan.end),\n                isTrailingSpaceSensitive: isTrailingSpaceSensitive,\n                hasTrailingSpaces: hasTrailingSpaces\n              }));\n            } else {\n              newChildren.push(child);\n            }\n          }\n\n          return node.clone({\n            children: newChildren\n          });\n        }\n      }\n\n      return node;\n    });\n  }\n\n  function extractInterpolation(ast, options) {\n    if (options.parser === \"html\") {\n      return ast;\n    }\n\n    var interpolationRegex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n    return ast.map(function (node) {\n      if (!canHaveInterpolation$1(node)) {\n        return node;\n      }\n\n      var newChildren = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = node.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var child = _step2.value;\n\n          if (child.type !== \"text\") {\n            newChildren.push(child);\n            continue;\n          }\n\n          var ParseSourceSpan = child.sourceSpan.constructor;\n          var startSourceSpan = child.sourceSpan.start;\n          var endSourceSpan = null;\n          var components = child.value.split(interpolationRegex);\n\n          for (var i = 0; i < components.length; i++, startSourceSpan = endSourceSpan) {\n            var value = components[i];\n\n            if (i % 2 === 0) {\n              endSourceSpan = startSourceSpan.moveBy(value.length);\n\n              if (value.length !== 0) {\n                newChildren.push({\n                  type: \"text\",\n                  value: value,\n                  sourceSpan: new ParseSourceSpan(startSourceSpan, endSourceSpan)\n                });\n              }\n\n              continue;\n            }\n\n            endSourceSpan = startSourceSpan.moveBy(value.length + 4); // `{{` + `}}`\n\n            newChildren.push({\n              type: \"interpolation\",\n              sourceSpan: new ParseSourceSpan(startSourceSpan, endSourceSpan),\n              children: value.length === 0 ? [] : [{\n                type: \"text\",\n                value: value,\n                sourceSpan: new ParseSourceSpan(startSourceSpan.moveBy(2), endSourceSpan.moveBy(-2))\n              }]\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return node.clone({\n        children: newChildren\n      });\n    });\n  }\n  /**\n   * - add `hasLeadingSpaces` field\n   * - add `hasTrailingSpaces` field\n   * - add `hasDanglingSpaces` field for parent nodes\n   * - add `isWhitespaceSensitive`, `isIndentationSensitive` field for text nodes\n   * - remove insensitive whitespaces\n   */\n\n\n  function extractWhitespaces(ast\n  /*, options*/\n  ) {\n    var TYPE_WHITESPACE = \"whitespace\";\n    return ast.map(function (node) {\n      if (!node.children) {\n        return node;\n      }\n\n      if (node.children.length === 0 || node.children.length === 1 && node.children[0].type === \"text\" && node.children[0].value.trim().length === 0) {\n        return node.clone({\n          children: [],\n          hasDanglingSpaces: node.children.length !== 0\n        });\n      }\n\n      var isWhitespaceSensitive = isWhitespaceSensitiveNode$1(node);\n      var isIndentationSensitive = isIndentationSensitiveNode$1(node);\n      return node.clone({\n        isWhitespaceSensitive: isWhitespaceSensitive,\n        isIndentationSensitive: isIndentationSensitive,\n        children: node.children // extract whitespace nodes\n        .reduce(function (newChildren, child) {\n          if (child.type !== \"text\" || isWhitespaceSensitive) {\n            return newChildren.concat(child);\n          }\n\n          var localChildren = [];\n\n          var _child$value$match = child.value.match(/^(\\s*)([\\s\\S]*?)(\\s*)$/),\n              _child$value$match2 = _slicedToArray(_child$value$match, 4),\n              leadingSpaces = _child$value$match2[1],\n              text = _child$value$match2[2],\n              trailingSpaces = _child$value$match2[3];\n\n          if (leadingSpaces) {\n            localChildren.push({\n              type: TYPE_WHITESPACE\n            });\n          }\n\n          var ParseSourceSpan = child.sourceSpan.constructor;\n\n          if (text) {\n            localChildren.push({\n              type: \"text\",\n              value: text,\n              sourceSpan: new ParseSourceSpan(child.sourceSpan.start.moveBy(leadingSpaces.length), child.sourceSpan.end.moveBy(-trailingSpaces.length))\n            });\n          }\n\n          if (trailingSpaces) {\n            localChildren.push({\n              type: TYPE_WHITESPACE\n            });\n          }\n\n          return newChildren.concat(localChildren);\n        }, []) // set hasLeadingSpaces/hasTrailingSpaces and filter whitespace nodes\n        .reduce(function (newChildren, child, i, children) {\n          if (child.type === TYPE_WHITESPACE) {\n            return newChildren;\n          }\n\n          var hasLeadingSpaces = i !== 0 && children[i - 1].type === TYPE_WHITESPACE;\n          var hasTrailingSpaces = i !== children.length - 1 && children[i + 1].type === TYPE_WHITESPACE;\n          return newChildren.concat(Object.assign({}, child, {\n            hasLeadingSpaces: hasLeadingSpaces,\n            hasTrailingSpaces: hasTrailingSpaces\n          }));\n        }, [])\n      });\n    });\n  }\n\n  function addIsSelfClosing(ast\n  /*, options */\n  ) {\n    return ast.map(function (node) {\n      return Object.assign(node, {\n        isSelfClosing: !node.children || node.type === \"element\" && (node.tagDefinition.isVoid || // self-closing\n        node.startSourceSpan === node.endSourceSpan)\n      });\n    });\n  }\n\n  function addHasHtmComponentClosingTag(ast, options) {\n    return ast.map(function (node) {\n      return node.type !== \"element\" ? node : Object.assign(node, {\n        hasHtmComponentClosingTag: node.endSourceSpan && /^<\\s*\\/\\s*\\/\\s*>$/.test(options.originalText.slice(node.endSourceSpan.start.offset, node.endSourceSpan.end.offset))\n      });\n    });\n  }\n\n  function addCssDisplay(ast, options) {\n    return ast.map(function (node) {\n      return Object.assign(node, {\n        cssDisplay: getNodeCssStyleDisplay$1(node, options)\n      });\n    });\n  }\n  /**\n   * - add `isLeadingSpaceSensitive` field\n   * - add `isTrailingSpaceSensitive` field\n   * - add `isDanglingSpaceSensitive` field for parent nodes\n   */\n\n\n  function addIsSpaceSensitive(ast\n  /*, options */\n  ) {\n    return ast.map(function (node) {\n      if (!node.children) {\n        return node;\n      }\n\n      if (node.children.length === 0) {\n        return node.clone({\n          isDanglingSpaceSensitive: isDanglingSpaceSensitiveNode$1(node)\n        });\n      }\n\n      return node.clone({\n        children: node.children.map(function (child) {\n          return Object.assign({}, child, {\n            isLeadingSpaceSensitive: isLeadingSpaceSensitiveNode$1(child),\n            isTrailingSpaceSensitive: isTrailingSpaceSensitiveNode$1(child)\n          });\n        }).map(function (child, index, children) {\n          return Object.assign({}, child, {\n            isLeadingSpaceSensitive: index === 0 ? child.isLeadingSpaceSensitive : children[index - 1].isTrailingSpaceSensitive && child.isLeadingSpaceSensitive,\n            isTrailingSpaceSensitive: index === children.length - 1 ? child.isTrailingSpaceSensitive : children[index + 1].isLeadingSpaceSensitive && child.isTrailingSpaceSensitive\n          });\n        })\n      });\n    });\n  }\n\n  var preprocess_1 = preprocess;\n\n  function hasPragma$3(text) {\n    return /^\\s*<!--\\s*@(format|prettier)\\s*-->/.test(text);\n  }\n\n  function insertPragma$5(text) {\n    return \"<!-- @format -->\\n\\n\" + text.replace(/^\\s*\\n/, \"\");\n  }\n\n  var pragma$3 = {\n    hasPragma: hasPragma$3,\n    insertPragma: insertPragma$5\n  };\n\n  var _require$$0$builders$4 = doc.builders,\n      concat$8 = _require$$0$builders$4.concat,\n      group$8 = _require$$0$builders$4.group;\n  /**\n   *     v-for=\"... in ...\"\n   *     v-for=\"... of ...\"\n   *     v-for=\"(..., ...) in ...\"\n   *     v-for=\"(..., ...) of ...\"\n   */\n\n  function printVueFor(value, textToDoc) {\n    var _parseVueFor = parseVueFor(value),\n        left = _parseVueFor.left,\n        operator = _parseVueFor.operator,\n        right = _parseVueFor.right;\n\n    return concat$8([group$8(textToDoc(\"function _(\".concat(left, \") {}\"), {\n      parser: \"babel\",\n      __isVueForBindingLeft: true\n    })), \" \", operator, \" \", textToDoc(right, {\n      parser: \"__js_expression\"\n    })]);\n  } // modified from https://github.com/vuejs/vue/blob/v2.5.17/src/compiler/parser/index.js#L370-L387\n\n\n  function parseVueFor(value) {\n    var forAliasRE = /([^]*?)\\s+(in|of)\\s+([^]*)/;\n    var forIteratorRE = /,([^,}\\]]*)(?:,([^,}\\]]*))?$/;\n    var stripParensRE = /^\\(|\\)$/g;\n    var inMatch = value.match(forAliasRE);\n\n    if (!inMatch) {\n      return;\n    }\n\n    var res = {};\n    res.for = inMatch[3].trim();\n    var alias = inMatch[1].trim().replace(stripParensRE, \"\");\n    var iteratorMatch = alias.match(forIteratorRE);\n\n    if (iteratorMatch) {\n      res.alias = alias.replace(forIteratorRE, \"\");\n      res.iterator1 = iteratorMatch[1].trim();\n\n      if (iteratorMatch[2]) {\n        res.iterator2 = iteratorMatch[2].trim();\n      }\n    } else {\n      res.alias = alias;\n    }\n\n    return {\n      left: \"\".concat([res.alias, res.iterator1, res.iterator2].filter(Boolean).join(\",\")),\n      operator: inMatch[2],\n      right: res.for\n    };\n  }\n\n  function printVueSlotScope(value, textToDoc) {\n    return textToDoc(\"function _(\".concat(value, \") {}\"), {\n      parser: \"babel\",\n      __isVueSlotScope: true\n    });\n  }\n\n  function isVueEventBindingExpression(eventBindingValue) {\n    // https://github.com/vuejs/vue/blob/v2.5.17/src/compiler/codegen/events.js#L3-L4\n    // arrow function or anonymous function\n    var fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/; // simple member expression chain (a, a.b, a['b'], a[\"b\"], a[0], a[b])\n\n    var simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/; // https://github.com/vuejs/vue/blob/v2.5.17/src/compiler/helpers.js#L104\n\n    var value = eventBindingValue.trim();\n    return fnExpRE.test(value) || simplePathRE.test(value);\n  }\n\n  var syntaxVue = {\n    isVueEventBindingExpression: isVueEventBindingExpression,\n    printVueFor: printVueFor,\n    printVueSlotScope: printVueSlotScope\n  };\n\n  var parseSrcset = createCommonjsModule(function (module) {\n    /**\n     * Srcset Parser\n     *\n     * By Alex Bell |  MIT License\n     *\n     * JS Parser for the string value that appears in markup <img srcset=\"here\">\n     *\n     * @returns Array [{url: _, d: _, w: _, h:_}, ...]\n     *\n     * Based super duper closely on the reference algorithm at:\n     * https://html.spec.whatwg.org/multipage/embedded-content.html#parse-a-srcset-attribute\n     *\n     * Most comments are copied in directly from the spec\n     * (except for comments in parens).\n     */\n    (function (root, factory) {\n      if ( module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n      } else {\n        // Browser globals (root is window)\n        root.parseSrcset = factory();\n      }\n    })(commonjsGlobal, function () {\n      // 1. Let input be the value passed to this algorithm.\n      return function (input, options) {\n        var logger = options && options.logger || console; // UTILITY FUNCTIONS\n        // Manual is faster than RegEx\n        // http://bjorn.tipling.com/state-and-regular-expressions-in-javascript\n        // http://jsperf.com/whitespace-character/5\n\n        function isSpace(c) {\n          return c === \" \" || // space\n          c === \"\\t\" || // horizontal tab\n          c === \"\\n\" || // new line\n          c === \"\\f\" || // form feed\n          c === \"\\r\"; // carriage return\n        }\n\n        function collectCharacters(regEx) {\n          var chars,\n              match = regEx.exec(input.substring(pos));\n\n          if (match) {\n            chars = match[0];\n            pos += chars.length;\n            return chars;\n          }\n        }\n\n        var inputLength = input.length,\n            // (Don't use \\s, to avoid matching non-breaking space)\n        regexLeadingSpaces = /^[ \\t\\n\\r\\u000c]+/,\n            regexLeadingCommasOrSpaces = /^[, \\t\\n\\r\\u000c]+/,\n            regexLeadingNotSpaces = /^[^ \\t\\n\\r\\u000c]+/,\n            regexTrailingCommas = /[,]+$/,\n            regexNonNegativeInteger = /^\\d+$/,\n            // ( Positive or negative or unsigned integers or decimals, without or without exponents.\n        // Must include at least one digit.\n        // According to spec tests any decimal point must be followed by a digit.\n        // No leading plus sign is allowed.)\n        // https://html.spec.whatwg.org/multipage/infrastructure.html#valid-floating-point-number\n        regexFloatingPoint = /^-?(?:[0-9]+|[0-9]*\\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/,\n            url,\n            descriptors,\n            currentDescriptor,\n            state,\n            c,\n            // 2. Let position be a pointer into input, initially pointing at the start\n        //    of the string.\n        pos = 0,\n            // 3. Let candidates be an initially empty source set.\n        candidates = []; // 4. Splitting loop: Collect a sequence of characters that are space\n        //    characters or U+002C COMMA characters. If any U+002C COMMA characters\n        //    were collected, that is a parse error.\n\n        while (true) {\n          collectCharacters(regexLeadingCommasOrSpaces); // 5. If position is past the end of input, return candidates and abort these steps.\n\n          if (pos >= inputLength) {\n            return candidates; // (we're done, this is the sole return path)\n          } // 6. Collect a sequence of characters that are not space characters,\n          //    and let that be url.\n\n\n          url = collectCharacters(regexLeadingNotSpaces); // 7. Let descriptors be a new empty list.\n\n          descriptors = []; // 8. If url ends with a U+002C COMMA character (,), follow these substeps:\n          //\t\t(1). Remove all trailing U+002C COMMA characters from url. If this removed\n          //         more than one character, that is a parse error.\n\n          if (url.slice(-1) === \",\") {\n            url = url.replace(regexTrailingCommas, \"\"); // (Jump ahead to step 9 to skip tokenization and just push the candidate).\n\n            parseDescriptors(); //\tOtherwise, follow these substeps:\n          } else {\n            tokenize();\n          } // (close else of step 8)\n          // 16. Return to the step labeled splitting loop.\n\n        } // (Close of big while loop.)\n\n        /**\n         * Tokenizes descriptor properties prior to parsing\n         * Returns undefined.\n         */\n\n\n        function tokenize() {\n          // 8.1. Descriptor tokeniser: Skip whitespace\n          collectCharacters(regexLeadingSpaces); // 8.2. Let current descriptor be the empty string.\n\n          currentDescriptor = \"\"; // 8.3. Let state be in descriptor.\n\n          state = \"in descriptor\";\n\n          while (true) {\n            // 8.4. Let c be the character at position.\n            c = input.charAt(pos); //  Do the following depending on the value of state.\n            //  For the purpose of this step, \"EOF\" is a special character representing\n            //  that position is past the end of input.\n            // In descriptor\n\n            if (state === \"in descriptor\") {\n              // Do the following, depending on the value of c:\n              // Space character\n              // If current descriptor is not empty, append current descriptor to\n              // descriptors and let current descriptor be the empty string.\n              // Set state to after descriptor.\n              if (isSpace(c)) {\n                if (currentDescriptor) {\n                  descriptors.push(currentDescriptor);\n                  currentDescriptor = \"\";\n                  state = \"after descriptor\";\n                } // U+002C COMMA (,)\n                // Advance position to the next character in input. If current descriptor\n                // is not empty, append current descriptor to descriptors. Jump to the step\n                // labeled descriptor parser.\n\n              } else if (c === \",\") {\n                pos += 1;\n\n                if (currentDescriptor) {\n                  descriptors.push(currentDescriptor);\n                }\n\n                parseDescriptors();\n                return; // U+0028 LEFT PARENTHESIS (()\n                // Append c to current descriptor. Set state to in parens.\n              } else if (c === \"(\") {\n                currentDescriptor = currentDescriptor + c;\n                state = \"in parens\"; // EOF\n                // If current descriptor is not empty, append current descriptor to\n                // descriptors. Jump to the step labeled descriptor parser.\n              } else if (c === \"\") {\n                if (currentDescriptor) {\n                  descriptors.push(currentDescriptor);\n                }\n\n                parseDescriptors();\n                return; // Anything else\n                // Append c to current descriptor.\n              } else {\n                currentDescriptor = currentDescriptor + c;\n              } // (end \"in descriptor\"\n              // In parens\n\n            } else if (state === \"in parens\") {\n              // U+0029 RIGHT PARENTHESIS ())\n              // Append c to current descriptor. Set state to in descriptor.\n              if (c === \")\") {\n                currentDescriptor = currentDescriptor + c;\n                state = \"in descriptor\"; // EOF\n                // Append current descriptor to descriptors. Jump to the step labeled\n                // descriptor parser.\n              } else if (c === \"\") {\n                descriptors.push(currentDescriptor);\n                parseDescriptors();\n                return; // Anything else\n                // Append c to current descriptor.\n              } else {\n                currentDescriptor = currentDescriptor + c;\n              } // After descriptor\n\n            } else if (state === \"after descriptor\") {\n              // Do the following, depending on the value of c:\n              // Space character: Stay in this state.\n              if (isSpace(c)) ; else if (c === \"\") {\n                parseDescriptors();\n                return; // Anything else\n                // Set state to in descriptor. Set position to the previous character in input.\n              } else {\n                state = \"in descriptor\";\n                pos -= 1;\n              }\n            } // Advance position to the next character in input.\n\n\n            pos += 1; // Repeat this step.\n          } // (close while true loop)\n\n        }\n        /**\n         * Adds descriptor properties to a candidate, pushes to the candidates array\n         * @return undefined\n         */\n        // Declared outside of the while loop so that it's only created once.\n\n\n        function parseDescriptors() {\n          // 9. Descriptor parser: Let error be no.\n          var pError = false,\n              // 10. Let width be absent.\n          // 11. Let density be absent.\n          // 12. Let future-compat-h be absent. (We're implementing it now as h)\n          w,\n              d,\n              h,\n              i,\n              candidate = {},\n              desc,\n              lastChar,\n              value,\n              intVal,\n              floatVal; // 13. For each descriptor in descriptors, run the appropriate set of steps\n          // from the following list:\n\n          for (i = 0; i < descriptors.length; i++) {\n            desc = descriptors[i];\n            lastChar = desc[desc.length - 1];\n            value = desc.substring(0, desc.length - 1);\n            intVal = parseInt(value, 10);\n            floatVal = parseFloat(value); // If the descriptor consists of a valid non-negative integer followed by\n            // a U+0077 LATIN SMALL LETTER W character\n\n            if (regexNonNegativeInteger.test(value) && lastChar === \"w\") {\n              // If width and density are not both absent, then let error be yes.\n              if (w || d) {\n                pError = true;\n              } // Apply the rules for parsing non-negative integers to the descriptor.\n              // If the result is zero, let error be yes.\n              // Otherwise, let width be the result.\n\n\n              if (intVal === 0) {\n                pError = true;\n              } else {\n                w = intVal;\n              } // If the descriptor consists of a valid floating-point number followed by\n              // a U+0078 LATIN SMALL LETTER X character\n\n            } else if (regexFloatingPoint.test(value) && lastChar === \"x\") {\n              // If width, density and future-compat-h are not all absent, then let error\n              // be yes.\n              if (w || d || h) {\n                pError = true;\n              } // Apply the rules for parsing floating-point number values to the descriptor.\n              // If the result is less than zero, let error be yes. Otherwise, let density\n              // be the result.\n\n\n              if (floatVal < 0) {\n                pError = true;\n              } else {\n                d = floatVal;\n              } // If the descriptor consists of a valid non-negative integer followed by\n              // a U+0068 LATIN SMALL LETTER H character\n\n            } else if (regexNonNegativeInteger.test(value) && lastChar === \"h\") {\n              // If height and density are not both absent, then let error be yes.\n              if (h || d) {\n                pError = true;\n              } // Apply the rules for parsing non-negative integers to the descriptor.\n              // If the result is zero, let error be yes. Otherwise, let future-compat-h\n              // be the result.\n\n\n              if (intVal === 0) {\n                pError = true;\n              } else {\n                h = intVal;\n              } // Anything else, Let error be yes.\n\n            } else {\n              pError = true;\n            }\n          } // (close step 13 for loop)\n          // 15. If error is still no, then append a new image source to candidates whose\n          // URL is url, associated with a width width if not absent and a pixel\n          // density density if not absent. Otherwise, there is a parse error.\n\n\n          if (!pError) {\n            candidate.url = url;\n\n            if (w) {\n              candidate.w = w;\n            }\n\n            if (d) {\n              candidate.d = d;\n            }\n\n            if (h) {\n              candidate.h = h;\n            }\n\n            candidates.push(candidate);\n          } else if (logger && logger.error) {\n            logger.error(\"Invalid srcset descriptor found in '\" + input + \"' at '\" + desc + \"'.\");\n          }\n        } // (close parseDescriptors fn)\n\n      };\n    });\n  });\n\n  var _require$$0$builders$5 = doc.builders,\n      concat$9 = _require$$0$builders$5.concat,\n      ifBreak$4 = _require$$0$builders$5.ifBreak,\n      join$5 = _require$$0$builders$5.join,\n      line$4 = _require$$0$builders$5.line;\n\n  function printImgSrcset(value) {\n    var srcset = parseSrcset(value, {\n      logger: {\n        error: function error(message) {\n          throw new Error(message);\n        }\n      }\n    });\n    var hasW = srcset.some(function (src) {\n      return src.w;\n    });\n    var hasH = srcset.some(function (src) {\n      return src.h;\n    });\n    var hasX = srcset.some(function (src) {\n      return src.d;\n    });\n\n    if (hasW + hasH + hasX !== 1) {\n      throw new Error(\"Mixed descriptor in srcset is not supported\");\n    }\n\n    var key = hasW ? \"w\" : hasH ? \"h\" : \"d\";\n    var unit = hasW ? \"w\" : hasH ? \"h\" : \"x\";\n\n    var getMax = function getMax(values) {\n      return Math.max.apply(Math, values);\n    };\n\n    var urls = srcset.map(function (src) {\n      return src.url;\n    });\n    var maxUrlLength = getMax(urls.map(function (url) {\n      return url.length;\n    }));\n    var descriptors = srcset.map(function (src) {\n      return src[key];\n    }).map(function (descriptor) {\n      return descriptor ? descriptor.toString() : \"\";\n    });\n    var descriptorLeftLengths = descriptors.map(function (descriptor) {\n      var index = descriptor.indexOf(\".\");\n      return index === -1 ? descriptor.length : index;\n    });\n    var maxDescriptorLeftLength = getMax(descriptorLeftLengths);\n    return join$5(concat$9([\",\", line$4]), urls.map(function (url, index) {\n      var parts = [url];\n      var descriptor = descriptors[index];\n\n      if (descriptor) {\n        var urlPadding = maxUrlLength - url.length + 1;\n        var descriptorPadding = maxDescriptorLeftLength - descriptorLeftLengths[index];\n        var alignment = \" \".repeat(urlPadding + descriptorPadding);\n        parts.push(ifBreak$4(alignment, \" \"), descriptor + unit);\n      }\n\n      return concat$9(parts);\n    }));\n  }\n\n  var syntaxAttribute = {\n    printImgSrcset: printImgSrcset\n  };\n\n  var builders = doc.builders,\n      _require$$0$utils = doc.utils,\n      stripTrailingHardline$1 = _require$$0$utils.stripTrailingHardline,\n      mapDoc$4 = _require$$0$utils.mapDoc;\n  var breakParent$2 = builders.breakParent,\n      dedentToRoot$1 = builders.dedentToRoot,\n      fill$3 = builders.fill,\n      group$9 = builders.group,\n      hardline$7 = builders.hardline,\n      ifBreak$5 = builders.ifBreak,\n      indent$5 = builders.indent,\n      join$6 = builders.join,\n      line$5 = builders.line,\n      literalline$2 = builders.literalline,\n      markAsRoot$2 = builders.markAsRoot,\n      softline$4 = builders.softline;\n  var countChars$1 = utils$3.countChars,\n      countParents$1 = utils$3.countParents,\n      dedentString$1 = utils$3.dedentString,\n      forceBreakChildren$1 = utils$3.forceBreakChildren,\n      forceBreakContent$1 = utils$3.forceBreakContent,\n      forceNextEmptyLine$1 = utils$3.forceNextEmptyLine,\n      getLastDescendant$1 = utils$3.getLastDescendant,\n      getPrettierIgnoreAttributeCommentData$1 = utils$3.getPrettierIgnoreAttributeCommentData,\n      hasPrettierIgnore$1 = utils$3.hasPrettierIgnore,\n      inferScriptParser$1 = utils$3.inferScriptParser,\n      isScriptLikeTag$1 = utils$3.isScriptLikeTag,\n      isTextLikeNode$1 = utils$3.isTextLikeNode,\n      normalizeParts$1 = utils$3.normalizeParts,\n      preferHardlineAsLeadingSpaces$1 = utils$3.preferHardlineAsLeadingSpaces,\n      shouldNotPrintClosingTag$1 = utils$3.shouldNotPrintClosingTag,\n      shouldPreserveContent$1 = utils$3.shouldPreserveContent,\n      unescapeQuoteEntities$1 = utils$3.unescapeQuoteEntities;\n  var replaceEndOfLineWith$1 = util.replaceEndOfLineWith;\n  var insertPragma$6 = pragma$3.insertPragma;\n  var printVueFor$1 = syntaxVue.printVueFor,\n      printVueSlotScope$1 = syntaxVue.printVueSlotScope,\n      isVueEventBindingExpression$1 = syntaxVue.isVueEventBindingExpression;\n  var printImgSrcset$1 = syntaxAttribute.printImgSrcset;\n\n  function concat$a(parts) {\n    var newParts = normalizeParts$1(parts);\n    return newParts.length === 0 ? \"\" : newParts.length === 1 ? newParts[0] : builders.concat(newParts);\n  }\n\n  function embed$2(path, print, textToDoc, options) {\n    var node = path.getValue();\n\n    switch (node.type) {\n      case \"text\":\n        {\n          if (isScriptLikeTag$1(node.parent)) {\n            var parser = inferScriptParser$1(node.parent);\n\n            if (parser) {\n              var value = parser === \"markdown\" ? dedentString$1(node.value.replace(/^[^\\S\\n]*?\\n/, \"\")) : node.value;\n              return builders.concat([concat$a([breakParent$2, printOpeningTagPrefix(node, options), stripTrailingHardline$1(textToDoc(value, {\n                parser: parser\n              })), printClosingTagSuffix(node, options)])]);\n            }\n          } else if (node.parent.type === \"interpolation\") {\n            return concat$a([indent$5(concat$a([line$5, textToDoc(node.value, Object.assign({\n              __isInHtmlInterpolation: true // to avoid unexpected `}}`\n\n            }, options.parser === \"angular\" ? {\n              parser: \"__ng_interpolation\",\n              trailingComma: \"none\"\n            } : options.parser === \"vue\" ? {\n              parser: \"__vue_expression\"\n            } : {\n              parser: \"__js_expression\"\n            }))])), node.parent.next && needsToBorrowPrevClosingTagEndMarker(node.parent.next) ? \" \" : line$5]);\n          }\n\n          break;\n        }\n\n      case \"attribute\":\n        {\n          if (!node.value) {\n            break;\n          } // lit-html: html`<my-element obj=${obj}></my-element>`\n\n\n          if (/^PRETTIER_HTML_PLACEHOLDER_\\d+_\\d+_IN_JS$/.test(options.originalText.slice(node.valueSpan.start.offset, node.valueSpan.end.offset))) {\n            return concat$a([node.rawName, \"=\", node.value]);\n          } // lwc: html`<my-element data-for={value}></my-element>`\n\n\n          if (options.parser === \"lwc\") {\n            var interpolationRegex = /^\\{[\\s\\S]*\\}$/;\n\n            if (interpolationRegex.test(options.originalText.slice(node.valueSpan.start.offset, node.valueSpan.end.offset))) {\n              return concat$a([node.rawName, \"=\", node.value]);\n            }\n          }\n\n          var embeddedAttributeValueDoc = printEmbeddedAttributeValue(node, function (code, opts) {\n            return (// strictly prefer single quote to avoid unnecessary html entity escape\n              textToDoc(code, Object.assign({\n                __isInHtmlAttribute: true\n              }, opts))\n            );\n          }, options);\n\n          if (embeddedAttributeValueDoc) {\n            return concat$a([node.rawName, '=\"', group$9(mapDoc$4(embeddedAttributeValueDoc, function (doc) {\n              return typeof doc === \"string\" ? doc.replace(/\"/g, \"&quot;\") : doc;\n            })), '\"']);\n          }\n\n          break;\n        }\n\n      case \"yaml\":\n        return markAsRoot$2(concat$a([\"---\", hardline$7, node.value.trim().length === 0 ? \"\" : textToDoc(node.value, {\n          parser: \"yaml\"\n        }), \"---\"]));\n    }\n  }\n\n  function genericPrint$2(path, options, print) {\n    var node = path.getValue();\n\n    switch (node.type) {\n      case \"root\":\n        // use original concat to not break stripTrailingHardline\n        return builders.concat([group$9(printChildren$1(path, options, print)), hardline$7]);\n\n      case \"element\":\n      case \"ieConditionalComment\":\n        {\n          /**\n           * do not break:\n           *\n           *     <div>{{\n           *         ~\n           *       interpolation\n           *     }}</div>\n           *            ~\n           *\n           * exception: break if the opening tag breaks\n           *\n           *     <div\n           *       long\n           *           ~\n           *       >{{\n           *         interpolation\n           *       }}</div\n           *              ~\n           *     >\n           */\n          var shouldHugContent = node.children.length === 1 && node.firstChild.type === \"interpolation\" && node.firstChild.isLeadingSpaceSensitive && !node.firstChild.hasLeadingSpaces && node.lastChild.isTrailingSpaceSensitive && !node.lastChild.hasTrailingSpaces;\n          var attrGroupId = Symbol(\"element-attr-group-id\");\n          return concat$a([group$9(concat$a([group$9(printOpeningTag(path, options, print), {\n            id: attrGroupId\n          }), node.children.length === 0 ? node.hasDanglingSpaces && node.isDanglingSpaceSensitive ? line$5 : \"\" : concat$a([forceBreakContent$1(node) ? breakParent$2 : \"\", function (childrenDoc) {\n            return shouldHugContent ? ifBreak$5(indent$5(childrenDoc), childrenDoc, {\n              groupId: attrGroupId\n            }) : isScriptLikeTag$1(node) && node.parent.type === \"root\" && options.parser === \"vue\" && !options.vueIndentScriptAndStyle ? childrenDoc : indent$5(childrenDoc);\n          }(concat$a([shouldHugContent ? ifBreak$5(softline$4, \"\", {\n            groupId: attrGroupId\n          }) : node.firstChild.hasLeadingSpaces && node.firstChild.isLeadingSpaceSensitive ? line$5 : node.firstChild.type === \"text\" && node.isWhitespaceSensitive && node.isIndentationSensitive ? dedentToRoot$1(softline$4) : softline$4, printChildren$1(path, options, print)])), (node.next ? needsToBorrowPrevClosingTagEndMarker(node.next) : needsToBorrowLastChildClosingTagEndMarker(node.parent)) ? node.lastChild.hasTrailingSpaces && node.lastChild.isTrailingSpaceSensitive ? \" \" : \"\" : shouldHugContent ? ifBreak$5(softline$4, \"\", {\n            groupId: attrGroupId\n          }) : node.lastChild.hasTrailingSpaces && node.lastChild.isTrailingSpaceSensitive ? line$5 : (node.lastChild.type === \"comment\" || node.lastChild.type === \"text\" && node.isWhitespaceSensitive && node.isIndentationSensitive) && new RegExp(\"\\\\n\\\\s{\".concat(options.tabWidth * countParents$1(path, function (n) {\n            return n.parent && n.parent.type !== \"root\";\n          }), \"}$\")).test(node.lastChild.value) ?\n          /**\n           *     <div>\n           *       <pre>\n           *         something\n           *       </pre>\n           *            ~\n           *     </div>\n           */\n          \"\" : softline$4])])), printClosingTag(node, options)]);\n        }\n\n      case \"ieConditionalStartComment\":\n      case \"ieConditionalEndComment\":\n        return concat$a([printOpeningTagStart(node), printClosingTagEnd(node)]);\n\n      case \"interpolation\":\n        return concat$a([printOpeningTagStart(node, options), concat$a(path.map(print, \"children\")), printClosingTagEnd(node, options)]);\n\n      case \"text\":\n        {\n          if (node.parent.type === \"interpolation\") {\n            // replace the trailing literalline with hardline for better readability\n            var trailingNewlineRegex = /\\n[^\\S\\n]*?$/;\n            var hasTrailingNewline = trailingNewlineRegex.test(node.value);\n            var value = hasTrailingNewline ? node.value.replace(trailingNewlineRegex, \"\") : node.value;\n            return concat$a([concat$a(replaceEndOfLineWith$1(value, literalline$2)), hasTrailingNewline ? hardline$7 : \"\"]);\n          }\n\n          return fill$3(normalizeParts$1([].concat(printOpeningTagPrefix(node, options), getTextValueParts(node), printClosingTagSuffix(node, options))));\n        }\n\n      case \"docType\":\n        return concat$a([group$9(concat$a([printOpeningTagStart(node, options), \" \", node.value.replace(/^html\\b/i, \"html\").replace(/\\s+/g, \" \")])), printClosingTagEnd(node, options)]);\n\n      case \"comment\":\n        {\n          return concat$a([printOpeningTagPrefix(node, options), concat$a(replaceEndOfLineWith$1(options.originalText.slice(options.locStart(node), options.locEnd(node)), literalline$2)), printClosingTagSuffix(node, options)]);\n        }\n\n      case \"attribute\":\n        {\n          if (node.value === null) {\n            return node.rawName;\n          }\n\n          var _value = unescapeQuoteEntities$1(node.value);\n\n          var singleQuoteCount = countChars$1(_value, \"'\");\n          var doubleQuoteCount = countChars$1(_value, '\"');\n          var quote = singleQuoteCount < doubleQuoteCount ? \"'\" : '\"';\n          return concat$a([node.rawName, concat$a([\"=\", quote, concat$a(replaceEndOfLineWith$1(quote === '\"' ? _value.replace(/\"/g, \"&quot;\") : _value.replace(/'/g, \"&apos;\"), literalline$2)), quote])]);\n        }\n\n      case \"yaml\":\n      case \"toml\":\n        return concat$a(replaceEndOfLineWith$1(node.raw, literalline$2));\n\n      default:\n        throw new Error(\"Unexpected node type \".concat(node.type));\n    }\n  }\n\n  function printChildren$1(path, options, print) {\n    var node = path.getValue();\n\n    if (forceBreakChildren$1(node)) {\n      return concat$a([breakParent$2, concat$a(path.map(function (childPath) {\n        var childNode = childPath.getValue();\n        var prevBetweenLine = !childNode.prev ? \"\" : printBetweenLine(childNode.prev, childNode);\n        return concat$a([!prevBetweenLine ? \"\" : concat$a([prevBetweenLine, forceNextEmptyLine$1(childNode.prev) ? hardline$7 : \"\"]), printChild(childPath)]);\n      }, \"children\"))]);\n    }\n\n    var groupIds = node.children.map(function () {\n      return Symbol(\"\");\n    });\n    return concat$a(path.map(function (childPath, childIndex) {\n      var childNode = childPath.getValue();\n\n      if (isTextLikeNode$1(childNode)) {\n        if (childNode.prev && isTextLikeNode$1(childNode.prev)) {\n          var _prevBetweenLine = printBetweenLine(childNode.prev, childNode);\n\n          if (_prevBetweenLine) {\n            if (forceNextEmptyLine$1(childNode.prev)) {\n              return concat$a([hardline$7, hardline$7, printChild(childPath)]);\n            }\n\n            return concat$a([_prevBetweenLine, printChild(childPath)]);\n          }\n        }\n\n        return printChild(childPath);\n      }\n\n      var prevParts = [];\n      var leadingParts = [];\n      var trailingParts = [];\n      var nextParts = [];\n      var prevBetweenLine = childNode.prev ? printBetweenLine(childNode.prev, childNode) : \"\";\n      var nextBetweenLine = childNode.next ? printBetweenLine(childNode, childNode.next) : \"\";\n\n      if (prevBetweenLine) {\n        if (forceNextEmptyLine$1(childNode.prev)) {\n          prevParts.push(hardline$7, hardline$7);\n        } else if (prevBetweenLine === hardline$7) {\n          prevParts.push(hardline$7);\n        } else {\n          if (isTextLikeNode$1(childNode.prev)) {\n            leadingParts.push(prevBetweenLine);\n          } else {\n            leadingParts.push(ifBreak$5(\"\", softline$4, {\n              groupId: groupIds[childIndex - 1]\n            }));\n          }\n        }\n      }\n\n      if (nextBetweenLine) {\n        if (forceNextEmptyLine$1(childNode)) {\n          if (isTextLikeNode$1(childNode.next)) {\n            nextParts.push(hardline$7, hardline$7);\n          }\n        } else if (nextBetweenLine === hardline$7) {\n          if (isTextLikeNode$1(childNode.next)) {\n            nextParts.push(hardline$7);\n          }\n        } else {\n          trailingParts.push(nextBetweenLine);\n        }\n      }\n\n      return concat$a([].concat(prevParts, group$9(concat$a([concat$a(leadingParts), group$9(concat$a([printChild(childPath), concat$a(trailingParts)]), {\n        id: groupIds[childIndex]\n      })])), nextParts));\n    }, \"children\"));\n\n    function printChild(childPath) {\n      var child = childPath.getValue();\n\n      if (hasPrettierIgnore$1(child)) {\n        return concat$a([].concat(printOpeningTagPrefix(child, options), replaceEndOfLineWith$1(options.originalText.slice(options.locStart(child) + (child.prev && needsToBorrowNextOpeningTagStartMarker(child.prev) ? printOpeningTagStartMarker(child).length : 0), options.locEnd(child) - (child.next && needsToBorrowPrevClosingTagEndMarker(child.next) ? printClosingTagEndMarker(child, options).length : 0)), literalline$2), printClosingTagSuffix(child, options)));\n      }\n\n      if (shouldPreserveContent$1(child, options)) {\n        return concat$a([].concat(printOpeningTagPrefix(child, options), group$9(printOpeningTag(childPath, options, print)), replaceEndOfLineWith$1(options.originalText.slice(child.startSourceSpan.end.offset + (child.firstChild && needsToBorrowParentOpeningTagEndMarker(child.firstChild) ? -printOpeningTagEndMarker(child).length : 0), child.endSourceSpan.start.offset + (child.lastChild && needsToBorrowParentClosingTagStartMarker(child.lastChild) ? printClosingTagStartMarker(child, options).length : needsToBorrowLastChildClosingTagEndMarker(child) ? -printClosingTagEndMarker(child.lastChild, options).length : 0)), literalline$2), printClosingTag(child, options), printClosingTagSuffix(child, options)));\n      }\n\n      return print(childPath);\n    }\n\n    function printBetweenLine(prevNode, nextNode) {\n      return isTextLikeNode$1(prevNode) && isTextLikeNode$1(nextNode) ? prevNode.isTrailingSpaceSensitive ? prevNode.hasTrailingSpaces ? preferHardlineAsLeadingSpaces$1(nextNode) ? hardline$7 : line$5 : \"\" : preferHardlineAsLeadingSpaces$1(nextNode) ? hardline$7 : softline$4 : needsToBorrowNextOpeningTagStartMarker(prevNode) && (\n      /**\n       *     123<a\n       *          ~\n       *       ><b>\n       */\n      nextNode.firstChild ||\n      /**\n       *     123<!--\n       *            ~\n       *     -->\n       */\n      nextNode.isSelfClosing ||\n      /**\n       *     123<span\n       *             ~\n       *       attr\n       */\n      nextNode.type === \"element\" && nextNode.attrs.length !== 0) ||\n      /**\n       *     <img\n       *       src=\"long\"\n       *                 ~\n       *     />123\n       */\n      prevNode.type === \"element\" && prevNode.isSelfClosing && needsToBorrowPrevClosingTagEndMarker(nextNode) ? \"\" : !nextNode.isLeadingSpaceSensitive || preferHardlineAsLeadingSpaces$1(nextNode) ||\n      /**\n       *       Want to write us a letter? Use our<a\n       *         ><b><a>mailing address</a></b></a\n       *                                          ~\n       *       >.\n       */\n      needsToBorrowPrevClosingTagEndMarker(nextNode) && prevNode.lastChild && needsToBorrowParentClosingTagStartMarker(prevNode.lastChild) && prevNode.lastChild.lastChild && needsToBorrowParentClosingTagStartMarker(prevNode.lastChild.lastChild) ? hardline$7 : nextNode.hasLeadingSpaces ? line$5 : softline$4;\n    }\n  }\n\n  function printOpeningTag(path, options, print) {\n    var node = path.getValue();\n    var forceNotToBreakAttrContent = node.type === \"element\" && node.fullName === \"script\" && node.attrs.length === 1 && node.attrs[0].fullName === \"src\" && node.children.length === 0;\n    return concat$a([printOpeningTagStart(node, options), !node.attrs || node.attrs.length === 0 ? node.isSelfClosing ?\n    /**\n     *     <br />\n     *        ^\n     */\n    \" \" : \"\" : concat$a([indent$5(concat$a([forceNotToBreakAttrContent ? \" \" : line$5, join$6(line$5, function (ignoreAttributeData) {\n      var hasPrettierIgnoreAttribute = typeof ignoreAttributeData === \"boolean\" ? function () {\n        return ignoreAttributeData;\n      } : Array.isArray(ignoreAttributeData) ? function (attr) {\n        return ignoreAttributeData.indexOf(attr.rawName) !== -1;\n      } : function () {\n        return false;\n      };\n      return path.map(function (attrPath) {\n        var attr = attrPath.getValue();\n        return hasPrettierIgnoreAttribute(attr) ? concat$a(replaceEndOfLineWith$1(options.originalText.slice(options.locStart(attr), options.locEnd(attr)), literalline$2)) : print(attrPath);\n      }, \"attrs\");\n    }(node.prev && node.prev.type === \"comment\" && getPrettierIgnoreAttributeCommentData$1(node.prev.value)))])),\n    /**\n     *     123<a\n     *       attr\n     *           ~\n     *       >456\n     */\n    node.firstChild && needsToBorrowParentOpeningTagEndMarker(node.firstChild) ||\n    /**\n     *     <span\n     *       >123<meta\n     *                ~\n     *     /></span>\n     */\n    node.isSelfClosing && needsToBorrowLastChildClosingTagEndMarker(node.parent) ? \"\" : node.isSelfClosing ? forceNotToBreakAttrContent ? \" \" : line$5 : forceNotToBreakAttrContent ? \"\" : softline$4]), node.isSelfClosing ? \"\" : printOpeningTagEnd(node)]);\n  }\n\n  function printOpeningTagStart(node, options) {\n    return node.prev && needsToBorrowNextOpeningTagStartMarker(node.prev) ? \"\" : concat$a([printOpeningTagPrefix(node, options), printOpeningTagStartMarker(node)]);\n  }\n\n  function printOpeningTagEnd(node) {\n    return node.firstChild && needsToBorrowParentOpeningTagEndMarker(node.firstChild) ? \"\" : printOpeningTagEndMarker(node);\n  }\n\n  function printClosingTag(node, options) {\n    return concat$a([node.isSelfClosing ? \"\" : printClosingTagStart(node, options), printClosingTagEnd(node, options)]);\n  }\n\n  function printClosingTagStart(node, options) {\n    return node.lastChild && needsToBorrowParentClosingTagStartMarker(node.lastChild) ? \"\" : concat$a([printClosingTagPrefix(node, options), printClosingTagStartMarker(node, options)]);\n  }\n\n  function printClosingTagEnd(node, options) {\n    return (node.next ? needsToBorrowPrevClosingTagEndMarker(node.next) : needsToBorrowLastChildClosingTagEndMarker(node.parent)) ? \"\" : concat$a([printClosingTagEndMarker(node, options), printClosingTagSuffix(node, options)]);\n  }\n\n  function needsToBorrowNextOpeningTagStartMarker(node) {\n    /**\n     *     123<p\n     *        ^^\n     *     >\n     */\n    return node.next && !isTextLikeNode$1(node.next) && isTextLikeNode$1(node) && node.isTrailingSpaceSensitive && !node.hasTrailingSpaces;\n  }\n\n  function needsToBorrowParentOpeningTagEndMarker(node) {\n    /**\n     *     <p\n     *       >123\n     *       ^\n     *\n     *     <p\n     *       ><a\n     *       ^\n     */\n    return !node.prev && node.isLeadingSpaceSensitive && !node.hasLeadingSpaces;\n  }\n\n  function needsToBorrowPrevClosingTagEndMarker(node) {\n    /**\n     *     <p></p\n     *     >123\n     *     ^\n     *\n     *     <p></p\n     *     ><a\n     *     ^\n     */\n    return node.prev && !isTextLikeNode$1(node.prev) && node.isLeadingSpaceSensitive && !node.hasLeadingSpaces;\n  }\n\n  function needsToBorrowLastChildClosingTagEndMarker(node) {\n    /**\n     *     <p\n     *       ><a></a\n     *       ></p\n     *       ^\n     *     >\n     */\n    return node.lastChild && node.lastChild.isTrailingSpaceSensitive && !node.lastChild.hasTrailingSpaces && !isTextLikeNode$1(getLastDescendant$1(node.lastChild));\n  }\n\n  function needsToBorrowParentClosingTagStartMarker(node) {\n    /**\n     *     <p>\n     *       123</p\n     *          ^^^\n     *     >\n     *\n     *         123</b\n     *       ></a\n     *        ^^^\n     *     >\n     */\n    return !node.next && !node.hasTrailingSpaces && node.isTrailingSpaceSensitive && isTextLikeNode$1(getLastDescendant$1(node));\n  }\n\n  function printOpeningTagPrefix(node, options) {\n    return needsToBorrowParentOpeningTagEndMarker(node) ? printOpeningTagEndMarker(node.parent) : needsToBorrowPrevClosingTagEndMarker(node) ? printClosingTagEndMarker(node.prev, options) : \"\";\n  }\n\n  function printClosingTagPrefix(node, options) {\n    return needsToBorrowLastChildClosingTagEndMarker(node) ? printClosingTagEndMarker(node.lastChild, options) : \"\";\n  }\n\n  function printClosingTagSuffix(node, options) {\n    return needsToBorrowParentClosingTagStartMarker(node) ? printClosingTagStartMarker(node.parent, options) : needsToBorrowNextOpeningTagStartMarker(node) ? printOpeningTagStartMarker(node.next) : \"\";\n  }\n\n  function printOpeningTagStartMarker(node) {\n    switch (node.type) {\n      case \"ieConditionalComment\":\n      case \"ieConditionalStartComment\":\n        return \"<!--[if \".concat(node.condition);\n\n      case \"ieConditionalEndComment\":\n        return \"<!--<!\";\n\n      case \"interpolation\":\n        return \"{{\";\n\n      case \"docType\":\n        return \"<!DOCTYPE\";\n\n      case \"element\":\n        if (node.condition) {\n          return \"<!--[if \".concat(node.condition, \"]><!--><\").concat(node.rawName);\n        }\n\n      // fall through\n\n      default:\n        return \"<\".concat(node.rawName);\n    }\n  }\n\n  function printOpeningTagEndMarker(node) {\n    assert(!node.isSelfClosing);\n\n    switch (node.type) {\n      case \"ieConditionalComment\":\n        return \"]>\";\n\n      case \"element\":\n        if (node.condition) {\n          return \"><!--<![endif]-->\";\n        }\n\n      // fall through\n\n      default:\n        return \">\";\n    }\n  }\n\n  function printClosingTagStartMarker(node, options) {\n    assert(!node.isSelfClosing);\n\n    if (shouldNotPrintClosingTag$1(node, options)) {\n      return \"\";\n    }\n\n    switch (node.type) {\n      case \"ieConditionalComment\":\n        return \"<!\";\n\n      case \"element\":\n        if (node.hasHtmComponentClosingTag) {\n          return \"<//\";\n        }\n\n      // fall through\n\n      default:\n        return \"</\".concat(node.rawName);\n    }\n  }\n\n  function printClosingTagEndMarker(node, options) {\n    if (shouldNotPrintClosingTag$1(node, options)) {\n      return \"\";\n    }\n\n    switch (node.type) {\n      case \"ieConditionalComment\":\n      case \"ieConditionalEndComment\":\n        return \"[endif]-->\";\n\n      case \"ieConditionalStartComment\":\n        return \"]><!-->\";\n\n      case \"interpolation\":\n        return \"}}\";\n\n      case \"element\":\n        if (node.isSelfClosing) {\n          return \"/>\";\n        }\n\n      // fall through\n\n      default:\n        return \">\";\n    }\n  }\n\n  function getTextValueParts(node) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : node.value;\n    return node.parent.isWhitespaceSensitive ? node.parent.isIndentationSensitive ? replaceEndOfLineWith$1(value, literalline$2) : replaceEndOfLineWith$1(dedentString$1(value.replace(/^\\s*?\\n|\\n\\s*?$/g, \"\")), hardline$7) : // https://infra.spec.whatwg.org/#ascii-whitespace\n    join$6(line$5, value.split(/[\\t\\n\\f\\r ]+/)).parts;\n  }\n\n  function printEmbeddedAttributeValue(node, originalTextToDoc, options) {\n    var isKeyMatched = function isKeyMatched(patterns) {\n      return new RegExp(patterns.join(\"|\")).test(node.fullName);\n    };\n\n    var getValue = function getValue() {\n      return unescapeQuoteEntities$1(node.value);\n    };\n\n    var shouldHug = false;\n\n    var __onHtmlBindingRoot = function __onHtmlBindingRoot(root) {\n      var rootNode = root.type === \"NGRoot\" ? root.node.type === \"NGMicrosyntax\" && root.node.body.length === 1 && root.node.body[0].type === \"NGMicrosyntaxExpression\" ? root.node.body[0].expression : root.node : root.type === \"JsExpressionRoot\" ? root.node : root;\n\n      if (rootNode && (rootNode.type === \"ObjectExpression\" || rootNode.type === \"ArrayExpression\")) {\n        shouldHug = true;\n      }\n    };\n\n    var printHug = function printHug(doc) {\n      return group$9(doc);\n    };\n\n    var printExpand = function printExpand(doc) {\n      return group$9(concat$a([indent$5(concat$a([softline$4, doc])), softline$4]));\n    };\n\n    var printMaybeHug = function printMaybeHug(doc) {\n      return shouldHug ? printHug(doc) : printExpand(doc);\n    };\n\n    var textToDoc = function textToDoc(code, opts) {\n      return originalTextToDoc(code, Object.assign({\n        __onHtmlBindingRoot: __onHtmlBindingRoot\n      }, opts));\n    };\n\n    if (node.fullName === \"srcset\" && (node.parent.fullName === \"img\" || node.parent.fullName === \"source\")) {\n      return printExpand(printImgSrcset$1(getValue()));\n    }\n\n    if (options.parser === \"vue\") {\n      if (node.fullName === \"v-for\") {\n        return printVueFor$1(getValue(), textToDoc);\n      }\n\n      if (node.fullName === \"slot-scope\") {\n        return printVueSlotScope$1(getValue(), textToDoc);\n      }\n      /**\n       *     @click=\"jsStatement\"\n       *     @click=\"jsExpression\"\n       *     v-on:click=\"jsStatement\"\n       *     v-on:click=\"jsExpression\"\n       */\n\n\n      var vueEventBindingPatterns = [\"^@\", \"^v-on:\"];\n      /**\n       *     :class=\"vueExpression\"\n       *     v-bind:id=\"vueExpression\"\n       */\n\n      var vueExpressionBindingPatterns = [\"^:\", \"^v-bind:\"];\n      /**\n       *     v-if=\"jsExpression\"\n       */\n\n      var jsExpressionBindingPatterns = [\"^v-\"];\n\n      if (isKeyMatched(vueEventBindingPatterns)) {\n        var value = getValue();\n        return printMaybeHug(isVueEventBindingExpression$1(value) ? textToDoc(value, {\n          parser: \"__js_expression\"\n        }) : stripTrailingHardline$1(textToDoc(value, {\n          parser: \"__vue_event_binding\"\n        })));\n      }\n\n      if (isKeyMatched(vueExpressionBindingPatterns)) {\n        return printMaybeHug(textToDoc(getValue(), {\n          parser: \"__vue_expression\"\n        }));\n      }\n\n      if (isKeyMatched(jsExpressionBindingPatterns)) {\n        return printMaybeHug(textToDoc(getValue(), {\n          parser: \"__js_expression\"\n        }));\n      }\n    }\n\n    if (options.parser === \"angular\") {\n      var ngTextToDoc = function ngTextToDoc(code, opts) {\n        return (// angular does not allow trailing comma\n          textToDoc(code, Object.assign({\n            trailingComma: \"none\"\n          }, opts))\n        );\n      };\n      /**\n       *     *directive=\"angularDirective\"\n       */\n\n\n      var ngDirectiveBindingPatterns = [\"^\\\\*\"];\n      /**\n       *     (click)=\"angularStatement\"\n       *     on-click=\"angularStatement\"\n       */\n\n      var ngStatementBindingPatterns = [\"^\\\\(.+\\\\)$\", \"^on-\"];\n      /**\n       *     [target]=\"angularExpression\"\n       *     bind-target=\"angularExpression\"\n       *     [(target)]=\"angularExpression\"\n       *     bindon-target=\"angularExpression\"\n       */\n\n      var ngExpressionBindingPatterns = [\"^\\\\[.+\\\\]$\", \"^bind(on)?-\"];\n      /**\n       *     i18n=\"longDescription\"\n       *     i18n-attr=\"longDescription\"\n       */\n\n      var ngI18nPatterns = [\"^i18n(-.+)?$\"];\n\n      if (isKeyMatched(ngStatementBindingPatterns)) {\n        return printMaybeHug(ngTextToDoc(getValue(), {\n          parser: \"__ng_action\"\n        }));\n      }\n\n      if (isKeyMatched(ngExpressionBindingPatterns)) {\n        return printMaybeHug(ngTextToDoc(getValue(), {\n          parser: \"__ng_binding\"\n        }));\n      }\n\n      if (isKeyMatched(ngI18nPatterns)) {\n        return printExpand(fill$3(getTextValueParts(node, getValue())));\n      }\n\n      if (isKeyMatched(ngDirectiveBindingPatterns)) {\n        return printMaybeHug(ngTextToDoc(getValue(), {\n          parser: \"__ng_directive\"\n        }));\n      }\n\n      var interpolationRegex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n\n      var _value2 = getValue();\n\n      if (interpolationRegex.test(_value2)) {\n        var parts = [];\n\n        _value2.split(interpolationRegex).forEach(function (part, index) {\n          if (index % 2 === 0) {\n            parts.push(concat$a(replaceEndOfLineWith$1(part, literalline$2)));\n          } else {\n            try {\n              parts.push(group$9(concat$a([\"{{\", indent$5(concat$a([line$5, ngTextToDoc(part, {\n                parser: \"__ng_interpolation\",\n                __isInHtmlInterpolation: true // to avoid unexpected `}}`\n\n              })])), line$5, \"}}\"])));\n            } catch (e) {\n              parts.push(\"{{\", concat$a(replaceEndOfLineWith$1(part, literalline$2)), \"}}\");\n            }\n          }\n        });\n\n        return group$9(concat$a(parts));\n      }\n    }\n\n    return null;\n  }\n\n  var printerHtml = {\n    preprocess: preprocess_1,\n    print: genericPrint$2,\n    insertPragma: insertPragma$6,\n    massageAstNode: clean$3,\n    embed: embed$2\n  };\n\n  var CATEGORY_HTML = \"HTML\"; // format based on https://github.com/prettier/prettier/blob/master/src/main/core-options.js\n\n  var options$4 = {\n    htmlWhitespaceSensitivity: {\n      since: \"1.15.0\",\n      category: CATEGORY_HTML,\n      type: \"choice\",\n      default: \"css\",\n      description: \"How to handle whitespaces in HTML.\",\n      choices: [{\n        value: \"css\",\n        description: \"Respect the default value of CSS display property.\"\n      }, {\n        value: \"strict\",\n        description: \"Whitespaces are considered sensitive.\"\n      }, {\n        value: \"ignore\",\n        description: \"Whitespaces are considered insensitive.\"\n      }]\n    },\n    vueIndentScriptAndStyle: {\n      since: \"1.19.0\",\n      category: CATEGORY_HTML,\n      type: \"boolean\",\n      default: false,\n      description: \"Indent script and style tags in Vue files.\"\n    }\n  };\n\n  var name$7 = \"HTML\";\n  var type$6 = \"markup\";\n  var tmScope$6 = \"text.html.basic\";\n  var aceMode$6 = \"html\";\n  var codemirrorMode$3 = \"htmlmixed\";\n  var codemirrorMimeType$3 = \"text/html\";\n  var color$1 = \"#e34c26\";\n  var aliases$1 = [\n  \t\"xhtml\"\n  ];\n  var extensions$6 = [\n  \t\".html\",\n  \t\".htm\",\n  \t\".html.hl\",\n  \t\".inc\",\n  \t\".st\",\n  \t\".xht\",\n  \t\".xhtml\"\n  ];\n  var languageId$6 = 146;\n  var HTML = {\n  \tname: name$7,\n  \ttype: type$6,\n  \ttmScope: tmScope$6,\n  \taceMode: aceMode$6,\n  \tcodemirrorMode: codemirrorMode$3,\n  \tcodemirrorMimeType: codemirrorMimeType$3,\n  \tcolor: color$1,\n  \taliases: aliases$1,\n  \textensions: extensions$6,\n  \tlanguageId: languageId$6\n  };\n\n  var HTML$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$7,\n    type: type$6,\n    tmScope: tmScope$6,\n    aceMode: aceMode$6,\n    codemirrorMode: codemirrorMode$3,\n    codemirrorMimeType: codemirrorMimeType$3,\n    color: color$1,\n    aliases: aliases$1,\n    extensions: extensions$6,\n    languageId: languageId$6,\n    'default': HTML\n  });\n\n  var name$8 = \"Vue\";\n  var type$7 = \"markup\";\n  var color$2 = \"#2c3e50\";\n  var extensions$7 = [\n  \t\".vue\"\n  ];\n  var tmScope$7 = \"text.html.vue\";\n  var aceMode$7 = \"html\";\n  var languageId$7 = 391;\n  var Vue = {\n  \tname: name$8,\n  \ttype: type$7,\n  \tcolor: color$2,\n  \textensions: extensions$7,\n  \ttmScope: tmScope$7,\n  \taceMode: aceMode$7,\n  \tlanguageId: languageId$7\n  };\n\n  var Vue$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$8,\n    type: type$7,\n    color: color$2,\n    extensions: extensions$7,\n    tmScope: tmScope$7,\n    aceMode: aceMode$7,\n    languageId: languageId$7,\n    'default': Vue\n  });\n\n  var require$$0$5 = getCjsExportFromNamespace(HTML$1);\n\n  var require$$1$1 = getCjsExportFromNamespace(Vue$1);\n\n  var languages$3 = [createLanguage(require$$0$5, function (data) {\n    return Object.assign(data, {\n      name: \"Angular\",\n      since: \"1.15.0\",\n      parsers: [\"angular\"],\n      vscodeLanguageIds: [\"html\"],\n      extensions: [\".component.html\"],\n      filenames: []\n    });\n  }), createLanguage(require$$0$5, function (data) {\n    return Object.assign(data, {\n      since: \"1.15.0\",\n      parsers: [\"html\"],\n      vscodeLanguageIds: [\"html\"],\n      extensions: data.extensions.concat([\".mjml\" // MJML is considered XML in Linguist but it should be formatted as HTML\n      ])\n    });\n  }), createLanguage(require$$0$5, function (data) {\n    return Object.assign(data, {\n      name: \"Lightning Web Components\",\n      since: \"1.17.0\",\n      parsers: [\"lwc\"],\n      vscodeLanguageIds: [\"html\"],\n      extensions: [],\n      filenames: []\n    });\n  }), createLanguage(require$$1$1, function (data) {\n    return Object.assign(data, {\n      since: \"1.10.0\",\n      parsers: [\"vue\"],\n      vscodeLanguageIds: [\"vue\"]\n    });\n  })];\n  var printers$3 = {\n    html: printerHtml\n  };\n  var languageHtml = {\n    languages: languages$3,\n    printers: printers$3,\n    options: options$4\n  };\n\n  var addLeadingComment$2 = utilShared.addLeadingComment,\n      addTrailingComment$2 = utilShared.addTrailingComment,\n      addDanglingComment$2 = utilShared.addDanglingComment;\n\n  function handleOwnLineComment(comment, text, options, ast, isLastComment) {\n    var precedingNode = comment.precedingNode,\n        enclosingNode = comment.enclosingNode,\n        followingNode = comment.followingNode;\n\n    if (handleLastFunctionArgComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleMemberExpressionComments(enclosingNode, followingNode, comment) || handleIfStatementComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleWhileComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleTryStatementComments(enclosingNode, precedingNode, followingNode, comment) || handleClassComments(enclosingNode, precedingNode, followingNode, comment) || handleImportSpecifierComments(enclosingNode, comment) || handleForComments(enclosingNode, precedingNode, comment) || handleUnionTypeComments(precedingNode, enclosingNode, followingNode, comment) || handleOnlyComments(enclosingNode, ast, comment, isLastComment) || handleImportDeclarationComments(text, enclosingNode, precedingNode, comment, options) || handleAssignmentPatternComments(enclosingNode, comment) || handleMethodNameComments(text, enclosingNode, precedingNode, comment, options)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleEndOfLineComment(comment, text, options, ast, isLastComment) {\n    var precedingNode = comment.precedingNode,\n        enclosingNode = comment.enclosingNode,\n        followingNode = comment.followingNode;\n\n    if (handleLastFunctionArgComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleConditionalExpressionComments(enclosingNode, precedingNode, followingNode, comment, text, options) || handleImportSpecifierComments(enclosingNode, comment) || handleIfStatementComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleWhileComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleTryStatementComments(enclosingNode, precedingNode, followingNode, comment) || handleClassComments(enclosingNode, precedingNode, followingNode, comment) || handleLabeledStatementComments(enclosingNode, comment) || handleCallExpressionComments(precedingNode, enclosingNode, comment) || handlePropertyComments(enclosingNode, comment) || handleOnlyComments(enclosingNode, ast, comment, isLastComment) || handleTypeAliasComments(enclosingNode, followingNode, comment) || handleVariableDeclaratorComments(enclosingNode, followingNode, comment)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleRemainingComment(comment, text, options, ast, isLastComment) {\n    var precedingNode = comment.precedingNode,\n        enclosingNode = comment.enclosingNode,\n        followingNode = comment.followingNode;\n\n    if (handleIfStatementComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleWhileComments(text, precedingNode, enclosingNode, followingNode, comment, options) || handleObjectPropertyAssignment(enclosingNode, precedingNode, comment) || handleCommentInEmptyParens(text, enclosingNode, comment, options) || handleMethodNameComments(text, enclosingNode, precedingNode, comment, options) || handleOnlyComments(enclosingNode, ast, comment, isLastComment) || handleCommentAfterArrowParams(text, enclosingNode, comment, options) || handleFunctionNameComments(text, enclosingNode, precedingNode, comment, options) || handleTSMappedTypeComments(text, enclosingNode, precedingNode, followingNode, comment) || handleBreakAndContinueStatementComments(enclosingNode, comment)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function addBlockStatementFirstComment(node, comment) {\n    var body = node.body.filter(function (n) {\n      return n.type !== \"EmptyStatement\";\n    });\n\n    if (body.length === 0) {\n      addDanglingComment$2(node, comment);\n    } else {\n      addLeadingComment$2(body[0], comment);\n    }\n  }\n\n  function addBlockOrNotComment(node, comment) {\n    if (node.type === \"BlockStatement\") {\n      addBlockStatementFirstComment(node, comment);\n    } else {\n      addLeadingComment$2(node, comment);\n    }\n  } // There are often comments before the else clause of if statements like\n  //\n  //   if (1) { ... }\n  //   // comment\n  //   else { ... }\n  //\n  // They are being attached as leading comments of the BlockExpression which\n  // is not well printed. What we want is to instead move the comment inside\n  // of the block and make it leadingComment of the first element of the block\n  // or dangling comment of the block if there is nothing inside\n  //\n  //   if (1) { ... }\n  //   else {\n  //     // comment\n  //     ...\n  //   }\n\n\n  function handleIfStatementComments(text, precedingNode, enclosingNode, followingNode, comment, options) {\n    if (!enclosingNode || enclosingNode.type !== \"IfStatement\" || !followingNode) {\n      return false;\n    } // We unfortunately have no way using the AST or location of nodes to know\n    // if the comment is positioned before the condition parenthesis:\n    //   if (a /* comment */) {}\n    // The only workaround I found is to look at the next character to see if\n    // it is a ).\n\n\n    var nextCharacter = util.getNextNonSpaceNonCommentCharacter(text, comment, options.locEnd);\n\n    if (nextCharacter === \")\") {\n      addTrailingComment$2(precedingNode, comment);\n      return true;\n    } // Comments before `else`:\n    // - treat as trailing comments of the consequent, if it's a BlockStatement\n    // - treat as a dangling comment otherwise\n\n\n    if (precedingNode === enclosingNode.consequent && followingNode === enclosingNode.alternate) {\n      if (precedingNode.type === \"BlockStatement\") {\n        addTrailingComment$2(precedingNode, comment);\n      } else {\n        addDanglingComment$2(enclosingNode, comment);\n      }\n\n      return true;\n    }\n\n    if (followingNode.type === \"BlockStatement\") {\n      addBlockStatementFirstComment(followingNode, comment);\n      return true;\n    }\n\n    if (followingNode.type === \"IfStatement\") {\n      addBlockOrNotComment(followingNode.consequent, comment);\n      return true;\n    } // For comments positioned after the condition parenthesis in an if statement\n    // before the consequent without brackets on, such as\n    // if (a) /* comment */ true,\n    // we look at the next character to see if the following node\n    // is the consequent for the if statement\n\n\n    if (enclosingNode.consequent === followingNode) {\n      addLeadingComment$2(followingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleWhileComments(text, precedingNode, enclosingNode, followingNode, comment, options) {\n    if (!enclosingNode || enclosingNode.type !== \"WhileStatement\" || !followingNode) {\n      return false;\n    } // We unfortunately have no way using the AST or location of nodes to know\n    // if the comment is positioned before the condition parenthesis:\n    //   while (a /* comment */) {}\n    // The only workaround I found is to look at the next character to see if\n    // it is a ).\n\n\n    var nextCharacter = util.getNextNonSpaceNonCommentCharacter(text, comment, options.locEnd);\n\n    if (nextCharacter === \")\") {\n      addTrailingComment$2(precedingNode, comment);\n      return true;\n    }\n\n    if (followingNode.type === \"BlockStatement\") {\n      addBlockStatementFirstComment(followingNode, comment);\n      return true;\n    }\n\n    return false;\n  } // Same as IfStatement but for TryStatement\n\n\n  function handleTryStatementComments(enclosingNode, precedingNode, followingNode, comment) {\n    if (!enclosingNode || enclosingNode.type !== \"TryStatement\" && enclosingNode.type !== \"CatchClause\" || !followingNode) {\n      return false;\n    }\n\n    if (enclosingNode.type === \"CatchClause\" && precedingNode) {\n      addTrailingComment$2(precedingNode, comment);\n      return true;\n    }\n\n    if (followingNode.type === \"BlockStatement\") {\n      addBlockStatementFirstComment(followingNode, comment);\n      return true;\n    }\n\n    if (followingNode.type === \"TryStatement\") {\n      addBlockOrNotComment(followingNode.finalizer, comment);\n      return true;\n    }\n\n    if (followingNode.type === \"CatchClause\") {\n      addBlockOrNotComment(followingNode.body, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleMemberExpressionComments(enclosingNode, followingNode, comment) {\n    if (enclosingNode && (enclosingNode.type === \"MemberExpression\" || enclosingNode.type === \"OptionalMemberExpression\") && followingNode && followingNode.type === \"Identifier\") {\n      addLeadingComment$2(enclosingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleConditionalExpressionComments(enclosingNode, precedingNode, followingNode, comment, text, options) {\n    var isSameLineAsPrecedingNode = precedingNode && !util.hasNewlineInRange(text, options.locEnd(precedingNode), options.locStart(comment));\n\n    if ((!precedingNode || !isSameLineAsPrecedingNode) && enclosingNode && enclosingNode.type === \"ConditionalExpression\" && followingNode) {\n      addLeadingComment$2(followingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleObjectPropertyAssignment(enclosingNode, precedingNode, comment) {\n    if (enclosingNode && (enclosingNode.type === \"ObjectProperty\" || enclosingNode.type === \"Property\") && enclosingNode.shorthand && enclosingNode.key === precedingNode && enclosingNode.value.type === \"AssignmentPattern\") {\n      addTrailingComment$2(enclosingNode.value.left, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleClassComments(enclosingNode, precedingNode, followingNode, comment) {\n    if (enclosingNode && (enclosingNode.type === \"ClassDeclaration\" || enclosingNode.type === \"ClassExpression\") && enclosingNode.decorators && enclosingNode.decorators.length > 0 && !(followingNode && followingNode.type === \"Decorator\")) {\n      if (!enclosingNode.decorators || enclosingNode.decorators.length === 0) {\n        addLeadingComment$2(enclosingNode, comment);\n      } else {\n        addTrailingComment$2(enclosingNode.decorators[enclosingNode.decorators.length - 1], comment);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleMethodNameComments(text, enclosingNode, precedingNode, comment, options) {\n    // This is only needed for estree parsers (flow, typescript) to attach\n    // after a method name:\n    // obj = { fn /*comment*/() {} };\n    if (enclosingNode && precedingNode && (enclosingNode.type === \"Property\" || enclosingNode.type === \"MethodDefinition\") && precedingNode.type === \"Identifier\" && enclosingNode.key === precedingNode && // special Property case: { key: /*comment*/(value) };\n    // comment should be attached to value instead of key\n    util.getNextNonSpaceNonCommentCharacter(text, precedingNode, options.locEnd) !== \":\") {\n      addTrailingComment$2(precedingNode, comment);\n      return true;\n    } // Print comments between decorators and class methods as a trailing comment\n    // on the decorator node instead of the method node\n\n\n    if (precedingNode && enclosingNode && precedingNode.type === \"Decorator\" && (enclosingNode.type === \"ClassMethod\" || enclosingNode.type === \"ClassProperty\" || enclosingNode.type === \"TSAbstractClassProperty\" || enclosingNode.type === \"TSAbstractMethodDefinition\" || enclosingNode.type === \"MethodDefinition\")) {\n      addTrailingComment$2(precedingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleFunctionNameComments(text, enclosingNode, precedingNode, comment, options) {\n    if (util.getNextNonSpaceNonCommentCharacter(text, comment, options.locEnd) !== \"(\") {\n      return false;\n    }\n\n    if (precedingNode && enclosingNode && (enclosingNode.type === \"FunctionDeclaration\" || enclosingNode.type === \"FunctionExpression\" || enclosingNode.type === \"ClassMethod\" || enclosingNode.type === \"MethodDefinition\" || enclosingNode.type === \"ObjectMethod\")) {\n      addTrailingComment$2(precedingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleCommentAfterArrowParams(text, enclosingNode, comment, options) {\n    if (!(enclosingNode && enclosingNode.type === \"ArrowFunctionExpression\")) {\n      return false;\n    }\n\n    var index = utilShared.getNextNonSpaceNonCommentCharacterIndex(text, comment, options);\n\n    if (text.substr(index, 2) === \"=>\") {\n      addDanglingComment$2(enclosingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleCommentInEmptyParens(text, enclosingNode, comment, options) {\n    if (util.getNextNonSpaceNonCommentCharacter(text, comment, options.locEnd) !== \")\") {\n      return false;\n    } // Only add dangling comments to fix the case when no params are present,\n    // i.e. a function without any argument.\n\n\n    if (enclosingNode && ((enclosingNode.type === \"FunctionDeclaration\" || enclosingNode.type === \"FunctionExpression\" || enclosingNode.type === \"ArrowFunctionExpression\" || enclosingNode.type === \"ClassMethod\" || enclosingNode.type === \"ObjectMethod\") && enclosingNode.params.length === 0 || (enclosingNode.type === \"CallExpression\" || enclosingNode.type === \"OptionalCallExpression\" || enclosingNode.type === \"NewExpression\") && enclosingNode.arguments.length === 0)) {\n      addDanglingComment$2(enclosingNode, comment);\n      return true;\n    }\n\n    if (enclosingNode && enclosingNode.type === \"MethodDefinition\" && enclosingNode.value.params.length === 0) {\n      addDanglingComment$2(enclosingNode.value, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleLastFunctionArgComments(text, precedingNode, enclosingNode, followingNode, comment, options) {\n    // Type definitions functions\n    if (precedingNode && precedingNode.type === \"FunctionTypeParam\" && enclosingNode && enclosingNode.type === \"FunctionTypeAnnotation\" && followingNode && followingNode.type !== \"FunctionTypeParam\") {\n      addTrailingComment$2(precedingNode, comment);\n      return true;\n    } // Real functions\n\n\n    if (precedingNode && (precedingNode.type === \"Identifier\" || precedingNode.type === \"AssignmentPattern\") && enclosingNode && (enclosingNode.type === \"ArrowFunctionExpression\" || enclosingNode.type === \"FunctionExpression\" || enclosingNode.type === \"FunctionDeclaration\" || enclosingNode.type === \"ObjectMethod\" || enclosingNode.type === \"ClassMethod\") && util.getNextNonSpaceNonCommentCharacter(text, comment, options.locEnd) === \")\") {\n      addTrailingComment$2(precedingNode, comment);\n      return true;\n    }\n\n    if (enclosingNode && enclosingNode.type === \"FunctionDeclaration\" && followingNode && followingNode.type === \"BlockStatement\") {\n      var functionParamRightParenIndex = function () {\n        if (enclosingNode.params.length !== 0) {\n          return util.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, options.locEnd(util.getLast(enclosingNode.params)));\n        }\n\n        var functionParamLeftParenIndex = util.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, options.locEnd(enclosingNode.id));\n        return util.getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, functionParamLeftParenIndex + 1);\n      }();\n\n      if (options.locStart(comment) > functionParamRightParenIndex) {\n        addBlockStatementFirstComment(followingNode, comment);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function handleImportSpecifierComments(enclosingNode, comment) {\n    if (enclosingNode && enclosingNode.type === \"ImportSpecifier\") {\n      addLeadingComment$2(enclosingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleLabeledStatementComments(enclosingNode, comment) {\n    if (enclosingNode && enclosingNode.type === \"LabeledStatement\") {\n      addLeadingComment$2(enclosingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleBreakAndContinueStatementComments(enclosingNode, comment) {\n    if (enclosingNode && (enclosingNode.type === \"ContinueStatement\" || enclosingNode.type === \"BreakStatement\") && !enclosingNode.label) {\n      addTrailingComment$2(enclosingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleCallExpressionComments(precedingNode, enclosingNode, comment) {\n    if (enclosingNode && (enclosingNode.type === \"CallExpression\" || enclosingNode.type === \"OptionalCallExpression\") && precedingNode && enclosingNode.callee === precedingNode && enclosingNode.arguments.length > 0) {\n      addLeadingComment$2(enclosingNode.arguments[0], comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleUnionTypeComments(precedingNode, enclosingNode, followingNode, comment) {\n    if (enclosingNode && (enclosingNode.type === \"UnionTypeAnnotation\" || enclosingNode.type === \"TSUnionType\")) {\n      addTrailingComment$2(precedingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handlePropertyComments(enclosingNode, comment) {\n    if (enclosingNode && (enclosingNode.type === \"Property\" || enclosingNode.type === \"ObjectProperty\")) {\n      addLeadingComment$2(enclosingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleOnlyComments(enclosingNode, ast, comment, isLastComment) {\n    // With Flow the enclosingNode is undefined so use the AST instead.\n    if (ast && ast.body && ast.body.length === 0) {\n      if (isLastComment) {\n        addDanglingComment$2(ast, comment);\n      } else {\n        addLeadingComment$2(ast, comment);\n      }\n\n      return true;\n    } else if (enclosingNode && enclosingNode.type === \"Program\" && enclosingNode.body.length === 0 && enclosingNode.directives && enclosingNode.directives.length === 0) {\n      if (isLastComment) {\n        addDanglingComment$2(enclosingNode, comment);\n      } else {\n        addLeadingComment$2(enclosingNode, comment);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleForComments(enclosingNode, precedingNode, comment) {\n    if (enclosingNode && (enclosingNode.type === \"ForInStatement\" || enclosingNode.type === \"ForOfStatement\")) {\n      addLeadingComment$2(enclosingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleImportDeclarationComments(text, enclosingNode, precedingNode, comment, options) {\n    if (precedingNode && precedingNode.type === \"ImportSpecifier\" && enclosingNode && enclosingNode.type === \"ImportDeclaration\" && util.hasNewline(text, options.locEnd(comment))) {\n      addTrailingComment$2(precedingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleAssignmentPatternComments(enclosingNode, comment) {\n    if (enclosingNode && enclosingNode.type === \"AssignmentPattern\") {\n      addLeadingComment$2(enclosingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleTypeAliasComments(enclosingNode, followingNode, comment) {\n    if (enclosingNode && enclosingNode.type === \"TypeAlias\") {\n      addLeadingComment$2(enclosingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleVariableDeclaratorComments(enclosingNode, followingNode, comment) {\n    if (enclosingNode && (enclosingNode.type === \"VariableDeclarator\" || enclosingNode.type === \"AssignmentExpression\") && followingNode && (followingNode.type === \"ObjectExpression\" || followingNode.type === \"ArrayExpression\" || followingNode.type === \"TemplateLiteral\" || followingNode.type === \"TaggedTemplateExpression\")) {\n      addLeadingComment$2(followingNode, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleTSMappedTypeComments(text, enclosingNode, precedingNode, followingNode, comment) {\n    if (!enclosingNode || enclosingNode.type !== \"TSMappedType\") {\n      return false;\n    }\n\n    if (followingNode && followingNode.type === \"TSTypeParameter\" && followingNode.name) {\n      addLeadingComment$2(followingNode.name, comment);\n      return true;\n    }\n\n    if (precedingNode && precedingNode.type === \"TSTypeParameter\" && precedingNode.constraint) {\n      addTrailingComment$2(precedingNode.constraint, comment);\n      return true;\n    }\n\n    return false;\n  }\n\n  function isBlockComment(comment) {\n    return comment.type === \"Block\" || comment.type === \"CommentBlock\";\n  }\n\n  function hasLeadingComment(node) {\n    var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n      return true;\n    };\n\n    if (node.leadingComments) {\n      return node.leadingComments.some(fn);\n    }\n\n    if (node.comments) {\n      return node.comments.some(function (comment) {\n        return comment.leading && fn(comment);\n      });\n    }\n\n    return false;\n  }\n\n  var comments$1 = {\n    handleOwnLineComment: handleOwnLineComment,\n    handleEndOfLineComment: handleEndOfLineComment,\n    handleRemainingComment: handleRemainingComment,\n    hasLeadingComment: hasLeadingComment,\n    isBlockComment: isBlockComment\n  };\n\n  var isBlockComment$1 = comments$1.isBlockComment,\n      hasLeadingComment$1 = comments$1.hasLeadingComment;\n  var _require$$1$builders = doc.builders,\n      indent$6 = _require$$1$builders.indent,\n      join$7 = _require$$1$builders.join,\n      hardline$8 = _require$$1$builders.hardline,\n      softline$5 = _require$$1$builders.softline,\n      literalline$3 = _require$$1$builders.literalline,\n      concat$b = _require$$1$builders.concat,\n      group$a = _require$$1$builders.group,\n      dedentToRoot$2 = _require$$1$builders.dedentToRoot,\n      _require$$1$utils = doc.utils,\n      mapDoc$5 = _require$$1$utils.mapDoc,\n      stripTrailingHardline$2 = _require$$1$utils.stripTrailingHardline;\n\n  function embed$3(path, print, textToDoc, options) {\n    var node = path.getValue();\n    var parent = path.getParentNode();\n    var parentParent = path.getParentNode(1);\n\n    switch (node.type) {\n      case \"TemplateLiteral\":\n        {\n          var isCss = [isStyledJsx, isStyledComponents, isCssProp, isAngularComponentStyles].some(function (isIt) {\n            return isIt(path);\n          });\n\n          if (isCss) {\n            // Get full template literal with expressions replaced by placeholders\n            var rawQuasis = node.quasis.map(function (q) {\n              return q.value.raw;\n            });\n            var placeholderID = 0;\n            var text = rawQuasis.reduce(function (prevVal, currVal, idx) {\n              return idx == 0 ? currVal : prevVal + \"@prettier-placeholder-\" + placeholderID++ + \"-id\" + currVal;\n            }, \"\");\n            var doc = textToDoc(text, {\n              parser: \"css\"\n            });\n            return transformCssDoc(doc, path, print);\n          }\n          /*\n           * react-relay and graphql-tag\n           * graphql`...`\n           * graphql.experimental`...`\n           * gql`...`\n           *\n           * This intentionally excludes Relay Classic tags, as Prettier does not\n           * support Relay Classic formatting.\n           */\n\n\n          if (isGraphQL(path)) {\n            var expressionDocs = node.expressions ? path.map(print, \"expressions\") : [];\n            var numQuasis = node.quasis.length;\n\n            if (numQuasis === 1 && node.quasis[0].value.raw.trim() === \"\") {\n              return \"``\";\n            }\n\n            var parts = [];\n\n            for (var i = 0; i < numQuasis; i++) {\n              var templateElement = node.quasis[i];\n              var isFirst = i === 0;\n              var isLast = i === numQuasis - 1;\n              var _text = templateElement.value.cooked; // Bail out if any of the quasis have an invalid escape sequence\n              // (which would make the `cooked` value be `null` or `undefined`)\n\n              if (typeof _text !== \"string\") {\n                return null;\n              }\n\n              var lines = _text.split(\"\\n\");\n\n              var numLines = lines.length;\n              var expressionDoc = expressionDocs[i];\n              var startsWithBlankLine = numLines > 2 && lines[0].trim() === \"\" && lines[1].trim() === \"\";\n              var endsWithBlankLine = numLines > 2 && lines[numLines - 1].trim() === \"\" && lines[numLines - 2].trim() === \"\";\n              var commentsAndWhitespaceOnly = lines.every(function (line) {\n                return /^\\s*(?:#[^\\r\\n]*)?$/.test(line);\n              }); // Bail out if an interpolation occurs within a comment.\n\n              if (!isLast && /#[^\\r\\n]*$/.test(lines[numLines - 1])) {\n                return null;\n              }\n\n              var _doc = null;\n\n              if (commentsAndWhitespaceOnly) {\n                _doc = printGraphqlComments(lines);\n              } else {\n                _doc = stripTrailingHardline$2(textToDoc(_text, {\n                  parser: \"graphql\"\n                }));\n              }\n\n              if (_doc) {\n                _doc = escapeTemplateCharacters(_doc, false);\n\n                if (!isFirst && startsWithBlankLine) {\n                  parts.push(\"\");\n                }\n\n                parts.push(_doc);\n\n                if (!isLast && endsWithBlankLine) {\n                  parts.push(\"\");\n                }\n              } else if (!isFirst && !isLast && startsWithBlankLine) {\n                parts.push(\"\");\n              }\n\n              if (expressionDoc) {\n                parts.push(concat$b([\"${\", expressionDoc, \"}\"]));\n              }\n            }\n\n            return concat$b([\"`\", indent$6(concat$b([hardline$8, join$7(hardline$8, parts)])), hardline$8, \"`\"]);\n          }\n\n          var htmlParser = isHtml(path) ? \"html\" : isAngularComponentTemplate(path) ? \"angular\" : undefined;\n\n          if (htmlParser) {\n            return printHtmlTemplateLiteral(path, print, textToDoc, htmlParser, options.embeddedInHtml);\n          }\n\n          break;\n        }\n\n      case \"TemplateElement\":\n        {\n          /**\n           * md`...`\n           * markdown`...`\n           */\n          if (parentParent && parentParent.type === \"TaggedTemplateExpression\" && parent.quasis.length === 1 && parentParent.tag.type === \"Identifier\" && (parentParent.tag.name === \"md\" || parentParent.tag.name === \"markdown\")) {\n            var _text2 = parent.quasis[0].value.raw.replace(/((?:\\\\\\\\)*)\\\\`/g, function (_, backslashes) {\n              return \"\\\\\".repeat(backslashes.length / 2) + \"`\";\n            });\n\n            var indentation = getIndentation(_text2);\n            var hasIndent = indentation !== \"\";\n            return concat$b([hasIndent ? indent$6(concat$b([softline$5, printMarkdown(_text2.replace(new RegExp(\"^\".concat(indentation), \"gm\"), \"\"))])) : concat$b([literalline$3, dedentToRoot$2(printMarkdown(_text2))]), softline$5]);\n          }\n\n          break;\n        }\n    }\n\n    function printMarkdown(text) {\n      var doc = textToDoc(text, {\n        parser: \"markdown\",\n        __inJsTemplate: true\n      });\n      return stripTrailingHardline$2(escapeTemplateCharacters(doc, true));\n    }\n  }\n\n  function getIndentation(str) {\n    var firstMatchedIndent = str.match(/^([^\\S\\n]*)\\S/m);\n    return firstMatchedIndent === null ? \"\" : firstMatchedIndent[1];\n  }\n\n  function uncook(cookedValue) {\n    return cookedValue.replace(/([\\\\`]|\\$\\{)/g, \"\\\\$1\");\n  }\n\n  function escapeTemplateCharacters(doc, raw) {\n    return mapDoc$5(doc, function (currentDoc) {\n      if (!currentDoc.parts) {\n        return currentDoc;\n      }\n\n      var parts = [];\n      currentDoc.parts.forEach(function (part) {\n        if (typeof part === \"string\") {\n          parts.push(raw ? part.replace(/(\\\\*)`/g, \"$1$1\\\\`\") : uncook(part));\n        } else {\n          parts.push(part);\n        }\n      });\n      return Object.assign({}, currentDoc, {\n        parts: parts\n      });\n    });\n  }\n\n  function transformCssDoc(quasisDoc, path, print) {\n    var parentNode = path.getValue();\n    var isEmpty = parentNode.quasis.length === 1 && !parentNode.quasis[0].value.raw.trim();\n\n    if (isEmpty) {\n      return \"``\";\n    }\n\n    var expressionDocs = parentNode.expressions ? path.map(print, \"expressions\") : [];\n    var newDoc = replacePlaceholders(quasisDoc, expressionDocs);\n    /* istanbul ignore if */\n\n    if (!newDoc) {\n      throw new Error(\"Couldn't insert all the expressions\");\n    }\n\n    return concat$b([\"`\", indent$6(concat$b([hardline$8, stripTrailingHardline$2(newDoc)])), softline$5, \"`\"]);\n  } // Search all the placeholders in the quasisDoc tree\n  // and replace them with the expression docs one by one\n  // returns a new doc with all the placeholders replaced,\n  // or null if it couldn't replace any expression\n\n\n  function replacePlaceholders(quasisDoc, expressionDocs) {\n    if (!expressionDocs || !expressionDocs.length) {\n      return quasisDoc;\n    }\n\n    var expressions = expressionDocs.slice();\n    var replaceCounter = 0;\n    var newDoc = mapDoc$5(quasisDoc, function (doc) {\n      if (!doc || !doc.parts || !doc.parts.length) {\n        return doc;\n      }\n\n      var parts = doc.parts;\n      var atIndex = parts.indexOf(\"@\");\n      var placeholderIndex = atIndex + 1;\n\n      if (atIndex > -1 && typeof parts[placeholderIndex] === \"string\" && parts[placeholderIndex].startsWith(\"prettier-placeholder\")) {\n        // If placeholder is split, join it\n        var at = parts[atIndex];\n        var placeholder = parts[placeholderIndex];\n        var rest = parts.slice(placeholderIndex + 1);\n        parts = parts.slice(0, atIndex).concat([at + placeholder]).concat(rest);\n      }\n\n      var atPlaceholderIndex = parts.findIndex(function (part) {\n        return typeof part === \"string\" && part.startsWith(\"@prettier-placeholder\");\n      });\n\n      if (atPlaceholderIndex > -1) {\n        var _placeholder = parts[atPlaceholderIndex];\n\n        var _rest = parts.slice(atPlaceholderIndex + 1);\n\n        var placeholderMatch = _placeholder.match(/@prettier-placeholder-(.+)-id([\\s\\S]*)/);\n\n        var placeholderID = placeholderMatch[1]; // When the expression has a suffix appended, like:\n        // animation: linear ${time}s ease-out;\n\n        var suffix = placeholderMatch[2];\n        var expression = expressions[placeholderID];\n        replaceCounter++;\n        parts = parts.slice(0, atPlaceholderIndex).concat([\"${\", expression, \"}\" + suffix]).concat(_rest);\n      }\n\n      return Object.assign({}, doc, {\n        parts: parts\n      });\n    });\n    return expressions.length === replaceCounter ? newDoc : null;\n  }\n\n  function printGraphqlComments(lines) {\n    var parts = [];\n    var seenComment = false;\n    lines.map(function (textLine) {\n      return textLine.trim();\n    }).forEach(function (textLine, i, array) {\n      // Lines are either whitespace only, or a comment (with potential whitespace\n      // around it). Drop whitespace-only lines.\n      if (textLine === \"\") {\n        return;\n      }\n\n      if (array[i - 1] === \"\" && seenComment) {\n        // If a non-first comment is preceded by a blank (whitespace only) line,\n        // add in a blank line.\n        parts.push(concat$b([hardline$8, textLine]));\n      } else {\n        parts.push(textLine);\n      }\n\n      seenComment = true;\n    }); // If `lines` was whitespace only, return `null`.\n\n    return parts.length === 0 ? null : join$7(hardline$8, parts);\n  }\n  /**\n   * Template literal in these contexts:\n   * <style jsx>{`div{color:red}`}</style>\n   * css``\n   * css.global``\n   * css.resolve``\n   */\n\n\n  function isStyledJsx(path) {\n    var node = path.getValue();\n    var parent = path.getParentNode();\n    var parentParent = path.getParentNode(1);\n    return parentParent && node.quasis && parent.type === \"JSXExpressionContainer\" && parentParent.type === \"JSXElement\" && parentParent.openingElement.name.name === \"style\" && parentParent.openingElement.attributes.some(function (attribute) {\n      return attribute.name.name === \"jsx\";\n    }) || parent && parent.type === \"TaggedTemplateExpression\" && parent.tag.type === \"Identifier\" && parent.tag.name === \"css\" || parent && parent.type === \"TaggedTemplateExpression\" && parent.tag.type === \"MemberExpression\" && parent.tag.object.name === \"css\" && (parent.tag.property.name === \"global\" || parent.tag.property.name === \"resolve\");\n  }\n  /**\n   * Angular Components can have:\n   * - Inline HTML template\n   * - Inline CSS styles\n   *\n   * ...which are both within template literals somewhere\n   * inside of the Component decorator factory.\n   *\n   * E.g.\n   * @Component({\n   *  template: `<div>...</div>`,\n   *  styles: [`h1 { color: blue; }`]\n   * })\n   */\n\n\n  function isAngularComponentStyles(path) {\n    return isPathMatch(path, [function (node) {\n      return node.type === \"TemplateLiteral\";\n    }, function (node, name) {\n      return node.type === \"ArrayExpression\" && name === \"elements\";\n    }, function (node, name) {\n      return node.type === \"Property\" && node.key.type === \"Identifier\" && node.key.name === \"styles\" && name === \"value\";\n    }].concat(getAngularComponentObjectExpressionPredicates()));\n  }\n\n  function isAngularComponentTemplate(path) {\n    return isPathMatch(path, [function (node) {\n      return node.type === \"TemplateLiteral\";\n    }, function (node, name) {\n      return node.type === \"Property\" && node.key.type === \"Identifier\" && node.key.name === \"template\" && name === \"value\";\n    }].concat(getAngularComponentObjectExpressionPredicates()));\n  }\n\n  function getAngularComponentObjectExpressionPredicates() {\n    return [function (node, name) {\n      return node.type === \"ObjectExpression\" && name === \"properties\";\n    }, function (node, name) {\n      return node.type === \"CallExpression\" && node.callee.type === \"Identifier\" && node.callee.name === \"Component\" && name === \"arguments\";\n    }, function (node, name) {\n      return node.type === \"Decorator\" && name === \"expression\";\n    }];\n  }\n  /**\n   * styled-components template literals\n   */\n\n\n  function isStyledComponents(path) {\n    var parent = path.getParentNode();\n\n    if (!parent || parent.type !== \"TaggedTemplateExpression\") {\n      return false;\n    }\n\n    var tag = parent.tag;\n\n    switch (tag.type) {\n      case \"MemberExpression\":\n        return (// styled.foo``\n          isStyledIdentifier(tag.object) || // Component.extend``\n          isStyledExtend(tag)\n        );\n\n      case \"CallExpression\":\n        return (// styled(Component)``\n          isStyledIdentifier(tag.callee) || tag.callee.type === \"MemberExpression\" && (tag.callee.object.type === \"MemberExpression\" && ( // styled.foo.attrs({})``\n          isStyledIdentifier(tag.callee.object.object) || // Component.extend.attrs({})``\n          isStyledExtend(tag.callee.object)) || // styled(Component).attrs({})``\n          tag.callee.object.type === \"CallExpression\" && isStyledIdentifier(tag.callee.object.callee))\n        );\n\n      case \"Identifier\":\n        // css``\n        return tag.name === \"css\";\n\n      default:\n        return false;\n    }\n  }\n  /**\n   * JSX element with CSS prop\n   */\n\n\n  function isCssProp(path) {\n    var parent = path.getParentNode();\n    var parentParent = path.getParentNode(1);\n    return parentParent && parent.type === \"JSXExpressionContainer\" && parentParent.type === \"JSXAttribute\" && parentParent.name.type === \"JSXIdentifier\" && parentParent.name.name === \"css\";\n  }\n\n  function isStyledIdentifier(node) {\n    return node.type === \"Identifier\" && node.name === \"styled\";\n  }\n\n  function isStyledExtend(node) {\n    return /^[A-Z]/.test(node.object.name) && node.property.name === \"extend\";\n  }\n  /*\n   * react-relay and graphql-tag\n   * graphql`...`\n   * graphql.experimental`...`\n   * gql`...`\n   * GraphQL comment block\n   *\n   * This intentionally excludes Relay Classic tags, as Prettier does not\n   * support Relay Classic formatting.\n   */\n\n\n  function isGraphQL(path) {\n    var node = path.getValue();\n    var parent = path.getParentNode();\n    return hasLanguageComment(node, \"GraphQL\") || parent && (parent.type === \"TaggedTemplateExpression\" && (parent.tag.type === \"MemberExpression\" && parent.tag.object.name === \"graphql\" && parent.tag.property.name === \"experimental\" || parent.tag.type === \"Identifier\" && (parent.tag.name === \"gql\" || parent.tag.name === \"graphql\")) || parent.type === \"CallExpression\" && parent.callee.type === \"Identifier\" && parent.callee.name === \"graphql\");\n  }\n\n  function hasLanguageComment(node, languageName) {\n    // This checks for a leading comment that is exactly `/* GraphQL */`\n    // In order to be in line with other implementations of this comment tag\n    // we will not trim the comment value and we will expect exactly one space on\n    // either side of the GraphQL string\n    // Also see ./clean.js\n    return hasLeadingComment$1(node, function (comment) {\n      return isBlockComment$1(comment) && comment.value === \" \".concat(languageName, \" \");\n    });\n  }\n\n  function isPathMatch(path, predicateStack) {\n    var stack = path.stack.slice();\n    var name = null;\n    var node = stack.pop();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = predicateStack[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var predicate = _step.value;\n\n        if (node === undefined) {\n          return false;\n        } // skip index/array\n\n\n        if (typeof name === \"number\") {\n          name = stack.pop();\n          node = stack.pop();\n        }\n\n        if (!predicate(node, name)) {\n          return false;\n        }\n\n        name = stack.pop();\n        node = stack.pop();\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   *     - html`...`\n   *     - HTML comment block\n   */\n\n\n  function isHtml(path) {\n    var node = path.getValue();\n    return hasLanguageComment(node, \"HTML\") || isPathMatch(path, [function (node) {\n      return node.type === \"TemplateLiteral\";\n    }, function (node, name) {\n      return node.type === \"TaggedTemplateExpression\" && node.tag.type === \"Identifier\" && node.tag.name === \"html\" && name === \"quasi\";\n    }]);\n  } // The counter is needed to distinguish nested embeds.\n\n\n  var htmlTemplateLiteralCounter = 0;\n\n  function printHtmlTemplateLiteral(path, print, textToDoc, parser, escapeClosingScriptTag) {\n    var node = path.getValue();\n    var counter = htmlTemplateLiteralCounter;\n    htmlTemplateLiteralCounter = htmlTemplateLiteralCounter + 1 >>> 0;\n\n    var composePlaceholder = function composePlaceholder(index) {\n      return \"PRETTIER_HTML_PLACEHOLDER_\".concat(index, \"_\").concat(counter, \"_IN_JS\");\n    };\n\n    var text = node.quasis.map(function (quasi, index, quasis) {\n      return index === quasis.length - 1 ? quasi.value.cooked : quasi.value.cooked + composePlaceholder(index);\n    }).join(\"\");\n    var expressionDocs = path.map(print, \"expressions\");\n\n    if (expressionDocs.length === 0 && text.trim().length === 0) {\n      return \"``\";\n    }\n\n    var placeholderRegex = RegExp(composePlaceholder(\"(\\\\d+)\"), \"g\");\n    var contentDoc = mapDoc$5(stripTrailingHardline$2(textToDoc(text, {\n      parser: parser\n    })), function (doc) {\n      if (typeof doc !== \"string\") {\n        return doc;\n      }\n\n      var parts = [];\n      var components = doc.split(placeholderRegex);\n\n      for (var i = 0; i < components.length; i++) {\n        var component = components[i];\n\n        if (i % 2 === 0) {\n          if (component) {\n            component = uncook(component);\n\n            if (escapeClosingScriptTag) {\n              component = component.replace(/<\\/(script)\\b/gi, \"<\\\\/$1\");\n            }\n\n            parts.push(component);\n          }\n\n          continue;\n        }\n\n        var placeholderIndex = +component;\n        parts.push(concat$b([\"${\", group$a(expressionDocs[placeholderIndex]), \"}\"]));\n      }\n\n      return concat$b(parts);\n    });\n    return group$a(concat$b([\"`\", indent$6(concat$b([hardline$8, group$a(contentDoc)])), softline$5, \"`\"]));\n  }\n\n  var embed_1$1 = embed$3;\n\n  function clean$4(ast, newObj, parent) {\n    [\"range\", \"raw\", \"comments\", \"leadingComments\", \"trailingComments\", \"extra\", \"start\", \"end\", \"flags\", \"errors\"].forEach(function (name) {\n      delete newObj[name];\n    });\n\n    if (ast.type === \"BigIntLiteral\") {\n      newObj.value = newObj.value.toLowerCase();\n    } // We remove extra `;` and add them when needed\n\n\n    if (ast.type === \"EmptyStatement\") {\n      return null;\n    } // We move text around, including whitespaces and add {\" \"}\n\n\n    if (ast.type === \"JSXText\") {\n      return null;\n    }\n\n    if (ast.type === \"JSXExpressionContainer\" && ast.expression.type === \"Literal\" && ast.expression.value === \" \") {\n      return null;\n    } // We remove unneeded parens around same-operator LogicalExpressions\n\n\n    if (isUnbalancedLogicalTree(newObj)) {\n      return rebalanceLogicalTree(newObj);\n    } // (TypeScript) Ignore `static` in `constructor(static p) {}`\n    // and `export` in `constructor(export p) {}`\n\n\n    if (ast.type === \"TSParameterProperty\" && ast.accessibility === null && !ast.readonly) {\n      return {\n        type: \"Identifier\",\n        name: ast.parameter.name,\n        typeAnnotation: newObj.parameter.typeAnnotation,\n        decorators: newObj.decorators\n      };\n    } // (TypeScript) ignore empty `specifiers` array\n\n\n    if (ast.type === \"TSNamespaceExportDeclaration\" && ast.specifiers && ast.specifiers.length === 0) {\n      delete newObj.specifiers;\n    } // We convert <div></div> to <div />\n\n\n    if (ast.type === \"JSXOpeningElement\") {\n      delete newObj.selfClosing;\n    }\n\n    if (ast.type === \"JSXElement\") {\n      delete newObj.closingElement;\n    } // We change {'key': value} into {key: value}\n\n\n    if ((ast.type === \"Property\" || ast.type === \"ObjectProperty\" || ast.type === \"MethodDefinition\" || ast.type === \"ClassProperty\" || ast.type === \"TSPropertySignature\" || ast.type === \"ObjectTypeProperty\") && _typeof(ast.key) === \"object\" && ast.key && (ast.key.type === \"Literal\" || ast.key.type === \"StringLiteral\" || ast.key.type === \"Identifier\")) {\n      delete newObj.key;\n    }\n\n    if (ast.type === \"OptionalMemberExpression\" && ast.optional === false) {\n      newObj.type = \"MemberExpression\";\n      delete newObj.optional;\n    } // Remove raw and cooked values from TemplateElement when it's CSS\n    // styled-jsx\n\n\n    if (ast.type === \"JSXElement\" && ast.openingElement.name.name === \"style\" && ast.openingElement.attributes.some(function (attr) {\n      return attr.name.name === \"jsx\";\n    })) {\n      var templateLiterals = newObj.children.filter(function (child) {\n        return child.type === \"JSXExpressionContainer\" && child.expression.type === \"TemplateLiteral\";\n      }).map(function (container) {\n        return container.expression;\n      });\n      var quasis = templateLiterals.reduce(function (quasis, templateLiteral) {\n        return quasis.concat(templateLiteral.quasis);\n      }, []);\n      quasis.forEach(function (q) {\n        return delete q.value;\n      });\n    } // CSS template literals in css prop\n\n\n    if (ast.type === \"JSXAttribute\" && ast.name.name === \"css\" && ast.value.type === \"JSXExpressionContainer\" && ast.value.expression.type === \"TemplateLiteral\") {\n      newObj.value.expression.quasis.forEach(function (q) {\n        return delete q.value;\n      });\n    } // Angular Components: Inline HTML template and Inline CSS styles\n\n\n    var expression = ast.expression || ast.callee;\n\n    if (ast.type === \"Decorator\" && expression.type === \"CallExpression\" && expression.callee.name === \"Component\" && expression.arguments.length === 1) {\n      var astProps = ast.expression.arguments[0].properties;\n      newObj.expression.arguments[0].properties.forEach(function (prop, index) {\n        var templateLiteral = null;\n\n        switch (astProps[index].key.name) {\n          case \"styles\":\n            if (prop.value.type === \"ArrayExpression\") {\n              templateLiteral = prop.value.elements[0];\n            }\n\n            break;\n\n          case \"template\":\n            if (prop.value.type === \"TemplateLiteral\") {\n              templateLiteral = prop.value;\n            }\n\n            break;\n        }\n\n        if (templateLiteral) {\n          templateLiteral.quasis.forEach(function (q) {\n            return delete q.value;\n          });\n        }\n      });\n    } // styled-components, graphql, markdown\n\n\n    if (ast.type === \"TaggedTemplateExpression\" && (ast.tag.type === \"MemberExpression\" || ast.tag.type === \"Identifier\" && (ast.tag.name === \"gql\" || ast.tag.name === \"graphql\" || ast.tag.name === \"css\" || ast.tag.name === \"md\" || ast.tag.name === \"markdown\" || ast.tag.name === \"html\") || ast.tag.type === \"CallExpression\")) {\n      newObj.quasi.quasis.forEach(function (quasi) {\n        return delete quasi.value;\n      });\n    }\n\n    if (ast.type === \"TemplateLiteral\") {\n      // This checks for a leading comment that is exactly `/* GraphQL */`\n      // In order to be in line with other implementations of this comment tag\n      // we will not trim the comment value and we will expect exactly one space on\n      // either side of the GraphQL string\n      // Also see ./embed.js\n      var hasLanguageComment = ast.leadingComments && ast.leadingComments.some(function (comment) {\n        return comment.type === \"CommentBlock\" && [\"GraphQL\", \"HTML\"].some(function (languageName) {\n          return comment.value === \" \".concat(languageName, \" \");\n        });\n      });\n\n      if (hasLanguageComment || parent.type === \"CallExpression\" && parent.callee.name === \"graphql\") {\n        newObj.quasis.forEach(function (quasi) {\n          return delete quasi.value;\n        });\n      }\n    }\n  }\n\n  function isUnbalancedLogicalTree(newObj) {\n    return newObj.type === \"LogicalExpression\" && newObj.right.type === \"LogicalExpression\" && newObj.operator === newObj.right.operator;\n  }\n\n  function rebalanceLogicalTree(newObj) {\n    if (isUnbalancedLogicalTree(newObj)) {\n      return rebalanceLogicalTree({\n        type: \"LogicalExpression\",\n        operator: newObj.operator,\n        left: rebalanceLogicalTree({\n          type: \"LogicalExpression\",\n          operator: newObj.operator,\n          left: newObj.left,\n          right: newObj.right.left,\n          loc: {}\n        }),\n        right: newObj.right.right,\n        loc: {}\n      });\n    }\n\n    return newObj;\n  }\n\n  var clean_1$1 = clean$4;\n\n  var getLast$1 = util.getLast,\n      hasNewline$3 = util.hasNewline,\n      hasNewlineInRange$1 = util.hasNewlineInRange,\n      hasIgnoreComment$3 = util.hasIgnoreComment,\n      hasNodeIgnoreComment$1 = util.hasNodeIgnoreComment,\n      skipWhitespace$1 = util.skipWhitespace;\n  var isIdentifierName = utils$1.keyword.isIdentifierNameES5; // We match any whitespace except line terminators because\n  // Flow annotation comments cannot be split across lines. For example:\n  //\n  // (this /*\n  // : any */).foo = 5;\n  //\n  // is not picked up by Flow (see https://github.com/facebook/flow/issues/7050), so\n  // removing the newline would create a type annotation that the user did not intend\n  // to create.\n\n  var NON_LINE_TERMINATING_WHITE_SPACE = \"(?:(?=.)\\\\s)\";\n  var FLOW_SHORTHAND_ANNOTATION = new RegExp(\"^\".concat(NON_LINE_TERMINATING_WHITE_SPACE, \"*:\"));\n  var FLOW_ANNOTATION = new RegExp(\"^\".concat(NON_LINE_TERMINATING_WHITE_SPACE, \"*::\"));\n\n  function hasFlowShorthandAnnotationComment(node) {\n    // https://flow.org/en/docs/types/comments/\n    // Syntax example: const r = new (window.Request /*: Class<Request> */)(\"\");\n    return node.extra && node.extra.parenthesized && node.trailingComments && node.trailingComments[0].value.match(FLOW_SHORTHAND_ANNOTATION);\n  }\n\n  function hasFlowAnnotationComment(comments) {\n    return comments && comments[0].value.match(FLOW_ANNOTATION);\n  }\n\n  function hasNode(node, fn) {\n    if (!node || _typeof(node) !== \"object\") {\n      return false;\n    }\n\n    if (Array.isArray(node)) {\n      return node.some(function (value) {\n        return hasNode(value, fn);\n      });\n    }\n\n    var result = fn(node);\n    return typeof result === \"boolean\" ? result : Object.keys(node).some(function (key) {\n      return hasNode(node[key], fn);\n    });\n  }\n\n  function hasNakedLeftSide(node) {\n    return node.type === \"AssignmentExpression\" || node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\" || node.type === \"NGPipeExpression\" || node.type === \"ConditionalExpression\" || node.type === \"CallExpression\" || node.type === \"OptionalCallExpression\" || node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\" || node.type === \"SequenceExpression\" || node.type === \"TaggedTemplateExpression\" || node.type === \"BindExpression\" || node.type === \"UpdateExpression\" && !node.prefix || node.type === \"TSAsExpression\" || node.type === \"TSNonNullExpression\";\n  }\n\n  function getLeftSide(node) {\n    if (node.expressions) {\n      return node.expressions[0];\n    }\n\n    return node.left || node.test || node.callee || node.object || node.tag || node.argument || node.expression;\n  }\n\n  function getLeftSidePathName(path, node) {\n    if (node.expressions) {\n      return [\"expressions\", 0];\n    }\n\n    if (node.left) {\n      return [\"left\"];\n    }\n\n    if (node.test) {\n      return [\"test\"];\n    }\n\n    if (node.object) {\n      return [\"object\"];\n    }\n\n    if (node.callee) {\n      return [\"callee\"];\n    }\n\n    if (node.tag) {\n      return [\"tag\"];\n    }\n\n    if (node.argument) {\n      return [\"argument\"];\n    }\n\n    if (node.expression) {\n      return [\"expression\"];\n    }\n\n    throw new Error(\"Unexpected node has no left side\", node);\n  }\n\n  function isLiteral(node) {\n    return node.type === \"BooleanLiteral\" || node.type === \"DirectiveLiteral\" || node.type === \"Literal\" || node.type === \"NullLiteral\" || node.type === \"NumericLiteral\" || node.type === \"RegExpLiteral\" || node.type === \"StringLiteral\" || node.type === \"TemplateLiteral\" || node.type === \"TSTypeLiteral\" || node.type === \"JSXText\";\n  }\n\n  function isNumericLiteral(node) {\n    return node.type === \"NumericLiteral\" || node.type === \"Literal\" && typeof node.value === \"number\";\n  }\n\n  function isStringLiteral(node) {\n    return node.type === \"StringLiteral\" || node.type === \"Literal\" && typeof node.value === \"string\";\n  }\n\n  function isObjectType(n) {\n    return n.type === \"ObjectTypeAnnotation\" || n.type === \"TSTypeLiteral\";\n  }\n\n  function isFunctionOrArrowExpression(node) {\n    return node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\";\n  }\n\n  function isFunctionOrArrowExpressionWithBody(node) {\n    return node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\" && node.body.type === \"BlockStatement\";\n  }\n\n  function isTemplateLiteral(node) {\n    return node.type === \"TemplateLiteral\";\n  } // `inject` is used in AngularJS 1.x, `async` in Angular 2+\n  // example: https://docs.angularjs.org/guide/unit-testing#using-beforeall-\n\n\n  function isAngularTestWrapper(node) {\n    return (node.type === \"CallExpression\" || node.type === \"OptionalCallExpression\") && node.callee.type === \"Identifier\" && (node.callee.name === \"async\" || node.callee.name === \"inject\" || node.callee.name === \"fakeAsync\");\n  }\n\n  function isJSXNode(node) {\n    return node.type === \"JSXElement\" || node.type === \"JSXFragment\";\n  }\n\n  function isTheOnlyJSXElementInMarkdown(options, path) {\n    if (options.parentParser !== \"markdown\" && options.parentParser !== \"mdx\") {\n      return false;\n    }\n\n    var node = path.getNode();\n\n    if (!node.expression || !isJSXNode(node.expression)) {\n      return false;\n    }\n\n    var parent = path.getParentNode();\n    return parent.type === \"Program\" && parent.body.length == 1;\n  } // Detect an expression node representing `{\" \"}`\n\n\n  function isJSXWhitespaceExpression(node) {\n    return node.type === \"JSXExpressionContainer\" && isLiteral(node.expression) && node.expression.value === \" \" && !node.expression.comments;\n  }\n\n  function isMemberExpressionChain(node) {\n    if (node.type !== \"MemberExpression\" && node.type !== \"OptionalMemberExpression\") {\n      return false;\n    }\n\n    if (node.object.type === \"Identifier\") {\n      return true;\n    }\n\n    return isMemberExpressionChain(node.object);\n  }\n\n  function isGetterOrSetter(node) {\n    return node.kind === \"get\" || node.kind === \"set\";\n  }\n\n  function sameLocStart(nodeA, nodeB, options) {\n    return options.locStart(nodeA) === options.locStart(nodeB);\n  } // TODO: This is a bad hack and we need a better way to distinguish between\n  // arrow functions and otherwise\n\n\n  function isFunctionNotation(node, options) {\n    return isGetterOrSetter(node) || sameLocStart(node, node.value, options);\n  } // Hack to differentiate between the following two which have the same ast\n  // type T = { method: () => void };\n  // type T = { method(): void };\n\n\n  function isObjectTypePropertyAFunction(node, options) {\n    return (node.type === \"ObjectTypeProperty\" || node.type === \"ObjectTypeInternalSlot\") && node.value.type === \"FunctionTypeAnnotation\" && !node.static && !isFunctionNotation(node, options);\n  } // Hack to differentiate between the following two which have the same ast\n  // declare function f(a): void;\n  // var f: (a) => void;\n\n\n  function isTypeAnnotationAFunction(node, options) {\n    return (node.type === \"TypeAnnotation\" || node.type === \"TSTypeAnnotation\") && node.typeAnnotation.type === \"FunctionTypeAnnotation\" && !node.static && !sameLocStart(node, node.typeAnnotation, options);\n  }\n\n  function isBinaryish(node) {\n    return node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\" || node.type === \"NGPipeExpression\";\n  }\n\n  function isMemberish(node) {\n    return node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\" || node.type === \"BindExpression\" && node.object;\n  }\n\n  function isSimpleFlowType(node) {\n    var flowTypeAnnotations = [\"AnyTypeAnnotation\", \"NullLiteralTypeAnnotation\", \"GenericTypeAnnotation\", \"ThisTypeAnnotation\", \"NumberTypeAnnotation\", \"VoidTypeAnnotation\", \"EmptyTypeAnnotation\", \"MixedTypeAnnotation\", \"BooleanTypeAnnotation\", \"BooleanLiteralTypeAnnotation\", \"StringTypeAnnotation\"];\n    return node && flowTypeAnnotations.indexOf(node.type) !== -1 && !(node.type === \"GenericTypeAnnotation\" && node.typeParameters);\n  }\n\n  var unitTestRe = /^(skip|[fx]?(it|describe|test))$/;\n\n  function isSkipOrOnlyBlock(node) {\n    return (node.callee.type === \"MemberExpression\" || node.callee.type === \"OptionalMemberExpression\") && node.callee.object.type === \"Identifier\" && node.callee.property.type === \"Identifier\" && unitTestRe.test(node.callee.object.name) && (node.callee.property.name === \"only\" || node.callee.property.name === \"skip\");\n  }\n\n  function isUnitTestSetUp(n) {\n    var unitTestSetUpRe = /^(before|after)(Each|All)$/;\n    return n.callee.type === \"Identifier\" && unitTestSetUpRe.test(n.callee.name) && n.arguments.length === 1;\n  } // eg; `describe(\"some string\", (done) => {})`\n\n\n  function isTestCall(n, parent) {\n    if (n.type !== \"CallExpression\") {\n      return false;\n    }\n\n    if (n.arguments.length === 1) {\n      if (isAngularTestWrapper(n) && parent && isTestCall(parent)) {\n        return isFunctionOrArrowExpression(n.arguments[0]);\n      }\n\n      if (isUnitTestSetUp(n)) {\n        return isAngularTestWrapper(n.arguments[0]);\n      }\n    } else if (n.arguments.length === 2 || n.arguments.length === 3) {\n      if ((n.callee.type === \"Identifier\" && unitTestRe.test(n.callee.name) || isSkipOrOnlyBlock(n)) && (isTemplateLiteral(n.arguments[0]) || isStringLiteral(n.arguments[0]))) {\n        // it(\"name\", () => { ... }, 2500)\n        if (n.arguments[2] && !isNumericLiteral(n.arguments[2])) {\n          return false;\n        }\n\n        return (n.arguments.length === 2 ? isFunctionOrArrowExpression(n.arguments[1]) : isFunctionOrArrowExpressionWithBody(n.arguments[1]) && n.arguments[1].params.length <= 1) || isAngularTestWrapper(n.arguments[1]);\n      }\n    }\n\n    return false;\n  }\n\n  function hasLeadingComment$2(node) {\n    return node.comments && node.comments.some(function (comment) {\n      return comment.leading;\n    });\n  }\n\n  function hasTrailingComment(node) {\n    return node.comments && node.comments.some(function (comment) {\n      return comment.trailing;\n    });\n  }\n\n  function isCallOrOptionalCallExpression(node) {\n    return node.type === \"CallExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  function hasDanglingComments(node) {\n    return node.comments && node.comments.some(function (comment) {\n      return !comment.leading && !comment.trailing;\n    });\n  }\n  /** identify if an angular expression seems to have side effects */\n\n\n  function hasNgSideEffect(path) {\n    return hasNode(path.getValue(), function (node) {\n      switch (node.type) {\n        case undefined:\n          return false;\n\n        case \"CallExpression\":\n        case \"OptionalCallExpression\":\n        case \"AssignmentExpression\":\n          return true;\n      }\n    });\n  }\n\n  function isNgForOf(node, index, parentNode) {\n    return node.type === \"NGMicrosyntaxKeyedExpression\" && node.key.name === \"of\" && index === 1 && parentNode.body[0].type === \"NGMicrosyntaxLet\" && parentNode.body[0].value === null;\n  }\n  /** @param node {import(\"estree\").TemplateLiteral} */\n\n\n  function isSimpleTemplateLiteral(node) {\n    if (node.expressions.length === 0) {\n      return false;\n    }\n\n    return node.expressions.every(function (expr) {\n      // Disallow comments since printDocToString can't print them here\n      if (expr.comments) {\n        return false;\n      } // Allow `x` and `this`\n\n\n      if (expr.type === \"Identifier\" || expr.type === \"ThisExpression\") {\n        return true;\n      } // Allow `a.b.c`, `a.b[c]`, and `this.x.y`\n\n\n      if (expr.type === \"MemberExpression\" || expr.type === \"OptionalMemberExpression\") {\n        var head = expr;\n\n        while (head.type === \"MemberExpression\" || head.type === \"OptionalMemberExpression\") {\n          if (head.property.type !== \"Identifier\" && head.property.type !== \"Literal\" && head.property.type !== \"StringLiteral\" && head.property.type !== \"NumericLiteral\") {\n            return false;\n          }\n\n          head = head.object;\n\n          if (head.comments) {\n            return false;\n          }\n        }\n\n        if (head.type === \"Identifier\" || head.type === \"ThisExpression\") {\n          return true;\n        }\n\n        return false;\n      }\n\n      return false;\n    });\n  }\n\n  function getFlowVariance(path) {\n    if (!path.variance) {\n      return null;\n    } // Babel 7.0 currently uses variance node type, and flow should\n    // follow suit soon:\n    // https://github.com/babel/babel/issues/4722\n\n\n    var variance = path.variance.kind || path.variance;\n\n    switch (variance) {\n      case \"plus\":\n        return \"+\";\n\n      case \"minus\":\n        return \"-\";\n\n      default:\n        /* istanbul ignore next */\n        return variance;\n    }\n  }\n\n  function classPropMayCauseASIProblems(path) {\n    var node = path.getNode();\n\n    if (node.type !== \"ClassProperty\") {\n      return false;\n    }\n\n    var name = node.key && node.key.name; // this isn't actually possible yet with most parsers available today\n    // so isn't properly tested yet.\n\n    if ((name === \"static\" || name === \"get\" || name === \"set\") && !node.value && !node.typeAnnotation) {\n      return true;\n    }\n  }\n\n  function classChildNeedsASIProtection(node) {\n    if (!node) {\n      return;\n    }\n\n    if (node.static || node.accessibility // TypeScript\n    ) {\n        return false;\n      }\n\n    if (!node.computed) {\n      var name = node.key && node.key.name;\n\n      if (name === \"in\" || name === \"instanceof\") {\n        return true;\n      }\n    }\n\n    switch (node.type) {\n      case \"ClassProperty\":\n      case \"TSAbstractClassProperty\":\n        return node.computed;\n\n      case \"MethodDefinition\": // Flow\n\n      case \"TSAbstractMethodDefinition\": // TypeScript\n\n      case \"ClassMethod\":\n      case \"ClassPrivateMethod\":\n        {\n          // Babel\n          var isAsync = node.value ? node.value.async : node.async;\n          var isGenerator = node.value ? node.value.generator : node.generator;\n\n          if (isAsync || node.kind === \"get\" || node.kind === \"set\") {\n            return false;\n          }\n\n          if (node.computed || isGenerator) {\n            return true;\n          }\n\n          return false;\n        }\n\n      case \"TSIndexSignature\":\n        return true;\n\n      default:\n        /* istanbul ignore next */\n        return false;\n    }\n  }\n\n  function getTypeScriptMappedTypeModifier(tokenNode, keyword) {\n    if (tokenNode === \"+\") {\n      return \"+\" + keyword;\n    } else if (tokenNode === \"-\") {\n      return \"-\" + keyword;\n    }\n\n    return keyword;\n  }\n\n  function hasNewlineBetweenOrAfterDecorators(node, options) {\n    return hasNewlineInRange$1(options.originalText, options.locStart(node.decorators[0]), options.locEnd(getLast$1(node.decorators))) || hasNewline$3(options.originalText, options.locEnd(getLast$1(node.decorators)));\n  } // Only space, newline, carriage return, and tab are treated as whitespace\n  // inside JSX.\n\n\n  var jsxWhitespaceChars = \" \\n\\r\\t\";\n  var matchJsxWhitespaceRegex = new RegExp(\"([\" + jsxWhitespaceChars + \"]+)\");\n  var containsNonJsxWhitespaceRegex = new RegExp(\"[^\" + jsxWhitespaceChars + \"]\"); // Meaningful if it contains non-whitespace characters,\n  // or it contains whitespace without a new line.\n\n  function isMeaningfulJSXText(node) {\n    return isLiteral(node) && (containsNonJsxWhitespaceRegex.test(rawText(node)) || !/\\n/.test(rawText(node)));\n  }\n\n  function hasJsxIgnoreComment(path) {\n    var node = path.getValue();\n    var parent = path.getParentNode();\n\n    if (!parent || !node || !isJSXNode(node) || !isJSXNode(parent)) {\n      return false;\n    } // Lookup the previous sibling, ignoring any empty JSXText elements\n\n\n    var index = parent.children.indexOf(node);\n    var prevSibling = null;\n\n    for (var i = index; i > 0; i--) {\n      var candidate = parent.children[i - 1];\n\n      if (candidate.type === \"JSXText\" && !isMeaningfulJSXText(candidate)) {\n        continue;\n      }\n\n      prevSibling = candidate;\n      break;\n    }\n\n    return prevSibling && prevSibling.type === \"JSXExpressionContainer\" && prevSibling.expression.type === \"JSXEmptyExpression\" && prevSibling.expression.comments && prevSibling.expression.comments.find(function (comment) {\n      return comment.value.trim() === \"prettier-ignore\";\n    });\n  }\n\n  function isEmptyJSXElement(node) {\n    if (node.children.length === 0) {\n      return true;\n    }\n\n    if (node.children.length > 1) {\n      return false;\n    } // if there is one text child and does not contain any meaningful text\n    // we can treat the element as empty.\n\n\n    var child = node.children[0];\n    return isLiteral(child) && !isMeaningfulJSXText(child);\n  }\n\n  function hasPrettierIgnore$2(path) {\n    return hasIgnoreComment$3(path) || hasJsxIgnoreComment(path);\n  }\n\n  function isLastStatement(path) {\n    var parent = path.getParentNode();\n\n    if (!parent) {\n      return true;\n    }\n\n    var node = path.getValue();\n    var body = (parent.body || parent.consequent).filter(function (stmt) {\n      return stmt.type !== \"EmptyStatement\";\n    });\n    return body && body[body.length - 1] === node;\n  }\n\n  function isFlowAnnotationComment(text, typeAnnotation, options) {\n    var start = options.locStart(typeAnnotation);\n    var end = skipWhitespace$1(text, options.locEnd(typeAnnotation));\n    return text.substr(start, 2) === \"/*\" && text.substr(end, 2) === \"*/\";\n  }\n\n  function hasLeadingOwnLineComment(text, node, options) {\n    if (isJSXNode(node)) {\n      return hasNodeIgnoreComment$1(node);\n    }\n\n    var res = node.comments && node.comments.some(function (comment) {\n      return comment.leading && hasNewline$3(text, options.locEnd(comment));\n    });\n    return res;\n  } // This recurses the return argument, looking for the first token\n  // (the leftmost leaf node) and, if it (or its parents) has any\n  // leadingComments, returns true (so it can be wrapped in parens).\n\n\n  function returnArgumentHasLeadingComment(options, argument) {\n    if (hasLeadingOwnLineComment(options.originalText, argument, options)) {\n      return true;\n    }\n\n    if (hasNakedLeftSide(argument)) {\n      var leftMost = argument;\n      var newLeftMost;\n\n      while (newLeftMost = getLeftSide(leftMost)) {\n        leftMost = newLeftMost;\n\n        if (hasLeadingOwnLineComment(options.originalText, leftMost, options)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  function isStringPropSafeToCoerceToIdentifier(node, options) {\n    return isStringLiteral(node.key) && isIdentifierName(node.key.value) && options.parser !== \"json\" && !(options.parser === \"typescript\" && node.type === \"ClassProperty\");\n  }\n\n  function isJestEachTemplateLiteral(node, parentNode) {\n    /**\n     * describe.each`table`(name, fn)\n     * describe.only.each`table`(name, fn)\n     * describe.skip.each`table`(name, fn)\n     * test.each`table`(name, fn)\n     * test.only.each`table`(name, fn)\n     * test.skip.each`table`(name, fn)\n     *\n     * Ref: https://github.com/facebook/jest/pull/6102\n     */\n    var jestEachTriggerRegex = /^[xf]?(describe|it|test)$/;\n    return parentNode.type === \"TaggedTemplateExpression\" && parentNode.quasi === node && parentNode.tag.type === \"MemberExpression\" && parentNode.tag.property.type === \"Identifier\" && parentNode.tag.property.name === \"each\" && (parentNode.tag.object.type === \"Identifier\" && jestEachTriggerRegex.test(parentNode.tag.object.name) || parentNode.tag.object.type === \"MemberExpression\" && parentNode.tag.object.property.type === \"Identifier\" && (parentNode.tag.object.property.name === \"only\" || parentNode.tag.object.property.name === \"skip\") && parentNode.tag.object.object.type === \"Identifier\" && jestEachTriggerRegex.test(parentNode.tag.object.object.name));\n  }\n\n  function templateLiteralHasNewLines(template) {\n    return template.quasis.some(function (quasi) {\n      return quasi.value.raw.includes(\"\\n\");\n    });\n  }\n\n  function isTemplateOnItsOwnLine(n, text, options) {\n    return (n.type === \"TemplateLiteral\" && templateLiteralHasNewLines(n) || n.type === \"TaggedTemplateExpression\" && templateLiteralHasNewLines(n.quasi)) && !hasNewline$3(text, options.locStart(n), {\n      backwards: true\n    });\n  }\n\n  function needsHardlineAfterDanglingComment(node) {\n    if (!node.comments) {\n      return false;\n    }\n\n    var lastDanglingComment = getLast$1(node.comments.filter(function (comment) {\n      return !comment.leading && !comment.trailing;\n    }));\n    return lastDanglingComment && !comments$1.isBlockComment(lastDanglingComment);\n  } // If we have nested conditional expressions, we want to print them in JSX mode\n  // if there's at least one JSXElement somewhere in the tree.\n  //\n  // A conditional expression chain like this should be printed in normal mode,\n  // because there aren't JSXElements anywhere in it:\n  //\n  // isA ? \"A\" : isB ? \"B\" : isC ? \"C\" : \"Unknown\";\n  //\n  // But a conditional expression chain like this should be printed in JSX mode,\n  // because there is a JSXElement in the last ConditionalExpression:\n  //\n  // isA ? \"A\" : isB ? \"B\" : isC ? \"C\" : <span className=\"warning\">Unknown</span>;\n  //\n  // This type of ConditionalExpression chain is structured like this in the AST:\n  //\n  // ConditionalExpression {\n  //   test: ...,\n  //   consequent: ...,\n  //   alternate: ConditionalExpression {\n  //     test: ...,\n  //     consequent: ...,\n  //     alternate: ConditionalExpression {\n  //       test: ...,\n  //       consequent: ...,\n  //       alternate: ...,\n  //     }\n  //   }\n  // }\n  //\n  // We want to traverse over that shape and convert it into a flat structure so\n  // that we can find if there's a JSXElement somewhere inside.\n\n\n  function getConditionalChainContents(node) {\n    // Given this code:\n    //\n    // // Using a ConditionalExpression as the consequent is uncommon, but should\n    // // be handled.\n    // A ? B : C ? D : E ? F ? G : H : I\n    //\n    // which has this AST:\n    //\n    // ConditionalExpression {\n    //   test: Identifier(A),\n    //   consequent: Identifier(B),\n    //   alternate: ConditionalExpression {\n    //     test: Identifier(C),\n    //     consequent: Identifier(D),\n    //     alternate: ConditionalExpression {\n    //       test: Identifier(E),\n    //       consequent: ConditionalExpression {\n    //         test: Identifier(F),\n    //         consequent: Identifier(G),\n    //         alternate: Identifier(H),\n    //       },\n    //       alternate: Identifier(I),\n    //     }\n    //   }\n    // }\n    //\n    // we should return this Array:\n    //\n    // [\n    //   Identifier(A),\n    //   Identifier(B),\n    //   Identifier(C),\n    //   Identifier(D),\n    //   Identifier(E),\n    //   Identifier(F),\n    //   Identifier(G),\n    //   Identifier(H),\n    //   Identifier(I)\n    // ];\n    //\n    // This loses the information about whether each node was the test,\n    // consequent, or alternate, but we don't care about that here- we are only\n    // flattening this structure to find if there's any JSXElements inside.\n    var nonConditionalExpressions = [];\n\n    function recurse(node) {\n      if (node.type === \"ConditionalExpression\") {\n        recurse(node.test);\n        recurse(node.consequent);\n        recurse(node.alternate);\n      } else {\n        nonConditionalExpressions.push(node);\n      }\n    }\n\n    recurse(node);\n    return nonConditionalExpressions;\n  }\n\n  function conditionalExpressionChainContainsJSX(node) {\n    return Boolean(getConditionalChainContents(node).find(isJSXNode));\n  } // Logic to check for args with multiple anonymous functions. For instance,\n  // the following call should be split on multiple lines for readability:\n  // source.pipe(map((x) => x + x), filter((x) => x % 2 === 0))\n\n\n  function isFunctionCompositionArgs(args) {\n    if (args.length <= 1) {\n      return false;\n    }\n\n    var count = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var arg = _step.value;\n\n        if (isFunctionOrArrowExpression(arg)) {\n          count += 1;\n\n          if (count > 1) {\n            return true;\n          }\n        } else if (isCallOrOptionalCallExpression(arg)) {\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = arg.arguments[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var childArg = _step2.value;\n\n              if (isFunctionOrArrowExpression(childArg)) {\n                return true;\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return false;\n  } // Logic to determine if a call is a “long curried function call”.\n  // See https://github.com/prettier/prettier/issues/1420.\n  //\n  // `connect(a, b, c)(d)`\n  // In the above call expression, the second call is the parent node and the\n  // first call is the current node.\n\n\n  function isLongCurriedCallExpression(path) {\n    var node = path.getValue();\n    var parent = path.getParentNode();\n    return isCallOrOptionalCallExpression(node) && isCallOrOptionalCallExpression(parent) && parent.callee === node && node.arguments.length > parent.arguments.length && parent.arguments.length > 0;\n  }\n\n  function rawText(node) {\n    return node.extra ? node.extra.raw : node.raw;\n  }\n\n  function identity$1(x) {\n    return x;\n  }\n\n  function isTSXFile(options) {\n    return options.filepath && /\\.tsx$/i.test(options.filepath);\n  }\n\n  var utils$4 = {\n    classChildNeedsASIProtection: classChildNeedsASIProtection,\n    classPropMayCauseASIProblems: classPropMayCauseASIProblems,\n    conditionalExpressionChainContainsJSX: conditionalExpressionChainContainsJSX,\n    getFlowVariance: getFlowVariance,\n    getLeftSidePathName: getLeftSidePathName,\n    getTypeScriptMappedTypeModifier: getTypeScriptMappedTypeModifier,\n    hasDanglingComments: hasDanglingComments,\n    hasFlowAnnotationComment: hasFlowAnnotationComment,\n    hasFlowShorthandAnnotationComment: hasFlowShorthandAnnotationComment,\n    hasLeadingComment: hasLeadingComment$2,\n    hasLeadingOwnLineComment: hasLeadingOwnLineComment,\n    hasNakedLeftSide: hasNakedLeftSide,\n    hasNewlineBetweenOrAfterDecorators: hasNewlineBetweenOrAfterDecorators,\n    hasNgSideEffect: hasNgSideEffect,\n    hasNode: hasNode,\n    hasPrettierIgnore: hasPrettierIgnore$2,\n    hasTrailingComment: hasTrailingComment,\n    identity: identity$1,\n    isBinaryish: isBinaryish,\n    isCallOrOptionalCallExpression: isCallOrOptionalCallExpression,\n    isEmptyJSXElement: isEmptyJSXElement,\n    isFlowAnnotationComment: isFlowAnnotationComment,\n    isFunctionCompositionArgs: isFunctionCompositionArgs,\n    isFunctionNotation: isFunctionNotation,\n    isFunctionOrArrowExpression: isFunctionOrArrowExpression,\n    isGetterOrSetter: isGetterOrSetter,\n    isJestEachTemplateLiteral: isJestEachTemplateLiteral,\n    isJSXNode: isJSXNode,\n    isJSXWhitespaceExpression: isJSXWhitespaceExpression,\n    isLastStatement: isLastStatement,\n    isLiteral: isLiteral,\n    isLongCurriedCallExpression: isLongCurriedCallExpression,\n    isMeaningfulJSXText: isMeaningfulJSXText,\n    isMemberExpressionChain: isMemberExpressionChain,\n    isMemberish: isMemberish,\n    isNgForOf: isNgForOf,\n    isNumericLiteral: isNumericLiteral,\n    isObjectType: isObjectType,\n    isObjectTypePropertyAFunction: isObjectTypePropertyAFunction,\n    isSimpleFlowType: isSimpleFlowType,\n    isSimpleTemplateLiteral: isSimpleTemplateLiteral,\n    isStringLiteral: isStringLiteral,\n    isStringPropSafeToCoerceToIdentifier: isStringPropSafeToCoerceToIdentifier,\n    isTemplateOnItsOwnLine: isTemplateOnItsOwnLine,\n    isTestCall: isTestCall,\n    isTheOnlyJSXElementInMarkdown: isTheOnlyJSXElementInMarkdown,\n    isTSXFile: isTSXFile,\n    isTypeAnnotationAFunction: isTypeAnnotationAFunction,\n    matchJsxWhitespaceRegex: matchJsxWhitespaceRegex,\n    needsHardlineAfterDanglingComment: needsHardlineAfterDanglingComment,\n    rawText: rawText,\n    returnArgumentHasLeadingComment: returnArgumentHasLeadingComment\n  };\n\n  var getLeftSidePathName$1 = utils$4.getLeftSidePathName,\n      hasFlowShorthandAnnotationComment$1 = utils$4.hasFlowShorthandAnnotationComment,\n      hasNakedLeftSide$1 = utils$4.hasNakedLeftSide,\n      hasNode$1 = utils$4.hasNode;\n\n  function hasClosureCompilerTypeCastComment(text, path) {\n    // https://github.com/google/closure-compiler/wiki/Annotating-Types#type-casts\n    // Syntax example: var x = /** @type {string} */ (fruit);\n    var n = path.getValue();\n    return isParenthesized(n) && (hasTypeCastComment(n) || hasAncestorTypeCastComment(0)); // for sub-item: /** @type {array} */ (numberOrString).map(x => x);\n\n    function hasAncestorTypeCastComment(index) {\n      var ancestor = path.getParentNode(index);\n      return ancestor && !isParenthesized(ancestor) ? hasTypeCastComment(ancestor) || hasAncestorTypeCastComment(index + 1) : false;\n    }\n\n    function hasTypeCastComment(node) {\n      return node.comments && node.comments.some(function (comment) {\n        return comment.leading && comments$1.isBlockComment(comment) && isTypeCastComment(comment.value);\n      });\n    }\n\n    function isParenthesized(node) {\n      // Closure typecast comments only really make sense when _not_ using\n      // typescript or flow parsers, so we take advantage of the babel parser's\n      // parenthesized expressions.\n      return node.extra && node.extra.parenthesized;\n    }\n\n    function isTypeCastComment(comment) {\n      var cleaned = comment.trim().split(\"\\n\").map(function (line) {\n        return line.replace(/^[\\s*]+/, \"\");\n      }).join(\" \").trim();\n\n      if (!/^@type\\s*\\{[^]+\\}$/.test(cleaned)) {\n        return false;\n      }\n\n      var isCompletelyClosed = false;\n      var unpairedBracketCount = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = cleaned[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var char = _step.value;\n\n          if (char === \"{\") {\n            if (isCompletelyClosed) {\n              return false;\n            }\n\n            unpairedBracketCount++;\n          } else if (char === \"}\") {\n            if (unpairedBracketCount === 0) {\n              return false;\n            }\n\n            unpairedBracketCount--;\n\n            if (unpairedBracketCount === 0) {\n              isCompletelyClosed = true;\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return unpairedBracketCount === 0;\n    }\n  }\n\n  function needsParens(path, options) {\n    var parent = path.getParentNode();\n\n    if (!parent) {\n      return false;\n    }\n\n    var name = path.getName();\n    var node = path.getNode(); // If the value of this path is some child of a Node and not a Node\n    // itself, then it doesn't need parentheses. Only Node objects (in\n    // fact, only Expression nodes) need parentheses.\n\n    if (path.getValue() !== node) {\n      return false;\n    } // to avoid unexpected `}}` in HTML interpolations\n\n\n    if (options.__isInHtmlInterpolation && !options.bracketSpacing && endsWithRightBracket(node) && isFollowedByRightBracket(path)) {\n      return true;\n    } // Only statements don't need parentheses.\n\n\n    if (isStatement(node)) {\n      return false;\n    } // Closure compiler requires that type casted expressions to be surrounded by\n    // parentheses.\n\n\n    if (hasClosureCompilerTypeCastComment(options.originalText, path)) {\n      return true;\n    }\n\n    if ( // Preserve parens if we have a Flow annotation comment, unless we're using the Flow\n    // parser. The Flow parser turns Flow comments into type annotation nodes in its\n    // AST, which we handle separately.\n    options.parser !== \"flow\" && hasFlowShorthandAnnotationComment$1(path.getValue())) {\n      return true;\n    } // Identifiers never need parentheses.\n\n\n    if (node.type === \"Identifier\") {\n      // ...unless those identifiers are embed placeholders. They might be substituted by complex\n      // expressions, so the parens around them should not be dropped. Example (JS-in-HTML-in-JS):\n      //     let tpl = html`<script> f((${expr}) / 2); </script>`;\n      // If the inner JS formatter removes the parens, the expression might change its meaning:\n      //     f((a + b) / 2)  vs  f(a + b / 2)\n      if (node.extra && node.extra.parenthesized && /^PRETTIER_HTML_PLACEHOLDER_\\d+_\\d+_IN_JS$/.test(node.name)) {\n        return true;\n      }\n\n      return false;\n    }\n\n    if (parent.type === \"ParenthesizedExpression\") {\n      return false;\n    } // Add parens around the extends clause of a class. It is needed for almost\n    // all expressions.\n\n\n    if ((parent.type === \"ClassDeclaration\" || parent.type === \"ClassExpression\") && parent.superClass === node && (node.type === \"ArrowFunctionExpression\" || node.type === \"AssignmentExpression\" || node.type === \"AwaitExpression\" || node.type === \"BinaryExpression\" || node.type === \"ConditionalExpression\" || node.type === \"LogicalExpression\" || node.type === \"NewExpression\" || node.type === \"ObjectExpression\" || node.type === \"ParenthesizedExpression\" || node.type === \"SequenceExpression\" || node.type === \"TaggedTemplateExpression\" || node.type === \"UnaryExpression\" || node.type === \"UpdateExpression\" || node.type === \"YieldExpression\")) {\n      return true;\n    } // `export default function` or `export default class` can't be followed by\n    // anything after. So an expression like `export default (function(){}).toString()`\n    // needs to be followed by a parentheses\n\n\n    if (parent.type === \"ExportDefaultDeclaration\") {\n      return shouldWrapFunctionForExportDefault(path, options);\n    }\n\n    if (parent.type === \"Decorator\" && parent.expression === node) {\n      var hasCallExpression = false;\n      var hasMemberExpression = false;\n      var current = node;\n\n      while (current) {\n        switch (current.type) {\n          case \"MemberExpression\":\n            hasMemberExpression = true;\n            current = current.object;\n            break;\n\n          case \"CallExpression\":\n            if (\n            /** @(x().y) */\n            hasMemberExpression ||\n            /** @(x().y()) */\n            hasCallExpression) {\n              return true;\n            }\n\n            hasCallExpression = true;\n            current = current.callee;\n            break;\n\n          case \"Identifier\":\n            return false;\n\n          default:\n            return true;\n        }\n      }\n\n      return true;\n    }\n\n    if (parent.type === \"ArrowFunctionExpression\" && parent.body === node && node.type !== \"SequenceExpression\" && // these have parens added anyway\n    util.startsWithNoLookaheadToken(node,\n    /* forbidFunctionClassAndDoExpr */\n    false) || parent.type === \"ExpressionStatement\" && util.startsWithNoLookaheadToken(node,\n    /* forbidFunctionClassAndDoExpr */\n    true)) {\n      return true;\n    }\n\n    switch (node.type) {\n      case \"SpreadElement\":\n      case \"SpreadProperty\":\n        return parent.type === \"MemberExpression\" && name === \"object\" && parent.object === node;\n\n      case \"UpdateExpression\":\n        if (parent.type === \"UnaryExpression\") {\n          return node.prefix && (node.operator === \"++\" && parent.operator === \"+\" || node.operator === \"--\" && parent.operator === \"-\");\n        }\n\n      // else fallthrough\n\n      case \"UnaryExpression\":\n        switch (parent.type) {\n          case \"UnaryExpression\":\n            return node.operator === parent.operator && (node.operator === \"+\" || node.operator === \"-\");\n\n          case \"BindExpression\":\n            return true;\n\n          case \"MemberExpression\":\n          case \"OptionalMemberExpression\":\n            return name === \"object\";\n\n          case \"TaggedTemplateExpression\":\n            return true;\n\n          case \"NewExpression\":\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            return name === \"callee\";\n\n          case \"BinaryExpression\":\n            return parent.operator === \"**\" && name === \"left\";\n\n          case \"TSNonNullExpression\":\n            return true;\n\n          default:\n            return false;\n        }\n\n      case \"BinaryExpression\":\n        {\n          if (parent.type === \"UpdateExpression\") {\n            return true;\n          }\n\n          var isLeftOfAForStatement = function isLeftOfAForStatement(node) {\n            var i = 0;\n\n            while (node) {\n              var _parent = path.getParentNode(i++);\n\n              if (!_parent) {\n                return false;\n              }\n\n              if (_parent.type === \"ForStatement\" && _parent.init === node) {\n                return true;\n              }\n\n              node = _parent;\n            }\n\n            return false;\n          };\n\n          if (node.operator === \"in\" && isLeftOfAForStatement(node)) {\n            return true;\n          }\n        }\n      // fallthrough\n\n      case \"TSTypeAssertion\":\n      case \"TSAsExpression\":\n      case \"LogicalExpression\":\n        switch (parent.type) {\n          case \"ConditionalExpression\":\n            return node.type === \"TSAsExpression\";\n\n          case \"CallExpression\":\n          case \"NewExpression\":\n          case \"OptionalCallExpression\":\n            return name === \"callee\";\n\n          case \"ClassExpression\":\n          case \"ClassDeclaration\":\n            return name === \"superClass\" && parent.superClass === node;\n\n          case \"TSTypeAssertion\":\n          case \"TaggedTemplateExpression\":\n          case \"UnaryExpression\":\n          case \"JSXSpreadAttribute\":\n          case \"SpreadElement\":\n          case \"SpreadProperty\":\n          case \"BindExpression\":\n          case \"AwaitExpression\":\n          case \"TSAsExpression\":\n          case \"TSNonNullExpression\":\n          case \"UpdateExpression\":\n            return true;\n\n          case \"MemberExpression\":\n          case \"OptionalMemberExpression\":\n            return name === \"object\";\n\n          case \"AssignmentExpression\":\n            return parent.left === node && (node.type === \"TSTypeAssertion\" || node.type === \"TSAsExpression\");\n\n          case \"LogicalExpression\":\n            if (node.type === \"LogicalExpression\") {\n              return parent.operator !== node.operator;\n            }\n\n          // else fallthrough\n\n          case \"BinaryExpression\":\n            {\n              if (!node.operator && node.type !== \"TSTypeAssertion\") {\n                return true;\n              }\n\n              var po = parent.operator;\n              var pp = util.getPrecedence(po);\n              var no = node.operator;\n              var np = util.getPrecedence(no);\n\n              if (pp > np) {\n                return true;\n              }\n\n              if (pp === np && name === \"right\") {\n                assert.strictEqual(parent.right, node);\n                return true;\n              }\n\n              if (pp === np && !util.shouldFlatten(po, no)) {\n                return true;\n              }\n\n              if (pp < np && no === \"%\") {\n                return po === \"+\" || po === \"-\";\n              } // Add parenthesis when working with bitwise operators\n              // It's not strictly needed but helps with code understanding\n\n\n              if (util.isBitwiseOperator(po)) {\n                return true;\n              }\n\n              return false;\n            }\n\n          default:\n            return false;\n        }\n\n      case \"SequenceExpression\":\n        switch (parent.type) {\n          case \"ReturnStatement\":\n            return false;\n\n          case \"ForStatement\":\n            // Although parentheses wouldn't hurt around sequence\n            // expressions in the head of for loops, traditional style\n            // dictates that e.g. i++, j++ should not be wrapped with\n            // parentheses.\n            return false;\n\n          case \"ExpressionStatement\":\n            return name !== \"expression\";\n\n          case \"ArrowFunctionExpression\":\n            // We do need parentheses, but SequenceExpressions are handled\n            // specially when printing bodies of arrow functions.\n            return name !== \"body\";\n\n          default:\n            // Otherwise err on the side of overparenthesization, adding\n            // explicit exceptions above if this proves overzealous.\n            return true;\n        }\n\n      case \"YieldExpression\":\n        if (parent.type === \"UnaryExpression\" || parent.type === \"AwaitExpression\" || parent.type === \"TSAsExpression\" || parent.type === \"TSNonNullExpression\") {\n          return true;\n        }\n\n      // else fallthrough\n\n      case \"AwaitExpression\":\n        switch (parent.type) {\n          case \"TaggedTemplateExpression\":\n          case \"UnaryExpression\":\n          case \"BinaryExpression\":\n          case \"LogicalExpression\":\n          case \"SpreadElement\":\n          case \"SpreadProperty\":\n          case \"TSAsExpression\":\n          case \"TSNonNullExpression\":\n          case \"BindExpression\":\n            return true;\n\n          case \"MemberExpression\":\n          case \"OptionalMemberExpression\":\n            return name === \"object\";\n\n          case \"NewExpression\":\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            return name === \"callee\";\n\n          case \"ConditionalExpression\":\n            return parent.test === node;\n\n          default:\n            return false;\n        }\n\n      case \"TSConditionalType\":\n        if (parent.type === \"TSConditionalType\" && node === parent.extendsType) {\n          return true;\n        }\n\n      // fallthrough\n\n      case \"TSFunctionType\":\n      case \"TSConstructorType\":\n        if (parent.type === \"TSConditionalType\" && node === parent.checkType) {\n          return true;\n        }\n\n      // fallthrough\n\n      case \"TSUnionType\":\n      case \"TSIntersectionType\":\n        if (parent.type === \"TSUnionType\" || parent.type === \"TSIntersectionType\") {\n          return true;\n        }\n\n      // fallthrough\n\n      case \"TSTypeOperator\":\n      case \"TSInferType\":\n        return parent.type === \"TSArrayType\" || parent.type === \"TSOptionalType\" || parent.type === \"TSRestType\" || parent.type === \"TSIndexedAccessType\" && node === parent.objectType || parent.type === \"TSTypeOperator\";\n\n      case \"ArrayTypeAnnotation\":\n        return parent.type === \"NullableTypeAnnotation\";\n\n      case \"IntersectionTypeAnnotation\":\n      case \"UnionTypeAnnotation\":\n        return parent.type === \"ArrayTypeAnnotation\" || parent.type === \"NullableTypeAnnotation\" || parent.type === \"IntersectionTypeAnnotation\" || parent.type === \"UnionTypeAnnotation\";\n\n      case \"NullableTypeAnnotation\":\n        return parent.type === \"ArrayTypeAnnotation\";\n\n      case \"FunctionTypeAnnotation\":\n        {\n          var ancestor = parent.type === \"NullableTypeAnnotation\" ? path.getParentNode(1) : parent;\n          return ancestor.type === \"UnionTypeAnnotation\" || ancestor.type === \"IntersectionTypeAnnotation\" || ancestor.type === \"ArrayTypeAnnotation\" || // We should check ancestor's parent to know whether the parentheses\n          // are really needed, but since ??T doesn't make sense this check\n          // will almost never be true.\n          ancestor.type === \"NullableTypeAnnotation\";\n        }\n\n      case \"StringLiteral\":\n      case \"NumericLiteral\":\n      case \"Literal\":\n        if (typeof node.value === \"string\" && parent.type === \"ExpressionStatement\" && ( // TypeScript workaround for https://github.com/JamesHenry/typescript-estree/issues/2\n        // See corresponding workaround in printer.js case: \"Literal\"\n        options.parser !== \"typescript\" && !parent.directive || options.parser === \"typescript\" && options.originalText.substr(options.locStart(node) - 1, 1) === \"(\")) {\n          // To avoid becoming a directive\n          var grandParent = path.getParentNode(1);\n          return grandParent.type === \"Program\" || grandParent.type === \"BlockStatement\";\n        }\n\n        return parent.type === \"MemberExpression\" && typeof node.value === \"number\" && name === \"object\" && parent.object === node;\n\n      case \"AssignmentExpression\":\n        {\n          var _grandParent = path.getParentNode(1);\n\n          if (parent.type === \"ArrowFunctionExpression\" && parent.body === node) {\n            return true;\n          } else if (parent.type === \"ClassProperty\" && parent.key === node && parent.computed) {\n            return false;\n          } else if (parent.type === \"TSPropertySignature\" && parent.name === node) {\n            return false;\n          } else if (parent.type === \"ForStatement\" && (parent.init === node || parent.update === node)) {\n            return false;\n          } else if (parent.type === \"ExpressionStatement\") {\n            return node.left.type === \"ObjectPattern\";\n          } else if (parent.type === \"TSPropertySignature\" && parent.key === node) {\n            return false;\n          } else if (parent.type === \"AssignmentExpression\") {\n            return false;\n          } else if (parent.type === \"SequenceExpression\" && _grandParent && _grandParent.type === \"ForStatement\" && (_grandParent.init === parent || _grandParent.update === parent)) {\n            return false;\n          } else if (parent.type === \"Property\" && parent.value === node) {\n            return false;\n          } else if (parent.type === \"NGChainedExpression\") {\n            return false;\n          }\n\n          return true;\n        }\n\n      case \"ConditionalExpression\":\n        switch (parent.type) {\n          case \"TaggedTemplateExpression\":\n          case \"UnaryExpression\":\n          case \"SpreadElement\":\n          case \"SpreadProperty\":\n          case \"BinaryExpression\":\n          case \"LogicalExpression\":\n          case \"NGPipeExpression\":\n          case \"ExportDefaultDeclaration\":\n          case \"AwaitExpression\":\n          case \"JSXSpreadAttribute\":\n          case \"TSTypeAssertion\":\n          case \"TypeCastExpression\":\n          case \"TSAsExpression\":\n          case \"TSNonNullExpression\":\n            return true;\n\n          case \"NewExpression\":\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            return name === \"callee\";\n\n          case \"ConditionalExpression\":\n            return name === \"test\" && parent.test === node;\n\n          case \"MemberExpression\":\n          case \"OptionalMemberExpression\":\n            return name === \"object\";\n\n          default:\n            return false;\n        }\n\n      case \"FunctionExpression\":\n        switch (parent.type) {\n          case \"NewExpression\":\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            // Not always necessary, but it's clearer to the reader if IIFEs are wrapped in parentheses.\n            // Is necessary if it is `expression` of `ExpressionStatement`.\n            return name === \"callee\";\n\n          case \"TaggedTemplateExpression\":\n            return true;\n          // This is basically a kind of IIFE.\n\n          default:\n            return false;\n        }\n\n      case \"ArrowFunctionExpression\":\n        switch (parent.type) {\n          case \"NewExpression\":\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            return name === \"callee\";\n\n          case \"MemberExpression\":\n          case \"OptionalMemberExpression\":\n            return name === \"object\";\n\n          case \"TSAsExpression\":\n          case \"BindExpression\":\n          case \"TaggedTemplateExpression\":\n          case \"UnaryExpression\":\n          case \"LogicalExpression\":\n          case \"BinaryExpression\":\n          case \"AwaitExpression\":\n          case \"TSTypeAssertion\":\n            return true;\n\n          case \"ConditionalExpression\":\n            return name === \"test\";\n\n          default:\n            return false;\n        }\n\n      case \"ClassExpression\":\n        switch (parent.type) {\n          case \"NewExpression\":\n            return name === \"callee\" && parent.callee === node;\n\n          default:\n            return false;\n        }\n\n      case \"OptionalMemberExpression\":\n      case \"OptionalCallExpression\":\n        if ((parent.type === \"MemberExpression\" && name === \"object\" || parent.type === \"CallExpression\" && name === \"callee\") && // workaround for https://github.com/facebook/flow/issues/8159\n        !(options.parser === \"flow\" && parent.range[0] === node.range[0])) {\n          return true;\n        }\n\n      // fallthrough\n\n      case \"CallExpression\":\n      case \"MemberExpression\":\n      case \"TaggedTemplateExpression\":\n      case \"TSNonNullExpression\":\n        if ((parent.type === \"BindExpression\" || parent.type === \"NewExpression\") && name === \"callee\") {\n          var object = node;\n\n          while (object) {\n            switch (object.type) {\n              case \"CallExpression\":\n              case \"OptionalCallExpression\":\n                return true;\n\n              case \"MemberExpression\":\n              case \"OptionalMemberExpression\":\n              case \"BindExpression\":\n                object = object.object;\n                break;\n              // tagged templates are basically member expressions from a grammar perspective\n              // see https://tc39.github.io/ecma262/#prod-MemberExpression\n\n              case \"TaggedTemplateExpression\":\n                object = object.tag;\n                break;\n\n              case \"TSNonNullExpression\":\n                object = object.expression;\n                break;\n\n              default:\n                return false;\n            }\n          }\n        }\n\n        return false;\n\n      case \"BindExpression\":\n        return (parent.type === \"BindExpression\" || parent.type === \"NewExpression\") && name === \"callee\" || (parent.type === \"MemberExpression\" || parent.type === \"OptionalMemberExpression\") && name === \"object\";\n\n      case \"NGPipeExpression\":\n        if (parent.type === \"NGRoot\" || parent.type === \"NGMicrosyntaxExpression\" || parent.type === \"ObjectProperty\" || parent.type === \"ArrayExpression\" || (parent.type === \"CallExpression\" || parent.type === \"OptionalCallExpression\") && parent.arguments[name] === node || parent.type === \"NGPipeExpression\" && name === \"right\" || parent.type === \"MemberExpression\" && name === \"property\" || parent.type === \"AssignmentExpression\") {\n          return false;\n        }\n\n        return true;\n\n      case \"JSXFragment\":\n      case \"JSXElement\":\n        return name === \"callee\" || parent.type !== \"ArrayExpression\" && parent.type !== \"ArrowFunctionExpression\" && parent.type !== \"AssignmentExpression\" && parent.type !== \"AssignmentPattern\" && parent.type !== \"BinaryExpression\" && parent.type !== \"CallExpression\" && parent.type !== \"ConditionalExpression\" && parent.type !== \"ExpressionStatement\" && parent.type !== \"JsExpressionRoot\" && parent.type !== \"JSXAttribute\" && parent.type !== \"JSXElement\" && parent.type !== \"JSXExpressionContainer\" && parent.type !== \"JSXFragment\" && parent.type !== \"LogicalExpression\" && parent.type !== \"ObjectProperty\" && parent.type !== \"OptionalCallExpression\" && parent.type !== \"Property\" && parent.type !== \"ReturnStatement\" && parent.type !== \"TypeCastExpression\" && parent.type !== \"VariableDeclarator\";\n\n      case \"TypeAnnotation\":\n        return name === \"returnType\" && parent.type === \"ArrowFunctionExpression\" && includesFunctionTypeInObjectType(node);\n    }\n\n    return false;\n  }\n\n  function isStatement(node) {\n    return node.type === \"BlockStatement\" || node.type === \"BreakStatement\" || node.type === \"ClassBody\" || node.type === \"ClassDeclaration\" || node.type === \"ClassMethod\" || node.type === \"ClassProperty\" || node.type === \"ClassPrivateProperty\" || node.type === \"ContinueStatement\" || node.type === \"DebuggerStatement\" || node.type === \"DeclareClass\" || node.type === \"DeclareExportAllDeclaration\" || node.type === \"DeclareExportDeclaration\" || node.type === \"DeclareFunction\" || node.type === \"DeclareInterface\" || node.type === \"DeclareModule\" || node.type === \"DeclareModuleExports\" || node.type === \"DeclareVariable\" || node.type === \"DoWhileStatement\" || node.type === \"EnumDeclaration\" || node.type === \"ExportAllDeclaration\" || node.type === \"ExportDefaultDeclaration\" || node.type === \"ExportNamedDeclaration\" || node.type === \"ExpressionStatement\" || node.type === \"ForAwaitStatement\" || node.type === \"ForInStatement\" || node.type === \"ForOfStatement\" || node.type === \"ForStatement\" || node.type === \"FunctionDeclaration\" || node.type === \"IfStatement\" || node.type === \"ImportDeclaration\" || node.type === \"InterfaceDeclaration\" || node.type === \"LabeledStatement\" || node.type === \"MethodDefinition\" || node.type === \"ReturnStatement\" || node.type === \"SwitchStatement\" || node.type === \"ThrowStatement\" || node.type === \"TryStatement\" || node.type === \"TSDeclareFunction\" || node.type === \"TSEnumDeclaration\" || node.type === \"TSImportEqualsDeclaration\" || node.type === \"TSInterfaceDeclaration\" || node.type === \"TSModuleDeclaration\" || node.type === \"TSNamespaceExportDeclaration\" || node.type === \"TypeAlias\" || node.type === \"VariableDeclaration\" || node.type === \"WhileStatement\" || node.type === \"WithStatement\";\n  }\n\n  function includesFunctionTypeInObjectType(node) {\n    return hasNode$1(node, function (n1) {\n      return n1.type === \"ObjectTypeAnnotation\" && hasNode$1(n1, function (n2) {\n        return n2.type === \"FunctionTypeAnnotation\" || undefined;\n      }) || undefined;\n    });\n  }\n\n  function endsWithRightBracket(node) {\n    switch (node.type) {\n      case \"ObjectExpression\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  function isFollowedByRightBracket(path) {\n    var node = path.getValue();\n    var parent = path.getParentNode();\n    var name = path.getName();\n\n    switch (parent.type) {\n      case \"NGPipeExpression\":\n        if (typeof name === \"number\" && parent.arguments[name] === node && parent.arguments.length - 1 === name) {\n          return path.callParent(isFollowedByRightBracket);\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        if (name === \"value\") {\n          var parentParent = path.getParentNode(1);\n          return parentParent.properties[parentParent.properties.length - 1] === parent;\n        }\n\n        break;\n\n      case \"BinaryExpression\":\n      case \"LogicalExpression\":\n        if (name === \"right\") {\n          return path.callParent(isFollowedByRightBracket);\n        }\n\n        break;\n\n      case \"ConditionalExpression\":\n        if (name === \"alternate\") {\n          return path.callParent(isFollowedByRightBracket);\n        }\n\n        break;\n\n      case \"UnaryExpression\":\n        if (parent.prefix) {\n          return path.callParent(isFollowedByRightBracket);\n        }\n\n        break;\n    }\n\n    return false;\n  }\n\n  function shouldWrapFunctionForExportDefault(path, options) {\n    var node = path.getValue();\n    var parent = path.getParentNode();\n\n    if (node.type === \"FunctionExpression\" || node.type === \"ClassExpression\") {\n      return parent.type === \"ExportDefaultDeclaration\" || // in some cases the function is already wrapped\n      // (e.g. `export default (function() {})();`)\n      // in this case we don't need to add extra parens\n      !needsParens(path, options);\n    }\n\n    if (!hasNakedLeftSide$1(node) || parent.type !== \"ExportDefaultDeclaration\" && needsParens(path, options)) {\n      return false;\n    }\n\n    return path.call.apply(path, [function (childPath) {\n      return shouldWrapFunctionForExportDefault(childPath, options);\n    }].concat(getLeftSidePathName$1(path, node)));\n  }\n\n  var needsParens_1 = needsParens;\n\n  var _require$$0$builders$6 = doc.builders,\n      concat$c = _require$$0$builders$6.concat,\n      join$8 = _require$$0$builders$6.join,\n      line$6 = _require$$0$builders$6.line;\n\n  function printHtmlBinding(path, options, print) {\n    var node = path.getValue();\n\n    if (options.__onHtmlBindingRoot && path.getName() === null) {\n      options.__onHtmlBindingRoot(node);\n    }\n\n    if (node.type !== \"File\") {\n      return;\n    }\n\n    if (options.__isVueForBindingLeft) {\n      return path.call(function (functionDeclarationPath) {\n        var _functionDeclarationP = functionDeclarationPath.getValue(),\n            params = _functionDeclarationP.params;\n\n        return concat$c([params.length > 1 ? \"(\" : \"\", join$8(concat$c([\",\", line$6]), functionDeclarationPath.map(print, \"params\")), params.length > 1 ? \")\" : \"\"]);\n      }, \"program\", \"body\", 0);\n    }\n\n    if (options.__isVueSlotScope) {\n      return path.call(function (functionDeclarationPath) {\n        return join$8(concat$c([\",\", line$6]), functionDeclarationPath.map(print, \"params\"));\n      }, \"program\", \"body\", 0);\n    }\n  } // based on https://github.com/prettier/prettier/blob/master/src/language-html/syntax-vue.js isVueEventBindingExpression()\n\n\n  function isVueEventBindingExpression$2(node) {\n    switch (node.type) {\n      case \"MemberExpression\":\n        switch (node.property.type) {\n          case \"Identifier\":\n          case \"NumericLiteral\":\n          case \"StringLiteral\":\n            return isVueEventBindingExpression$2(node.object);\n        }\n\n        return false;\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  var htmlBinding = {\n    isVueEventBindingExpression: isVueEventBindingExpression$2,\n    printHtmlBinding: printHtmlBinding\n  };\n\n  function preprocess$1(ast, options) {\n    switch (options.parser) {\n      case \"json\":\n      case \"json5\":\n      case \"json-stringify\":\n      case \"__js_expression\":\n      case \"__vue_expression\":\n        return Object.assign({}, ast, {\n          type: options.parser.startsWith(\"__\") ? \"JsExpressionRoot\" : \"JsonRoot\",\n          node: ast,\n          comments: []\n        });\n\n      default:\n        return ast;\n    }\n  }\n\n  var preprocess_1$1 = preprocess$1;\n\n  var getParentExportDeclaration$1 = util.getParentExportDeclaration,\n      isExportDeclaration$1 = util.isExportDeclaration,\n      shouldFlatten$1 = util.shouldFlatten,\n      getNextNonSpaceNonCommentCharacter$1 = util.getNextNonSpaceNonCommentCharacter,\n      hasNewline$4 = util.hasNewline,\n      hasNewlineInRange$2 = util.hasNewlineInRange,\n      getLast$2 = util.getLast,\n      getStringWidth$2 = util.getStringWidth,\n      printString$2 = util.printString,\n      printNumber$2 = util.printNumber,\n      hasIgnoreComment$4 = util.hasIgnoreComment,\n      hasNodeIgnoreComment$2 = util.hasNodeIgnoreComment,\n      getPenultimate$1 = util.getPenultimate,\n      startsWithNoLookaheadToken$1 = util.startsWithNoLookaheadToken,\n      getIndentSize$1 = util.getIndentSize,\n      matchAncestorTypes$1 = util.matchAncestorTypes,\n      getPreferredQuote$1 = util.getPreferredQuote;\n  var isNextLineEmpty$4 = utilShared.isNextLineEmpty,\n      isNextLineEmptyAfterIndex$1 = utilShared.isNextLineEmptyAfterIndex,\n      getNextNonSpaceNonCommentCharacterIndex$2 = utilShared.getNextNonSpaceNonCommentCharacterIndex;\n  var insertPragma$7 = pragma.insertPragma;\n  var printHtmlBinding$1 = htmlBinding.printHtmlBinding,\n      isVueEventBindingExpression$3 = htmlBinding.isVueEventBindingExpression;\n  var classChildNeedsASIProtection$1 = utils$4.classChildNeedsASIProtection,\n      classPropMayCauseASIProblems$1 = utils$4.classPropMayCauseASIProblems,\n      conditionalExpressionChainContainsJSX$1 = utils$4.conditionalExpressionChainContainsJSX,\n      getFlowVariance$1 = utils$4.getFlowVariance,\n      getLeftSidePathName$2 = utils$4.getLeftSidePathName,\n      getTypeScriptMappedTypeModifier$1 = utils$4.getTypeScriptMappedTypeModifier,\n      hasDanglingComments$1 = utils$4.hasDanglingComments,\n      hasFlowAnnotationComment$1 = utils$4.hasFlowAnnotationComment,\n      hasFlowShorthandAnnotationComment$2 = utils$4.hasFlowShorthandAnnotationComment,\n      hasLeadingComment$3 = utils$4.hasLeadingComment,\n      hasLeadingOwnLineComment$1 = utils$4.hasLeadingOwnLineComment,\n      hasNakedLeftSide$2 = utils$4.hasNakedLeftSide,\n      hasNewlineBetweenOrAfterDecorators$1 = utils$4.hasNewlineBetweenOrAfterDecorators,\n      hasNgSideEffect$1 = utils$4.hasNgSideEffect,\n      hasPrettierIgnore$3 = utils$4.hasPrettierIgnore,\n      hasTrailingComment$1 = utils$4.hasTrailingComment,\n      identity$2 = utils$4.identity,\n      isBinaryish$1 = utils$4.isBinaryish,\n      isCallOrOptionalCallExpression$1 = utils$4.isCallOrOptionalCallExpression,\n      isEmptyJSXElement$1 = utils$4.isEmptyJSXElement,\n      isFlowAnnotationComment$1 = utils$4.isFlowAnnotationComment,\n      isFunctionCompositionArgs$1 = utils$4.isFunctionCompositionArgs,\n      isFunctionNotation$1 = utils$4.isFunctionNotation,\n      isFunctionOrArrowExpression$1 = utils$4.isFunctionOrArrowExpression,\n      isGetterOrSetter$1 = utils$4.isGetterOrSetter,\n      isJestEachTemplateLiteral$1 = utils$4.isJestEachTemplateLiteral,\n      isJSXNode$1 = utils$4.isJSXNode,\n      isJSXWhitespaceExpression$1 = utils$4.isJSXWhitespaceExpression,\n      isLastStatement$1 = utils$4.isLastStatement,\n      isLiteral$1 = utils$4.isLiteral,\n      isLongCurriedCallExpression$1 = utils$4.isLongCurriedCallExpression,\n      isMeaningfulJSXText$1 = utils$4.isMeaningfulJSXText,\n      isMemberExpressionChain$1 = utils$4.isMemberExpressionChain,\n      isMemberish$1 = utils$4.isMemberish,\n      isNgForOf$1 = utils$4.isNgForOf,\n      isNumericLiteral$1 = utils$4.isNumericLiteral,\n      isObjectType$1 = utils$4.isObjectType,\n      isObjectTypePropertyAFunction$1 = utils$4.isObjectTypePropertyAFunction,\n      isSimpleFlowType$1 = utils$4.isSimpleFlowType,\n      isSimpleTemplateLiteral$1 = utils$4.isSimpleTemplateLiteral,\n      isStringLiteral$1 = utils$4.isStringLiteral,\n      isStringPropSafeToCoerceToIdentifier$1 = utils$4.isStringPropSafeToCoerceToIdentifier,\n      isTemplateOnItsOwnLine$1 = utils$4.isTemplateOnItsOwnLine,\n      isTestCall$1 = utils$4.isTestCall,\n      isTheOnlyJSXElementInMarkdown$1 = utils$4.isTheOnlyJSXElementInMarkdown,\n      isTSXFile$1 = utils$4.isTSXFile,\n      isTypeAnnotationAFunction$1 = utils$4.isTypeAnnotationAFunction,\n      matchJsxWhitespaceRegex$1 = utils$4.matchJsxWhitespaceRegex,\n      needsHardlineAfterDanglingComment$1 = utils$4.needsHardlineAfterDanglingComment,\n      rawText$1 = utils$4.rawText,\n      returnArgumentHasLeadingComment$1 = utils$4.returnArgumentHasLeadingComment;\n  var needsQuoteProps = new WeakMap();\n  var _require$$5$builders = doc.builders,\n      concat$d = _require$$5$builders.concat,\n      join$9 = _require$$5$builders.join,\n      line$7 = _require$$5$builders.line,\n      hardline$9 = _require$$5$builders.hardline,\n      softline$6 = _require$$5$builders.softline,\n      literalline$4 = _require$$5$builders.literalline,\n      group$b = _require$$5$builders.group,\n      indent$7 = _require$$5$builders.indent,\n      align$1 = _require$$5$builders.align,\n      conditionalGroup$1 = _require$$5$builders.conditionalGroup,\n      fill$4 = _require$$5$builders.fill,\n      ifBreak$6 = _require$$5$builders.ifBreak,\n      breakParent$3 = _require$$5$builders.breakParent,\n      lineSuffixBoundary$1 = _require$$5$builders.lineSuffixBoundary,\n      addAlignmentToDoc$2 = _require$$5$builders.addAlignmentToDoc,\n      dedent$2 = _require$$5$builders.dedent,\n      _require$$5$utils = doc.utils,\n      willBreak$1 = _require$$5$utils.willBreak,\n      isLineNext$1 = _require$$5$utils.isLineNext,\n      isEmpty$1 = _require$$5$utils.isEmpty,\n      removeLines$2 = _require$$5$utils.removeLines,\n      printDocToString$1 = doc.printer.printDocToString;\n  var uid = 0;\n\n  function shouldPrintComma$1(options, level) {\n    level = level || \"es5\";\n\n    switch (options.trailingComma) {\n      case \"all\":\n        if (level === \"all\") {\n          return true;\n        }\n\n      // fallthrough\n\n      case \"es5\":\n        if (level === \"es5\") {\n          return true;\n        }\n\n      // fallthrough\n\n      case \"none\":\n      default:\n        return false;\n    }\n  }\n\n  function genericPrint$3(path, options, printPath, args) {\n    var node = path.getValue();\n    var needsParens = false;\n    var linesWithoutParens = printPathNoParens(path, options, printPath, args);\n\n    if (!node || isEmpty$1(linesWithoutParens)) {\n      return linesWithoutParens;\n    }\n\n    var parentExportDecl = getParentExportDeclaration$1(path);\n    var decorators = [];\n\n    if (node.type === \"ClassMethod\" || node.type === \"ClassPrivateMethod\" || node.type === \"ClassProperty\" || node.type === \"TSAbstractClassProperty\" || node.type === \"ClassPrivateProperty\" || node.type === \"MethodDefinition\" || node.type === \"TSAbstractMethodDefinition\") ; else if (node.decorators && node.decorators.length > 0 && // If the parent node is an export declaration and the decorator\n    // was written before the export, the export will be responsible\n    // for printing the decorators.\n    !(parentExportDecl && options.locStart(parentExportDecl, {\n      ignoreDecorators: true\n    }) > options.locStart(node.decorators[0]))) {\n      var shouldBreak = node.type === \"ClassExpression\" || node.type === \"ClassDeclaration\" || hasNewlineBetweenOrAfterDecorators$1(node, options);\n      var separator = shouldBreak ? hardline$9 : line$7;\n      path.each(function (decoratorPath) {\n        var decorator = decoratorPath.getValue();\n\n        if (decorator.expression) {\n          decorator = decorator.expression;\n        } else {\n          decorator = decorator.callee;\n        }\n\n        decorators.push(printPath(decoratorPath), separator);\n      }, \"decorators\");\n\n      if (parentExportDecl) {\n        decorators.unshift(hardline$9);\n      }\n    } else if (isExportDeclaration$1(node) && node.declaration && node.declaration.decorators && node.declaration.decorators.length > 0 && // Only print decorators here if they were written before the export,\n    // otherwise they are printed by the node.declaration\n    options.locStart(node, {\n      ignoreDecorators: true\n    }) > options.locStart(node.declaration.decorators[0])) {\n      // Export declarations are responsible for printing any decorators\n      // that logically apply to node.declaration.\n      path.each(function (decoratorPath) {\n        var decorator = decoratorPath.getValue();\n        var prefix = decorator.type === \"Decorator\" ? \"\" : \"@\";\n        decorators.push(prefix, printPath(decoratorPath), hardline$9);\n      }, \"declaration\", \"decorators\");\n    } else {\n      // Nodes with decorators can't have parentheses, so we can avoid\n      // computing pathNeedsParens() except in this case.\n      needsParens = needsParens_1(path, options);\n    }\n\n    var parts = [];\n\n    if (needsParens) {\n      parts.unshift(\"(\");\n    }\n\n    parts.push(linesWithoutParens);\n\n    if (needsParens) {\n      var _node = path.getValue();\n\n      if (hasFlowShorthandAnnotationComment$2(_node)) {\n        parts.push(\" /*\");\n        parts.push(_node.trailingComments[0].value.trimLeft());\n        parts.push(\"*/\");\n        _node.trailingComments[0].printed = true;\n      }\n\n      parts.push(\")\");\n    }\n\n    if (decorators.length > 0) {\n      return group$b(concat$d(decorators.concat(parts)));\n    }\n\n    return concat$d(parts);\n  }\n\n  function printDecorators(path, options, print) {\n    var node = path.getValue();\n    return group$b(concat$d([join$9(line$7, path.map(print, \"decorators\")), hasNewlineBetweenOrAfterDecorators$1(node, options) ? hardline$9 : line$7]));\n  }\n  /**\n   * The following is the shared logic for\n   * ternary operators, namely ConditionalExpression\n   * and TSConditionalType\n   * @typedef {Object} OperatorOptions\n   * @property {() => Array<string | Doc>} beforeParts - Parts to print before the `?`.\n   * @property {(breakClosingParen: boolean) => Array<string | Doc>} afterParts - Parts to print after the conditional expression.\n   * @property {boolean} shouldCheckJsx - Whether to check for and print in JSX mode.\n   * @property {string} conditionalNodeType - The type of the conditional expression node, ie \"ConditionalExpression\" or \"TSConditionalType\".\n   * @property {string} consequentNodePropertyName - The property at which the consequent node can be found on the main node, eg \"consequent\".\n   * @property {string} alternateNodePropertyName - The property at which the alternate node can be found on the main node, eg \"alternate\".\n   * @property {string} testNodePropertyName - The property at which the test node can be found on the main node, eg \"test\".\n   * @property {boolean} breakNested - Whether to break all nested ternaries when one breaks.\n   * @param {FastPath} path - The path to the ConditionalExpression/TSConditionalType node.\n   * @param {Options} options - Prettier options\n   * @param {Function} print - Print function to call recursively\n   * @param {OperatorOptions} operatorOptions\n   * @returns Doc\n   */\n\n\n  function printTernaryOperator(path, options, print, operatorOptions) {\n    var node = path.getValue();\n    var testNode = node[operatorOptions.testNodePropertyName];\n    var consequentNode = node[operatorOptions.consequentNodePropertyName];\n    var alternateNode = node[operatorOptions.alternateNodePropertyName];\n    var parts = []; // We print a ConditionalExpression in either \"JSX mode\" or \"normal mode\".\n    // See tests/jsx/conditional-expression.js for more info.\n\n    var jsxMode = false;\n    var parent = path.getParentNode();\n    var forceNoIndent = parent.type === operatorOptions.conditionalNodeType; // Find the outermost non-ConditionalExpression parent, and the outermost\n    // ConditionalExpression parent. We'll use these to determine if we should\n    // print in JSX mode.\n\n    var currentParent;\n    var previousParent;\n    var i = 0;\n\n    do {\n      previousParent = currentParent || node;\n      currentParent = path.getParentNode(i);\n      i++;\n    } while (currentParent && currentParent.type === operatorOptions.conditionalNodeType);\n\n    var firstNonConditionalParent = currentParent || parent;\n    var lastConditionalParent = previousParent;\n\n    if (operatorOptions.shouldCheckJsx && (isJSXNode$1(testNode) || isJSXNode$1(consequentNode) || isJSXNode$1(alternateNode) || conditionalExpressionChainContainsJSX$1(lastConditionalParent))) {\n      jsxMode = true;\n      forceNoIndent = true; // Even though they don't need parens, we wrap (almost) everything in\n      // parens when using ?: within JSX, because the parens are analogous to\n      // curly braces in an if statement.\n\n      var wrap = function wrap(doc) {\n        return concat$d([ifBreak$6(\"(\", \"\"), indent$7(concat$d([softline$6, doc])), softline$6, ifBreak$6(\")\", \"\")]);\n      }; // The only things we don't wrap are:\n      // * Nested conditional expressions in alternates\n      // * null\n\n\n      var isNull = function isNull(node) {\n        return node.type === \"NullLiteral\" || node.type === \"Literal\" && node.value === null;\n      };\n\n      parts.push(\" ? \", isNull(consequentNode) ? path.call(print, operatorOptions.consequentNodePropertyName) : wrap(path.call(print, operatorOptions.consequentNodePropertyName)), \" : \", alternateNode.type === operatorOptions.conditionalNodeType || isNull(alternateNode) ? path.call(print, operatorOptions.alternateNodePropertyName) : wrap(path.call(print, operatorOptions.alternateNodePropertyName)));\n    } else {\n      // normal mode\n      var part = concat$d([line$7, \"? \", consequentNode.type === operatorOptions.conditionalNodeType ? ifBreak$6(\"\", \"(\") : \"\", align$1(2, path.call(print, operatorOptions.consequentNodePropertyName)), consequentNode.type === operatorOptions.conditionalNodeType ? ifBreak$6(\"\", \")\") : \"\", line$7, \": \", alternateNode.type === operatorOptions.conditionalNodeType ? path.call(print, operatorOptions.alternateNodePropertyName) : align$1(2, path.call(print, operatorOptions.alternateNodePropertyName))]);\n      parts.push(parent.type !== operatorOptions.conditionalNodeType || parent[operatorOptions.alternateNodePropertyName] === node ? part : options.useTabs ? dedent$2(indent$7(part)) : align$1(Math.max(0, options.tabWidth - 2), part));\n    } // We want a whole chain of ConditionalExpressions to all\n    // break if any of them break. That means we should only group around the\n    // outer-most ConditionalExpression.\n\n\n    var maybeGroup = function maybeGroup(doc) {\n      return operatorOptions.breakNested ? parent === firstNonConditionalParent ? group$b(doc) : doc : group$b(doc);\n    }; // Break the closing paren to keep the chain right after it:\n    // (a\n    //   ? b\n    //   : c\n    // ).call()\n\n\n    var breakClosingParen = !jsxMode && (parent.type === \"MemberExpression\" || parent.type === \"OptionalMemberExpression\" || parent.type === \"NGPipeExpression\" && parent.left === node && operatorOptions.breakNested) && !parent.computed;\n    return maybeGroup(concat$d([].concat(function (testDoc) {\n      return (\n        /**\n         *     a\n         *       ? b\n         *       : multiline\n         *         test\n         *         node\n         *       ^^ align(2)\n         *       ? d\n         *       : e\n         */\n        parent.type === operatorOptions.conditionalNodeType && parent[operatorOptions.alternateNodePropertyName] === node ? align$1(2, testDoc) : testDoc\n      );\n    }(concat$d(operatorOptions.beforeParts())), forceNoIndent ? concat$d(parts) : indent$7(concat$d(parts)), operatorOptions.afterParts(breakClosingParen))));\n  }\n\n  function printPathNoParens(path, options, print, args) {\n    var n = path.getValue();\n    var semi = options.semi ? \";\" : \"\";\n\n    if (!n) {\n      return \"\";\n    }\n\n    if (typeof n === \"string\") {\n      return n;\n    }\n\n    var htmlBinding = printHtmlBinding$1(path, options, print);\n\n    if (htmlBinding) {\n      return htmlBinding;\n    }\n\n    var parts = [];\n\n    switch (n.type) {\n      case \"JsExpressionRoot\":\n        return path.call(print, \"node\");\n\n      case \"JsonRoot\":\n        return concat$d([path.call(print, \"node\"), hardline$9]);\n\n      case \"File\":\n        // Print @babel/parser's InterpreterDirective here so that\n        // leading comments on the `Program` node get printed after the hashbang.\n        if (n.program && n.program.interpreter) {\n          parts.push(path.call(function (programPath) {\n            return programPath.call(print, \"interpreter\");\n          }, \"program\"));\n        }\n\n        parts.push(path.call(print, \"program\"));\n        return concat$d(parts);\n\n      case \"Program\":\n        // Babel 6\n        if (n.directives) {\n          path.each(function (childPath) {\n            parts.push(print(childPath), semi, hardline$9);\n\n            if (isNextLineEmpty$4(options.originalText, childPath.getValue(), options)) {\n              parts.push(hardline$9);\n            }\n          }, \"directives\");\n        }\n\n        parts.push(path.call(function (bodyPath) {\n          return printStatementSequence(bodyPath, options, print);\n        }, \"body\"));\n        parts.push(comments.printDanglingComments(path, options,\n        /* sameIndent */\n        true)); // Only force a trailing newline if there were any contents.\n\n        if (n.body.length || n.comments) {\n          parts.push(hardline$9);\n        }\n\n        return concat$d(parts);\n      // Babel extension.\n\n      case \"EmptyStatement\":\n        return \"\";\n\n      case \"ExpressionStatement\":\n        // Detect Flow-parsed directives\n        if (n.directive) {\n          return concat$d([nodeStr(n.expression, options, true), semi]);\n        }\n\n        if (options.parser === \"__vue_event_binding\") {\n          var parent = path.getParentNode();\n\n          if (parent.type === \"Program\" && parent.body.length === 1 && parent.body[0] === n) {\n            return concat$d([path.call(print, \"expression\"), isVueEventBindingExpression$3(n.expression) ? \";\" : \"\"]);\n          }\n        } // Do not append semicolon after the only JSX element in a program\n\n\n        return concat$d([path.call(print, \"expression\"), isTheOnlyJSXElementInMarkdown$1(options, path) ? \"\" : semi]);\n      // Babel extension.\n\n      case \"ParenthesizedExpression\":\n        return concat$d([\"(\", path.call(print, \"expression\"), \")\"]);\n\n      case \"AssignmentExpression\":\n        return printAssignment(n.left, path.call(print, \"left\"), concat$d([\" \", n.operator]), n.right, path.call(print, \"right\"), options);\n\n      case \"BinaryExpression\":\n      case \"LogicalExpression\":\n      case \"NGPipeExpression\":\n        {\n          var _parent = path.getParentNode();\n\n          var parentParent = path.getParentNode(1);\n          var isInsideParenthesis = n !== _parent.body && (_parent.type === \"IfStatement\" || _parent.type === \"WhileStatement\" || _parent.type === \"SwitchStatement\" || _parent.type === \"DoWhileStatement\");\n\n          var _parts = printBinaryishExpressions(path, print, options,\n          /* isNested */\n          false, isInsideParenthesis); //   if (\n          //     this.hasPlugin(\"dynamicImports\") && this.lookahead().type === tt.parenLeft\n          //   ) {\n          //\n          // looks super weird, we want to break the children if the parent breaks\n          //\n          //   if (\n          //     this.hasPlugin(\"dynamicImports\") &&\n          //     this.lookahead().type === tt.parenLeft\n          //   ) {\n\n\n          if (isInsideParenthesis) {\n            return concat$d(_parts);\n          } // Break between the parens in\n          // unaries or in a member or specific call expression, i.e.\n          //\n          //   (\n          //     a &&\n          //     b &&\n          //     c\n          //   ).call()\n\n\n          if ((_parent.type === \"CallExpression\" || _parent.type === \"OptionalCallExpression\") && _parent.callee === n || _parent.type === \"UnaryExpression\" || (_parent.type === \"MemberExpression\" || _parent.type === \"OptionalMemberExpression\") && !_parent.computed) {\n            return group$b(concat$d([indent$7(concat$d([softline$6, concat$d(_parts)])), softline$6]));\n          } // Avoid indenting sub-expressions in some cases where the first sub-expression is already\n          // indented accordingly. We should indent sub-expressions where the first case isn't indented.\n\n\n          var shouldNotIndent = _parent.type === \"ReturnStatement\" || _parent.type === \"JSXExpressionContainer\" && parentParent.type === \"JSXAttribute\" || n.type !== \"NGPipeExpression\" && (_parent.type === \"NGRoot\" && options.parser === \"__ng_binding\" || _parent.type === \"NGMicrosyntaxExpression\" && parentParent.type === \"NGMicrosyntax\" && parentParent.body.length === 1) || n === _parent.body && _parent.type === \"ArrowFunctionExpression\" || n !== _parent.body && _parent.type === \"ForStatement\" || _parent.type === \"ConditionalExpression\" && parentParent.type !== \"ReturnStatement\" && parentParent.type !== \"CallExpression\" && parentParent.type !== \"OptionalCallExpression\";\n          var shouldIndentIfInlining = _parent.type === \"AssignmentExpression\" || _parent.type === \"VariableDeclarator\" || _parent.type === \"ClassProperty\" || _parent.type === \"TSAbstractClassProperty\" || _parent.type === \"ClassPrivateProperty\" || _parent.type === \"ObjectProperty\" || _parent.type === \"Property\";\n          var samePrecedenceSubExpression = isBinaryish$1(n.left) && shouldFlatten$1(n.operator, n.left.operator);\n\n          if (shouldNotIndent || shouldInlineLogicalExpression(n) && !samePrecedenceSubExpression || !shouldInlineLogicalExpression(n) && shouldIndentIfInlining) {\n            return group$b(concat$d(_parts));\n          }\n\n          if (_parts.length === 0) {\n            return \"\";\n          } // If the right part is a JSX node, we include it in a separate group to\n          // prevent it breaking the whole chain, so we can print the expression like:\n          //\n          //   foo && bar && (\n          //     <Foo>\n          //       <Bar />\n          //     </Foo>\n          //   )\n\n\n          var hasJSX = isJSXNode$1(n.right);\n          var rest = concat$d(hasJSX ? _parts.slice(1, -1) : _parts.slice(1));\n          var groupId = Symbol(\"logicalChain-\" + ++uid);\n          var chain = group$b(concat$d([// Don't include the initial expression in the indentation\n          // level. The first item is guaranteed to be the first\n          // left-most expression.\n          _parts.length > 0 ? _parts[0] : \"\", indent$7(rest)]), {\n            id: groupId\n          });\n\n          if (!hasJSX) {\n            return chain;\n          }\n\n          var jsxPart = getLast$2(_parts);\n          return group$b(concat$d([chain, ifBreak$6(indent$7(jsxPart), jsxPart, {\n            groupId: groupId\n          })]));\n        }\n\n      case \"AssignmentPattern\":\n        return concat$d([path.call(print, \"left\"), \" = \", path.call(print, \"right\")]);\n\n      case \"TSTypeAssertion\":\n        {\n          var shouldBreakAfterCast = !(n.expression.type === \"ArrayExpression\" || n.expression.type === \"ObjectExpression\");\n          var castGroup = group$b(concat$d([\"<\", indent$7(concat$d([softline$6, path.call(print, \"typeAnnotation\")])), softline$6, \">\"]));\n          var exprContents = concat$d([ifBreak$6(\"(\"), indent$7(concat$d([softline$6, path.call(print, \"expression\")])), softline$6, ifBreak$6(\")\")]);\n\n          if (shouldBreakAfterCast) {\n            return conditionalGroup$1([concat$d([castGroup, path.call(print, \"expression\")]), concat$d([castGroup, group$b(exprContents, {\n              shouldBreak: true\n            })]), concat$d([castGroup, path.call(print, \"expression\")])]);\n          }\n\n          return group$b(concat$d([castGroup, path.call(print, \"expression\")]));\n        }\n\n      case \"OptionalMemberExpression\":\n      case \"MemberExpression\":\n        {\n          var _parent2 = path.getParentNode();\n\n          var firstNonMemberParent;\n          var i = 0;\n\n          do {\n            firstNonMemberParent = path.getParentNode(i);\n            i++;\n          } while (firstNonMemberParent && (firstNonMemberParent.type === \"MemberExpression\" || firstNonMemberParent.type === \"OptionalMemberExpression\" || firstNonMemberParent.type === \"TSNonNullExpression\"));\n\n          var shouldInline = firstNonMemberParent && (firstNonMemberParent.type === \"NewExpression\" || firstNonMemberParent.type === \"BindExpression\" || firstNonMemberParent.type === \"VariableDeclarator\" && firstNonMemberParent.id.type !== \"Identifier\" || firstNonMemberParent.type === \"AssignmentExpression\" && firstNonMemberParent.left.type !== \"Identifier\") || n.computed || n.object.type === \"Identifier\" && n.property.type === \"Identifier\" && _parent2.type !== \"MemberExpression\" && _parent2.type !== \"OptionalMemberExpression\";\n          return concat$d([path.call(print, \"object\"), shouldInline ? printMemberLookup(path, options, print) : group$b(indent$7(concat$d([softline$6, printMemberLookup(path, options, print)])))]);\n        }\n\n      case \"MetaProperty\":\n        return concat$d([path.call(print, \"meta\"), \".\", path.call(print, \"property\")]);\n\n      case \"BindExpression\":\n        if (n.object) {\n          parts.push(path.call(print, \"object\"));\n        }\n\n        parts.push(group$b(indent$7(concat$d([softline$6, printBindExpressionCallee(path, options, print)]))));\n        return concat$d(parts);\n\n      case \"Identifier\":\n        {\n          return concat$d([n.name, printOptionalToken(path), printTypeAnnotation(path, options, print)]);\n        }\n\n      case \"V8IntrinsicIdentifier\":\n        return concat$d([\"%\", n.name]);\n\n      case \"SpreadElement\":\n      case \"SpreadElementPattern\":\n      case \"RestProperty\":\n      case \"SpreadProperty\":\n      case \"SpreadPropertyPattern\":\n      case \"RestElement\":\n      case \"ObjectTypeSpreadProperty\":\n        return concat$d([\"...\", path.call(print, \"argument\"), printTypeAnnotation(path, options, print)]);\n\n      case \"FunctionDeclaration\":\n      case \"FunctionExpression\":\n        parts.push(printFunctionDeclaration(path, print, options));\n\n        if (!n.body) {\n          parts.push(semi);\n        }\n\n        return concat$d(parts);\n\n      case \"ArrowFunctionExpression\":\n        {\n          if (n.async) {\n            parts.push(\"async \");\n          }\n\n          if (shouldPrintParamsWithoutParens(path, options)) {\n            parts.push(path.call(print, \"params\", 0));\n          } else {\n            parts.push(group$b(concat$d([printFunctionParams(path, print, options,\n            /* expandLast */\n            args && (args.expandLastArg || args.expandFirstArg),\n            /* printTypeParams */\n            true), printReturnType(path, print, options)])));\n          }\n\n          var dangling = comments.printDanglingComments(path, options,\n          /* sameIndent */\n          true, function (comment) {\n            var nextCharacter = getNextNonSpaceNonCommentCharacterIndex$2(options.originalText, comment, options);\n            return options.originalText.substr(nextCharacter, 2) === \"=>\";\n          });\n\n          if (dangling) {\n            parts.push(\" \", dangling);\n          }\n\n          parts.push(\" =>\");\n          var body = path.call(function (bodyPath) {\n            return print(bodyPath, args);\n          }, \"body\"); // We want to always keep these types of nodes on the same line\n          // as the arrow.\n\n          if (!hasLeadingOwnLineComment$1(options.originalText, n.body, options) && (n.body.type === \"ArrayExpression\" || n.body.type === \"ObjectExpression\" || n.body.type === \"BlockStatement\" || isJSXNode$1(n.body) || isTemplateOnItsOwnLine$1(n.body, options.originalText, options) || n.body.type === \"ArrowFunctionExpression\" || n.body.type === \"DoExpression\")) {\n            return group$b(concat$d([concat$d(parts), \" \", body]));\n          } // We handle sequence expressions as the body of arrows specially,\n          // so that the required parentheses end up on their own lines.\n\n\n          if (n.body.type === \"SequenceExpression\") {\n            return group$b(concat$d([concat$d(parts), group$b(concat$d([\" (\", indent$7(concat$d([softline$6, body])), softline$6, \")\"]))]));\n          } // if the arrow function is expanded as last argument, we are adding a\n          // level of indentation and need to add a softline to align the closing )\n          // with the opening (, or if it's inside a JSXExpression (e.g. an attribute)\n          // we should align the expression's closing } with the line with the opening {.\n\n\n          var shouldAddSoftLine = (args && args.expandLastArg || path.getParentNode().type === \"JSXExpressionContainer\") && !(n.comments && n.comments.length);\n          var printTrailingComma = args && args.expandLastArg && shouldPrintComma$1(options, \"all\"); // In order to avoid confusion between\n          // a => a ? a : a\n          // a <= a ? a : a\n\n          var shouldAddParens = n.body.type === \"ConditionalExpression\" && !startsWithNoLookaheadToken$1(n.body,\n          /* forbidFunctionAndClass */\n          false);\n          return group$b(concat$d([concat$d(parts), group$b(concat$d([indent$7(concat$d([line$7, shouldAddParens ? ifBreak$6(\"\", \"(\") : \"\", body, shouldAddParens ? ifBreak$6(\"\", \")\") : \"\"])), shouldAddSoftLine ? concat$d([ifBreak$6(printTrailingComma ? \",\" : \"\"), softline$6]) : \"\"]))]));\n        }\n\n      case \"YieldExpression\":\n        parts.push(\"yield\");\n\n        if (n.delegate) {\n          parts.push(\"*\");\n        }\n\n        if (n.argument) {\n          parts.push(\" \", path.call(print, \"argument\"));\n        }\n\n        return concat$d(parts);\n\n      case \"AwaitExpression\":\n        {\n          parts.push(\"await \", path.call(print, \"argument\"));\n\n          var _parent3 = path.getParentNode();\n\n          if ((_parent3.type === \"CallExpression\" || _parent3.type === \"OptionalCallExpression\") && _parent3.callee === n || (_parent3.type === \"MemberExpression\" || _parent3.type === \"OptionalMemberExpression\") && _parent3.object === n) {\n            return group$b(concat$d([indent$7(concat$d([softline$6, concat$d(parts)])), softline$6]));\n          }\n\n          return concat$d(parts);\n        }\n\n      case \"ImportSpecifier\":\n        if (n.importKind) {\n          parts.push(path.call(print, \"importKind\"), \" \");\n        }\n\n        parts.push(path.call(print, \"imported\"));\n\n        if (n.local && n.local.name !== n.imported.name) {\n          parts.push(\" as \", path.call(print, \"local\"));\n        }\n\n        return concat$d(parts);\n\n      case \"ExportSpecifier\":\n        parts.push(path.call(print, \"local\"));\n\n        if (n.exported && n.exported.name !== n.local.name) {\n          parts.push(\" as \", path.call(print, \"exported\"));\n        }\n\n        return concat$d(parts);\n\n      case \"ImportNamespaceSpecifier\":\n        parts.push(\"* as \");\n        parts.push(path.call(print, \"local\"));\n        return concat$d(parts);\n\n      case \"ImportDefaultSpecifier\":\n        return path.call(print, \"local\");\n\n      case \"TSExportAssignment\":\n        return concat$d([\"export = \", path.call(print, \"expression\"), semi]);\n\n      case \"ExportDefaultDeclaration\":\n      case \"ExportNamedDeclaration\":\n        return printExportDeclaration(path, options, print);\n\n      case \"ExportAllDeclaration\":\n        parts.push(\"export \");\n\n        if (n.exportKind === \"type\") {\n          parts.push(\"type \");\n        }\n\n        parts.push(\"* from \", path.call(print, \"source\"), semi);\n        return concat$d(parts);\n\n      case \"ExportNamespaceSpecifier\":\n      case \"ExportDefaultSpecifier\":\n        return path.call(print, \"exported\");\n\n      case \"ImportDeclaration\":\n        {\n          parts.push(\"import \");\n\n          if (n.importKind && n.importKind !== \"value\") {\n            parts.push(n.importKind + \" \");\n          }\n\n          var standalones = [];\n          var grouped = [];\n\n          if (n.specifiers && n.specifiers.length > 0) {\n            path.each(function (specifierPath) {\n              var value = specifierPath.getValue();\n\n              if (value.type === \"ImportDefaultSpecifier\" || value.type === \"ImportNamespaceSpecifier\") {\n                standalones.push(print(specifierPath));\n              } else {\n                grouped.push(print(specifierPath));\n              }\n            }, \"specifiers\");\n\n            if (standalones.length > 0) {\n              parts.push(join$9(\", \", standalones));\n            }\n\n            if (standalones.length > 0 && grouped.length > 0) {\n              parts.push(\", \");\n            }\n\n            if (grouped.length === 1 && standalones.length === 0 && n.specifiers && !n.specifiers.some(function (node) {\n              return node.comments;\n            })) {\n              parts.push(concat$d([\"{\", options.bracketSpacing ? \" \" : \"\", concat$d(grouped), options.bracketSpacing ? \" \" : \"\", \"}\"]));\n            } else if (grouped.length >= 1) {\n              parts.push(group$b(concat$d([\"{\", indent$7(concat$d([options.bracketSpacing ? line$7 : softline$6, join$9(concat$d([\",\", line$7]), grouped)])), ifBreak$6(shouldPrintComma$1(options) ? \",\" : \"\"), options.bracketSpacing ? line$7 : softline$6, \"}\"])));\n            }\n\n            parts.push(\" from \");\n          } else if (n.importKind && n.importKind === \"type\" || // import {} from 'x'\n          /{\\s*}/.test(options.originalText.slice(options.locStart(n), options.locStart(n.source)))) {\n            parts.push(\"{} from \");\n          }\n\n          parts.push(path.call(print, \"source\"), semi);\n          return concat$d(parts);\n        }\n\n      case \"Import\":\n        return \"import\";\n\n      case \"TSModuleBlock\":\n      case \"BlockStatement\":\n        {\n          var naked = path.call(function (bodyPath) {\n            return printStatementSequence(bodyPath, options, print);\n          }, \"body\");\n          var hasContent = n.body.find(function (node) {\n            return node.type !== \"EmptyStatement\";\n          });\n          var hasDirectives = n.directives && n.directives.length > 0;\n\n          var _parent4 = path.getParentNode();\n\n          var _parentParent = path.getParentNode(1);\n\n          if (!hasContent && !hasDirectives && !hasDanglingComments$1(n) && (_parent4.type === \"ArrowFunctionExpression\" || _parent4.type === \"FunctionExpression\" || _parent4.type === \"FunctionDeclaration\" || _parent4.type === \"ObjectMethod\" || _parent4.type === \"ClassMethod\" || _parent4.type === \"ClassPrivateMethod\" || _parent4.type === \"ForStatement\" || _parent4.type === \"WhileStatement\" || _parent4.type === \"DoWhileStatement\" || _parent4.type === \"DoExpression\" || _parent4.type === \"CatchClause\" && !_parentParent.finalizer || _parent4.type === \"TSModuleDeclaration\")) {\n            return \"{}\";\n          }\n\n          parts.push(\"{\"); // Babel 6\n\n          if (hasDirectives) {\n            path.each(function (childPath) {\n              parts.push(indent$7(concat$d([hardline$9, print(childPath), semi])));\n\n              if (isNextLineEmpty$4(options.originalText, childPath.getValue(), options)) {\n                parts.push(hardline$9);\n              }\n            }, \"directives\");\n          }\n\n          if (hasContent) {\n            parts.push(indent$7(concat$d([hardline$9, naked])));\n          }\n\n          parts.push(comments.printDanglingComments(path, options));\n          parts.push(hardline$9, \"}\");\n          return concat$d(parts);\n        }\n\n      case \"ReturnStatement\":\n        parts.push(\"return\");\n\n        if (n.argument) {\n          if (returnArgumentHasLeadingComment$1(options, n.argument)) {\n            parts.push(concat$d([\" (\", indent$7(concat$d([hardline$9, path.call(print, \"argument\")])), hardline$9, \")\"]));\n          } else if (n.argument.type === \"LogicalExpression\" || n.argument.type === \"BinaryExpression\" || n.argument.type === \"SequenceExpression\") {\n            parts.push(group$b(concat$d([ifBreak$6(\" (\", \" \"), indent$7(concat$d([softline$6, path.call(print, \"argument\")])), softline$6, ifBreak$6(\")\")])));\n          } else {\n            parts.push(\" \", path.call(print, \"argument\"));\n          }\n        }\n\n        if (hasDanglingComments$1(n)) {\n          parts.push(\" \", comments.printDanglingComments(path, options,\n          /* sameIndent */\n          true));\n        }\n\n        parts.push(semi);\n        return concat$d(parts);\n\n      case \"NewExpression\":\n      case \"OptionalCallExpression\":\n      case \"CallExpression\":\n        {\n          var isNew = n.type === \"NewExpression\";\n          var optional = printOptionalToken(path);\n\n          if ( // We want to keep CommonJS- and AMD-style require calls, and AMD-style\n          // define calls, as a unit.\n          // e.g. `define([\"some/lib\", (lib) => {`\n          !isNew && n.callee.type === \"Identifier\" && (n.callee.name === \"require\" || n.callee.name === \"define\") || // Template literals as single arguments\n          n.arguments.length === 1 && isTemplateOnItsOwnLine$1(n.arguments[0], options.originalText, options) || // Keep test declarations on a single line\n          // e.g. `it('long name', () => {`\n          !isNew && isTestCall$1(n, path.getParentNode())) {\n            return concat$d([isNew ? \"new \" : \"\", path.call(print, \"callee\"), optional, printFunctionTypeParameters(path, options, print), concat$d([\"(\", join$9(\", \", path.map(print, \"arguments\")), \")\"])]);\n          } // Inline Flow annotation comments following Identifiers in Call nodes need to\n          // stay with the Identifier. For example:\n          //\n          // foo /*:: <SomeGeneric> */(bar);\n          //\n          // Here, we ensure that such comments stay between the Identifier and the Callee.\n\n\n          var isIdentifierWithFlowAnnotation = n.callee.type === \"Identifier\" && hasFlowAnnotationComment$1(n.callee.trailingComments);\n\n          if (isIdentifierWithFlowAnnotation) {\n            n.callee.trailingComments[0].printed = true;\n          } // We detect calls on member lookups and possibly print them in a\n          // special chain format. See `printMemberChain` for more info.\n\n\n          if (!isNew && isMemberish$1(n.callee)) {\n            return printMemberChain(path, options, print);\n          }\n\n          var contents = concat$d([isNew ? \"new \" : \"\", path.call(print, \"callee\"), optional, isIdentifierWithFlowAnnotation ? \"/*:: \".concat(n.callee.trailingComments[0].value.substring(2).trim(), \" */\") : \"\", printFunctionTypeParameters(path, options, print), printArgumentsList(path, options, print)]); // We group here when the callee is itself a call expression.\n          // See `isLongCurriedCallExpression` for more info.\n\n          if (isCallOrOptionalCallExpression$1(n.callee)) {\n            return group$b(contents);\n          }\n\n          return contents;\n        }\n\n      case \"TSInterfaceDeclaration\":\n        if (n.declare) {\n          parts.push(\"declare \");\n        }\n\n        parts.push(n.abstract ? \"abstract \" : \"\", printTypeScriptModifiers(path, options, print), \"interface \", path.call(print, \"id\"), n.typeParameters ? path.call(print, \"typeParameters\") : \"\", \" \");\n\n        if (n.extends && n.extends.length) {\n          parts.push(group$b(indent$7(concat$d([softline$6, \"extends \", (n.extends.length === 1 ? identity$2 : indent$7)(join$9(concat$d([\",\", line$7]), path.map(print, \"extends\"))), \" \"]))));\n        }\n\n        parts.push(path.call(print, \"body\"));\n        return concat$d(parts);\n\n      case \"ObjectTypeInternalSlot\":\n        return concat$d([n.static ? \"static \" : \"\", \"[[\", path.call(print, \"id\"), \"]]\", printOptionalToken(path), n.method ? \"\" : \": \", path.call(print, \"value\")]);\n\n      case \"ObjectExpression\":\n      case \"ObjectPattern\":\n      case \"ObjectTypeAnnotation\":\n      case \"TSInterfaceBody\":\n      case \"TSTypeLiteral\":\n        {\n          var propertiesField;\n\n          if (n.type === \"TSTypeLiteral\") {\n            propertiesField = \"members\";\n          } else if (n.type === \"TSInterfaceBody\") {\n            propertiesField = \"body\";\n          } else {\n            propertiesField = \"properties\";\n          }\n\n          var isTypeAnnotation = n.type === \"ObjectTypeAnnotation\";\n          var fields = [];\n\n          if (isTypeAnnotation) {\n            fields.push(\"indexers\", \"callProperties\", \"internalSlots\");\n          }\n\n          fields.push(propertiesField);\n          var firstProperty = fields.map(function (field) {\n            return n[field][0];\n          }).sort(function (a, b) {\n            return options.locStart(a) - options.locStart(b);\n          })[0];\n\n          var _parent5 = path.getParentNode(0);\n\n          var isFlowInterfaceLikeBody = isTypeAnnotation && _parent5 && (_parent5.type === \"InterfaceDeclaration\" || _parent5.type === \"DeclareInterface\" || _parent5.type === \"DeclareClass\") && path.getName() === \"body\";\n          var shouldBreak = n.type === \"TSInterfaceBody\" || isFlowInterfaceLikeBody || n.type === \"ObjectPattern\" && _parent5.type !== \"FunctionDeclaration\" && _parent5.type !== \"FunctionExpression\" && _parent5.type !== \"ArrowFunctionExpression\" && _parent5.type !== \"ObjectMethod\" && _parent5.type !== \"ClassMethod\" && _parent5.type !== \"ClassPrivateMethod\" && _parent5.type !== \"AssignmentPattern\" && _parent5.type !== \"CatchClause\" && n.properties.some(function (property) {\n            return property.value && (property.value.type === \"ObjectPattern\" || property.value.type === \"ArrayPattern\");\n          }) || n.type !== \"ObjectPattern\" && firstProperty && hasNewlineInRange$2(options.originalText, options.locStart(n), options.locStart(firstProperty));\n          var separator = isFlowInterfaceLikeBody ? \";\" : n.type === \"TSInterfaceBody\" || n.type === \"TSTypeLiteral\" ? ifBreak$6(semi, \";\") : \",\";\n          var leftBrace = n.exact ? \"{|\" : \"{\";\n          var rightBrace = n.exact ? \"|}\" : \"}\"; // Unfortunately, things are grouped together in the ast can be\n          // interleaved in the source code. So we need to reorder them before\n          // printing them.\n\n          var propsAndLoc = [];\n          fields.forEach(function (field) {\n            path.each(function (childPath) {\n              var node = childPath.getValue();\n              propsAndLoc.push({\n                node: node,\n                printed: print(childPath),\n                loc: options.locStart(node)\n              });\n            }, field);\n          });\n          var separatorParts = [];\n          var props = propsAndLoc.sort(function (a, b) {\n            return a.loc - b.loc;\n          }).map(function (prop) {\n            var result = concat$d(separatorParts.concat(group$b(prop.printed)));\n            separatorParts = [separator, line$7];\n\n            if ((prop.node.type === \"TSPropertySignature\" || prop.node.type === \"TSMethodSignature\" || prop.node.type === \"TSConstructSignatureDeclaration\") && hasNodeIgnoreComment$2(prop.node)) {\n              separatorParts.shift();\n            }\n\n            if (isNextLineEmpty$4(options.originalText, prop.node, options)) {\n              separatorParts.push(hardline$9);\n            }\n\n            return result;\n          });\n\n          if (n.inexact) {\n            props.push(concat$d(separatorParts.concat(group$b(\"...\"))));\n          }\n\n          var lastElem = getLast$2(n[propertiesField]);\n          var canHaveTrailingSeparator = !(lastElem && (lastElem.type === \"RestProperty\" || lastElem.type === \"RestElement\" || hasNodeIgnoreComment$2(lastElem) || n.inexact));\n          var content;\n\n          if (props.length === 0) {\n            if (!hasDanglingComments$1(n)) {\n              return concat$d([leftBrace, rightBrace, printTypeAnnotation(path, options, print)]);\n            }\n\n            content = group$b(concat$d([leftBrace, comments.printDanglingComments(path, options), softline$6, rightBrace, printOptionalToken(path), printTypeAnnotation(path, options, print)]));\n          } else {\n            content = concat$d([leftBrace, indent$7(concat$d([options.bracketSpacing ? line$7 : softline$6, concat$d(props)])), ifBreak$6(canHaveTrailingSeparator && (separator !== \",\" || shouldPrintComma$1(options)) ? separator : \"\"), concat$d([options.bracketSpacing ? line$7 : softline$6, rightBrace]), printOptionalToken(path), printTypeAnnotation(path, options, print)]);\n          } // If we inline the object as first argument of the parent, we don't want\n          // to create another group so that the object breaks before the return\n          // type\n\n\n          var parentParentParent = path.getParentNode(2);\n\n          if (n.type === \"ObjectPattern\" && _parent5 && shouldHugArguments(_parent5) && !n.decorators && _parent5.params[0] === n || shouldHugType(n) && parentParentParent && shouldHugArguments(parentParentParent) && parentParentParent.params[0].typeAnnotation && parentParentParent.params[0].typeAnnotation.typeAnnotation === n) {\n            return content;\n          }\n\n          return group$b(content, {\n            shouldBreak: shouldBreak\n          });\n        }\n      // Babel 6\n\n      case \"ObjectProperty\": // Non-standard AST node type.\n\n      case \"Property\":\n        if (n.method || n.kind === \"get\" || n.kind === \"set\") {\n          return printMethod(path, options, print);\n        }\n\n        if (n.shorthand) {\n          parts.push(path.call(print, \"value\"));\n        } else {\n          parts.push(printAssignment(n.key, printPropertyKey(path, options, print), \":\", n.value, path.call(print, \"value\"), options));\n        }\n\n        return concat$d(parts);\n      // Babel 6\n\n      case \"ClassMethod\":\n      case \"ClassPrivateMethod\":\n      case \"MethodDefinition\":\n      case \"TSAbstractMethodDefinition\":\n        if (n.decorators && n.decorators.length !== 0) {\n          parts.push(printDecorators(path, options, print));\n        }\n\n        if (n.accessibility) {\n          parts.push(n.accessibility + \" \");\n        }\n\n        if (n.static) {\n          parts.push(\"static \");\n        }\n\n        if (n.type === \"TSAbstractMethodDefinition\") {\n          parts.push(\"abstract \");\n        }\n\n        parts.push(printMethod(path, options, print));\n        return concat$d(parts);\n\n      case \"ObjectMethod\":\n        return printMethod(path, options, print);\n\n      case \"Decorator\":\n        return concat$d([\"@\", path.call(print, \"expression\"), path.call(print, \"callee\")]);\n\n      case \"ArrayExpression\":\n      case \"ArrayPattern\":\n        if (n.elements.length === 0) {\n          if (!hasDanglingComments$1(n)) {\n            parts.push(\"[]\");\n          } else {\n            parts.push(group$b(concat$d([\"[\", comments.printDanglingComments(path, options), softline$6, \"]\"])));\n          }\n        } else {\n          var _lastElem = getLast$2(n.elements);\n\n          var canHaveTrailingComma = !(_lastElem && _lastElem.type === \"RestElement\"); // JavaScript allows you to have empty elements in an array which\n          // changes its length based on the number of commas. The algorithm\n          // is that if the last argument is null, we need to force insert\n          // a comma to ensure JavaScript recognizes it.\n          //   [,].length === 1\n          //   [1,].length === 1\n          //   [1,,].length === 2\n          //\n          // Note that getLast returns null if the array is empty, but\n          // we already check for an empty array just above so we are safe\n\n          var needsForcedTrailingComma = canHaveTrailingComma && _lastElem === null;\n\n          var _shouldBreak = n.elements.length > 1 && n.elements.every(function (element, i, elements) {\n            var elementType = element && element.type;\n\n            if (elementType !== \"ArrayExpression\" && elementType !== \"ObjectExpression\") {\n              return false;\n            }\n\n            var nextElement = elements[i + 1];\n\n            if (nextElement && elementType !== nextElement.type) {\n              return false;\n            }\n\n            var itemsKey = elementType === \"ArrayExpression\" ? \"elements\" : \"properties\";\n            return element[itemsKey] && element[itemsKey].length > 1;\n          });\n\n          parts.push(group$b(concat$d([\"[\", indent$7(concat$d([softline$6, printArrayItems(path, options, \"elements\", print)])), needsForcedTrailingComma ? \",\" : \"\", ifBreak$6(canHaveTrailingComma && !needsForcedTrailingComma && shouldPrintComma$1(options) ? \",\" : \"\"), comments.printDanglingComments(path, options,\n          /* sameIndent */\n          true), softline$6, \"]\"]), {\n            shouldBreak: _shouldBreak\n          }));\n        }\n\n        parts.push(printOptionalToken(path), printTypeAnnotation(path, options, print));\n        return concat$d(parts);\n\n      case \"SequenceExpression\":\n        {\n          var _parent6 = path.getParentNode(0);\n\n          if (_parent6.type === \"ExpressionStatement\" || _parent6.type === \"ForStatement\") {\n            // For ExpressionStatements and for-loop heads, which are among\n            // the few places a SequenceExpression appears unparenthesized, we want\n            // to indent expressions after the first.\n            var _parts2 = [];\n            path.each(function (p) {\n              if (p.getName() === 0) {\n                _parts2.push(print(p));\n              } else {\n                _parts2.push(\",\", indent$7(concat$d([line$7, print(p)])));\n              }\n            }, \"expressions\");\n            return group$b(concat$d(_parts2));\n          }\n\n          return group$b(concat$d([join$9(concat$d([\",\", line$7]), path.map(print, \"expressions\"))]));\n        }\n\n      case \"ThisExpression\":\n        return \"this\";\n\n      case \"Super\":\n        return \"super\";\n\n      case \"NullLiteral\":\n        // Babel 6 Literal split\n        return \"null\";\n\n      case \"RegExpLiteral\":\n        // Babel 6 Literal split\n        return printRegex(n);\n\n      case \"NumericLiteral\":\n        // Babel 6 Literal split\n        return printNumber$2(n.extra.raw);\n\n      case \"BigIntLiteral\":\n        // babel: n.extra.raw, typescript: n.raw, flow: n.bigint\n        return (n.bigint || (n.extra ? n.extra.raw : n.raw)).toLowerCase();\n\n      case \"BooleanLiteral\": // Babel 6 Literal split\n\n      case \"StringLiteral\": // Babel 6 Literal split\n\n      case \"Literal\":\n        {\n          if (n.regex) {\n            return printRegex(n.regex);\n          }\n\n          if (typeof n.value === \"number\") {\n            return printNumber$2(n.raw);\n          }\n\n          if (typeof n.value !== \"string\") {\n            return \"\" + n.value;\n          } // TypeScript workaround for https://github.com/JamesHenry/typescript-estree/issues/2\n          // See corresponding workaround in needs-parens.js\n\n\n          var grandParent = path.getParentNode(1);\n          var isTypeScriptDirective = options.parser === \"typescript\" && typeof n.value === \"string\" && grandParent && (grandParent.type === \"Program\" || grandParent.type === \"BlockStatement\");\n          return nodeStr(n, options, isTypeScriptDirective);\n        }\n\n      case \"Directive\":\n        return path.call(print, \"value\");\n      // Babel 6\n\n      case \"DirectiveLiteral\":\n        return nodeStr(n, options);\n\n      case \"UnaryExpression\":\n        parts.push(n.operator);\n\n        if (/[a-z]$/.test(n.operator)) {\n          parts.push(\" \");\n        }\n\n        if (n.argument.comments && n.argument.comments.length > 0) {\n          parts.push(group$b(concat$d([\"(\", indent$7(concat$d([softline$6, path.call(print, \"argument\")])), softline$6, \")\"])));\n        } else {\n          parts.push(path.call(print, \"argument\"));\n        }\n\n        return concat$d(parts);\n\n      case \"UpdateExpression\":\n        parts.push(path.call(print, \"argument\"), n.operator);\n\n        if (n.prefix) {\n          parts.reverse();\n        }\n\n        return concat$d(parts);\n\n      case \"ConditionalExpression\":\n        return printTernaryOperator(path, options, print, {\n          beforeParts: function beforeParts() {\n            return [path.call(print, \"test\")];\n          },\n          afterParts: function afterParts(breakClosingParen) {\n            return [breakClosingParen ? softline$6 : \"\"];\n          },\n          shouldCheckJsx: true,\n          conditionalNodeType: \"ConditionalExpression\",\n          consequentNodePropertyName: \"consequent\",\n          alternateNodePropertyName: \"alternate\",\n          testNodePropertyName: \"test\",\n          breakNested: true\n        });\n\n      case \"VariableDeclaration\":\n        {\n          var printed = path.map(function (childPath) {\n            return print(childPath);\n          }, \"declarations\"); // We generally want to terminate all variable declarations with a\n          // semicolon, except when they in the () part of for loops.\n\n          var parentNode = path.getParentNode();\n          var isParentForLoop = parentNode.type === \"ForStatement\" || parentNode.type === \"ForInStatement\" || parentNode.type === \"ForOfStatement\" || parentNode.type === \"ForAwaitStatement\";\n          var hasValue = n.declarations.some(function (decl) {\n            return decl.init;\n          });\n          var firstVariable;\n\n          if (printed.length === 1 && !n.declarations[0].comments) {\n            firstVariable = printed[0];\n          } else if (printed.length > 0) {\n            // Indent first var to comply with eslint one-var rule\n            firstVariable = indent$7(printed[0]);\n          }\n\n          parts = [n.declare ? \"declare \" : \"\", n.kind, firstVariable ? concat$d([\" \", firstVariable]) : \"\", indent$7(concat$d(printed.slice(1).map(function (p) {\n            return concat$d([\",\", hasValue && !isParentForLoop ? hardline$9 : line$7, p]);\n          })))];\n\n          if (!(isParentForLoop && parentNode.body !== n)) {\n            parts.push(semi);\n          }\n\n          return group$b(concat$d(parts));\n        }\n\n      case \"TSTypeAliasDeclaration\":\n        {\n          if (n.declare) {\n            parts.push(\"declare \");\n          }\n\n          var _printed = printAssignmentRight(n.id, n.typeAnnotation, n.typeAnnotation && path.call(print, \"typeAnnotation\"), options);\n\n          parts.push(\"type \", path.call(print, \"id\"), path.call(print, \"typeParameters\"), \" =\", _printed, semi);\n          return group$b(concat$d(parts));\n        }\n\n      case \"VariableDeclarator\":\n        return printAssignment(n.id, path.call(print, \"id\"), \" =\", n.init, n.init && path.call(print, \"init\"), options);\n\n      case \"WithStatement\":\n        return group$b(concat$d([\"with (\", path.call(print, \"object\"), \")\", adjustClause(n.body, path.call(print, \"body\"))]));\n\n      case \"IfStatement\":\n        {\n          var con = adjustClause(n.consequent, path.call(print, \"consequent\"));\n          var opening = group$b(concat$d([\"if (\", group$b(concat$d([indent$7(concat$d([softline$6, path.call(print, \"test\")])), softline$6])), \")\", con]));\n          parts.push(opening);\n\n          if (n.alternate) {\n            var commentOnOwnLine = hasTrailingComment$1(n.consequent) && n.consequent.comments.some(function (comment) {\n              return comment.trailing && !comments$1.isBlockComment(comment);\n            }) || needsHardlineAfterDanglingComment$1(n);\n            var elseOnSameLine = n.consequent.type === \"BlockStatement\" && !commentOnOwnLine;\n            parts.push(elseOnSameLine ? \" \" : hardline$9);\n\n            if (hasDanglingComments$1(n)) {\n              parts.push(comments.printDanglingComments(path, options, true), commentOnOwnLine ? hardline$9 : \" \");\n            }\n\n            parts.push(\"else\", group$b(adjustClause(n.alternate, path.call(print, \"alternate\"), n.alternate.type === \"IfStatement\")));\n          }\n\n          return concat$d(parts);\n        }\n\n      case \"ForStatement\":\n        {\n          var _body = adjustClause(n.body, path.call(print, \"body\")); // We want to keep dangling comments above the loop to stay consistent.\n          // Any comment positioned between the for statement and the parentheses\n          // is going to be printed before the statement.\n\n\n          var _dangling = comments.printDanglingComments(path, options,\n          /* sameLine */\n          true);\n\n          var printedComments = _dangling ? concat$d([_dangling, softline$6]) : \"\";\n\n          if (!n.init && !n.test && !n.update) {\n            return concat$d([printedComments, group$b(concat$d([\"for (;;)\", _body]))]);\n          }\n\n          return concat$d([printedComments, group$b(concat$d([\"for (\", group$b(concat$d([indent$7(concat$d([softline$6, path.call(print, \"init\"), \";\", line$7, path.call(print, \"test\"), \";\", line$7, path.call(print, \"update\")])), softline$6])), \")\", _body]))]);\n        }\n\n      case \"WhileStatement\":\n        return group$b(concat$d([\"while (\", group$b(concat$d([indent$7(concat$d([softline$6, path.call(print, \"test\")])), softline$6])), \")\", adjustClause(n.body, path.call(print, \"body\"))]));\n\n      case \"ForInStatement\":\n        // Note: esprima can't actually parse \"for each (\".\n        return group$b(concat$d([n.each ? \"for each (\" : \"for (\", path.call(print, \"left\"), \" in \", path.call(print, \"right\"), \")\", adjustClause(n.body, path.call(print, \"body\"))]));\n\n      case \"ForOfStatement\":\n      case \"ForAwaitStatement\":\n        {\n          // Babel 7 removed ForAwaitStatement in favor of ForOfStatement\n          // with `\"await\": true`:\n          // https://github.com/estree/estree/pull/138\n          var isAwait = n.type === \"ForAwaitStatement\" || n.await;\n          return group$b(concat$d([\"for\", isAwait ? \" await\" : \"\", \" (\", path.call(print, \"left\"), \" of \", path.call(print, \"right\"), \")\", adjustClause(n.body, path.call(print, \"body\"))]));\n        }\n\n      case \"DoWhileStatement\":\n        {\n          var clause = adjustClause(n.body, path.call(print, \"body\"));\n          var doBody = group$b(concat$d([\"do\", clause]));\n          parts = [doBody];\n\n          if (n.body.type === \"BlockStatement\") {\n            parts.push(\" \");\n          } else {\n            parts.push(hardline$9);\n          }\n\n          parts.push(\"while (\");\n          parts.push(group$b(concat$d([indent$7(concat$d([softline$6, path.call(print, \"test\")])), softline$6])), \")\", semi);\n          return concat$d(parts);\n        }\n\n      case \"DoExpression\":\n        return concat$d([\"do \", path.call(print, \"body\")]);\n\n      case \"BreakStatement\":\n        parts.push(\"break\");\n\n        if (n.label) {\n          parts.push(\" \", path.call(print, \"label\"));\n        }\n\n        parts.push(semi);\n        return concat$d(parts);\n\n      case \"ContinueStatement\":\n        parts.push(\"continue\");\n\n        if (n.label) {\n          parts.push(\" \", path.call(print, \"label\"));\n        }\n\n        parts.push(semi);\n        return concat$d(parts);\n\n      case \"LabeledStatement\":\n        if (n.body.type === \"EmptyStatement\") {\n          return concat$d([path.call(print, \"label\"), \":;\"]);\n        }\n\n        return concat$d([path.call(print, \"label\"), \": \", path.call(print, \"body\")]);\n\n      case \"TryStatement\":\n        return concat$d([\"try \", path.call(print, \"block\"), n.handler ? concat$d([\" \", path.call(print, \"handler\")]) : \"\", n.finalizer ? concat$d([\" finally \", path.call(print, \"finalizer\")]) : \"\"]);\n\n      case \"CatchClause\":\n        if (n.param) {\n          var hasComments = n.param.comments && n.param.comments.some(function (comment) {\n            return !comments$1.isBlockComment(comment) || comment.leading && hasNewline$4(options.originalText, options.locEnd(comment)) || comment.trailing && hasNewline$4(options.originalText, options.locStart(comment), {\n              backwards: true\n            });\n          });\n          var param = path.call(print, \"param\");\n          return concat$d([\"catch \", hasComments ? concat$d([\"(\", indent$7(concat$d([softline$6, param])), softline$6, \") \"]) : concat$d([\"(\", param, \") \"]), path.call(print, \"body\")]);\n        }\n\n        return concat$d([\"catch \", path.call(print, \"body\")]);\n\n      case \"ThrowStatement\":\n        return concat$d([\"throw \", path.call(print, \"argument\"), semi]);\n      // Note: ignoring n.lexical because it has no printing consequences.\n\n      case \"SwitchStatement\":\n        return concat$d([group$b(concat$d([\"switch (\", indent$7(concat$d([softline$6, path.call(print, \"discriminant\")])), softline$6, \")\"])), \" {\", n.cases.length > 0 ? indent$7(concat$d([hardline$9, join$9(hardline$9, path.map(function (casePath) {\n          var caseNode = casePath.getValue();\n          return concat$d([casePath.call(print), n.cases.indexOf(caseNode) !== n.cases.length - 1 && isNextLineEmpty$4(options.originalText, caseNode, options) ? hardline$9 : \"\"]);\n        }, \"cases\"))])) : \"\", hardline$9, \"}\"]);\n\n      case \"SwitchCase\":\n        {\n          if (n.test) {\n            parts.push(\"case \", path.call(print, \"test\"), \":\");\n          } else {\n            parts.push(\"default:\");\n          }\n\n          var consequent = n.consequent.filter(function (node) {\n            return node.type !== \"EmptyStatement\";\n          });\n\n          if (consequent.length > 0) {\n            var cons = path.call(function (consequentPath) {\n              return printStatementSequence(consequentPath, options, print);\n            }, \"consequent\");\n            parts.push(consequent.length === 1 && consequent[0].type === \"BlockStatement\" ? concat$d([\" \", cons]) : indent$7(concat$d([hardline$9, cons])));\n          }\n\n          return concat$d(parts);\n        }\n      // JSX extensions below.\n\n      case \"DebuggerStatement\":\n        return concat$d([\"debugger\", semi]);\n\n      case \"JSXAttribute\":\n        parts.push(path.call(print, \"name\"));\n\n        if (n.value) {\n          var res;\n\n          if (isStringLiteral$1(n.value)) {\n            var raw = rawText$1(n.value); // Unescape all quotes so we get an accurate preferred quote\n\n            var final = raw.replace(/&apos;/g, \"'\").replace(/&quot;/g, '\"');\n            var quote = getPreferredQuote$1(final, options.jsxSingleQuote ? \"'\" : '\"');\n\n            var _escape = quote === \"'\" ? \"&apos;\" : \"&quot;\";\n\n            final = final.slice(1, -1).replace(new RegExp(quote, \"g\"), _escape);\n            res = concat$d([quote, final, quote]);\n          } else {\n            res = path.call(print, \"value\");\n          }\n\n          parts.push(\"=\", res);\n        }\n\n        return concat$d(parts);\n\n      case \"JSXIdentifier\":\n        return \"\" + n.name;\n\n      case \"JSXNamespacedName\":\n        return join$9(\":\", [path.call(print, \"namespace\"), path.call(print, \"name\")]);\n\n      case \"JSXMemberExpression\":\n        return join$9(\".\", [path.call(print, \"object\"), path.call(print, \"property\")]);\n\n      case \"TSQualifiedName\":\n        return join$9(\".\", [path.call(print, \"left\"), path.call(print, \"right\")]);\n\n      case \"JSXSpreadAttribute\":\n      case \"JSXSpreadChild\":\n        {\n          return concat$d([\"{\", path.call(function (p) {\n            var printed = concat$d([\"...\", print(p)]);\n            var n = p.getValue();\n\n            if (!n.comments || !n.comments.length) {\n              return printed;\n            }\n\n            return concat$d([indent$7(concat$d([softline$6, comments.printComments(p, function () {\n              return printed;\n            }, options)])), softline$6]);\n          }, n.type === \"JSXSpreadAttribute\" ? \"argument\" : \"expression\"), \"}\"]);\n        }\n\n      case \"JSXExpressionContainer\":\n        {\n          var _parent7 = path.getParentNode(0);\n\n          var preventInline = _parent7.type === \"JSXAttribute\" && n.expression.comments && n.expression.comments.length > 0;\n\n          var _shouldInline = !preventInline && (n.expression.type === \"ArrayExpression\" || n.expression.type === \"ObjectExpression\" || n.expression.type === \"ArrowFunctionExpression\" || n.expression.type === \"CallExpression\" || n.expression.type === \"OptionalCallExpression\" || n.expression.type === \"FunctionExpression\" || n.expression.type === \"JSXEmptyExpression\" || n.expression.type === \"TemplateLiteral\" || n.expression.type === \"TaggedTemplateExpression\" || n.expression.type === \"DoExpression\" || isJSXNode$1(_parent7) && (n.expression.type === \"ConditionalExpression\" || isBinaryish$1(n.expression)));\n\n          if (_shouldInline) {\n            return group$b(concat$d([\"{\", path.call(print, \"expression\"), lineSuffixBoundary$1, \"}\"]));\n          }\n\n          return group$b(concat$d([\"{\", indent$7(concat$d([softline$6, path.call(print, \"expression\")])), softline$6, lineSuffixBoundary$1, \"}\"]));\n        }\n\n      case \"JSXFragment\":\n      case \"JSXElement\":\n        {\n          var elem = comments.printComments(path, function () {\n            return printJSXElement(path, options, print);\n          }, options);\n          return maybeWrapJSXElementInParens(path, elem, options);\n        }\n\n      case \"JSXOpeningElement\":\n        {\n          var _n = path.getValue();\n\n          var nameHasComments = _n.name && _n.name.comments && _n.name.comments.length > 0 || _n.typeParameters && _n.typeParameters.comments && _n.typeParameters.comments.length > 0; // Don't break self-closing elements with no attributes and no comments\n\n          if (_n.selfClosing && !_n.attributes.length && !nameHasComments) {\n            return concat$d([\"<\", path.call(print, \"name\"), path.call(print, \"typeParameters\"), \" />\"]);\n          } // don't break up opening elements with a single long text attribute\n\n\n          if (_n.attributes && _n.attributes.length === 1 && _n.attributes[0].value && isStringLiteral$1(_n.attributes[0].value) && !_n.attributes[0].value.value.includes(\"\\n\") && // We should break for the following cases:\n          // <div\n          //   // comment\n          //   attr=\"value\"\n          // >\n          // <div\n          //   attr=\"value\"\n          //   // comment\n          // >\n          !nameHasComments && (!_n.attributes[0].comments || !_n.attributes[0].comments.length)) {\n            return group$b(concat$d([\"<\", path.call(print, \"name\"), path.call(print, \"typeParameters\"), \" \", concat$d(path.map(print, \"attributes\")), _n.selfClosing ? \" />\" : \">\"]));\n          }\n\n          var lastAttrHasTrailingComments = _n.attributes.length && hasTrailingComment$1(getLast$2(_n.attributes));\n          var bracketSameLine = // Simple tags (no attributes and no comment in tag name) should be\n          // kept unbroken regardless of `jsxBracketSameLine`\n          !_n.attributes.length && !nameHasComments || options.jsxBracketSameLine && ( // We should print the bracket in a new line for the following cases:\n          // <div\n          //   // comment\n          // >\n          // <div\n          //   attr // comment\n          // >\n          !nameHasComments || _n.attributes.length) && !lastAttrHasTrailingComments; // We should print the opening element expanded if any prop value is a\n          // string literal with newlines\n\n          var _shouldBreak2 = _n.attributes && _n.attributes.some(function (attr) {\n            return attr.value && isStringLiteral$1(attr.value) && attr.value.value.includes(\"\\n\");\n          });\n\n          return group$b(concat$d([\"<\", path.call(print, \"name\"), path.call(print, \"typeParameters\"), concat$d([indent$7(concat$d(path.map(function (attr) {\n            return concat$d([line$7, print(attr)]);\n          }, \"attributes\"))), _n.selfClosing ? line$7 : bracketSameLine ? \">\" : softline$6]), _n.selfClosing ? \"/>\" : bracketSameLine ? \"\" : \">\"]), {\n            shouldBreak: _shouldBreak2\n          });\n        }\n\n      case \"JSXClosingElement\":\n        return concat$d([\"</\", path.call(print, \"name\"), \">\"]);\n\n      case \"JSXOpeningFragment\":\n      case \"JSXClosingFragment\":\n        {\n          var hasComment = n.comments && n.comments.length;\n          var hasOwnLineComment = hasComment && !n.comments.every(comments$1.isBlockComment);\n          var isOpeningFragment = n.type === \"JSXOpeningFragment\";\n          return concat$d([isOpeningFragment ? \"<\" : \"</\", indent$7(concat$d([hasOwnLineComment ? hardline$9 : hasComment && !isOpeningFragment ? \" \" : \"\", comments.printDanglingComments(path, options, true)])), hasOwnLineComment ? hardline$9 : \"\", \">\"]);\n        }\n\n      case \"JSXText\":\n        /* istanbul ignore next */\n        throw new Error(\"JSXTest should be handled by JSXElement\");\n\n      case \"JSXEmptyExpression\":\n        {\n          var requiresHardline = n.comments && !n.comments.every(comments$1.isBlockComment);\n          return concat$d([comments.printDanglingComments(path, options,\n          /* sameIndent */\n          !requiresHardline), requiresHardline ? hardline$9 : \"\"]);\n        }\n\n      case \"ClassBody\":\n        if (!n.comments && n.body.length === 0) {\n          return \"{}\";\n        }\n\n        return concat$d([\"{\", n.body.length > 0 ? indent$7(concat$d([hardline$9, path.call(function (bodyPath) {\n          return printStatementSequence(bodyPath, options, print);\n        }, \"body\")])) : comments.printDanglingComments(path, options), hardline$9, \"}\"]);\n\n      case \"ClassProperty\":\n      case \"TSAbstractClassProperty\":\n      case \"ClassPrivateProperty\":\n        {\n          if (n.decorators && n.decorators.length !== 0) {\n            parts.push(printDecorators(path, options, print));\n          }\n\n          if (n.accessibility) {\n            parts.push(n.accessibility + \" \");\n          }\n\n          if (n.declare) {\n            parts.push(\"declare \");\n          }\n\n          if (n.static) {\n            parts.push(\"static \");\n          }\n\n          if (n.type === \"TSAbstractClassProperty\") {\n            parts.push(\"abstract \");\n          }\n\n          if (n.readonly) {\n            parts.push(\"readonly \");\n          }\n\n          var variance = getFlowVariance$1(n);\n\n          if (variance) {\n            parts.push(variance);\n          }\n\n          parts.push(printPropertyKey(path, options, print), printOptionalToken(path), printTypeAnnotation(path, options, print));\n\n          if (n.value) {\n            parts.push(\" =\", printAssignmentRight(n.key, n.value, path.call(print, \"value\"), options));\n          }\n\n          parts.push(semi);\n          return group$b(concat$d(parts));\n        }\n\n      case \"ClassDeclaration\":\n      case \"ClassExpression\":\n        if (n.declare) {\n          parts.push(\"declare \");\n        }\n\n        parts.push(concat$d(printClass(path, options, print)));\n        return concat$d(parts);\n\n      case \"TSInterfaceHeritage\":\n        parts.push(path.call(print, \"expression\"));\n\n        if (n.typeParameters) {\n          parts.push(path.call(print, \"typeParameters\"));\n        }\n\n        return concat$d(parts);\n\n      case \"TemplateElement\":\n        return join$9(literalline$4, n.value.raw.split(/\\r?\\n/g));\n\n      case \"TemplateLiteral\":\n        {\n          var expressions = path.map(print, \"expressions\");\n\n          var _parentNode = path.getParentNode();\n\n          if (isJestEachTemplateLiteral$1(n, _parentNode)) {\n            var _printed2 = printJestEachTemplateLiteral(n, expressions, options);\n\n            if (_printed2) {\n              return _printed2;\n            }\n          }\n\n          var isSimple = isSimpleTemplateLiteral$1(n);\n\n          if (isSimple) {\n            expressions = expressions.map(function (doc) {\n              return printDocToString$1(doc, Object.assign({}, options, {\n                printWidth: Infinity\n              })).formatted;\n            });\n          }\n\n          parts.push(lineSuffixBoundary$1, \"`\");\n          path.each(function (childPath) {\n            var i = childPath.getName();\n            parts.push(print(childPath));\n\n            if (i < expressions.length) {\n              // For a template literal of the following form:\n              //   `someQuery {\n              //     ${call({\n              //       a,\n              //       b,\n              //     })}\n              //   }`\n              // the expression is on its own line (there is a \\n in the previous\n              // quasi literal), therefore we want to indent the JavaScript\n              // expression inside at the beginning of ${ instead of the beginning\n              // of the `.\n              var tabWidth = options.tabWidth;\n              var quasi = childPath.getValue();\n              var indentSize = getIndentSize$1(quasi.value.raw, tabWidth);\n              var _printed3 = expressions[i];\n\n              if (!isSimple) {\n                // Breaks at the template element boundaries (${ and }) are preferred to breaking\n                // in the middle of a MemberExpression\n                if (n.expressions[i].comments && n.expressions[i].comments.length || n.expressions[i].type === \"MemberExpression\" || n.expressions[i].type === \"OptionalMemberExpression\" || n.expressions[i].type === \"ConditionalExpression\") {\n                  _printed3 = concat$d([indent$7(concat$d([softline$6, _printed3])), softline$6]);\n                }\n              }\n\n              var aligned = indentSize === 0 && quasi.value.raw.endsWith(\"\\n\") ? align$1(-Infinity, _printed3) : addAlignmentToDoc$2(_printed3, indentSize, tabWidth);\n              parts.push(group$b(concat$d([\"${\", aligned, lineSuffixBoundary$1, \"}\"])));\n            }\n          }, \"quasis\");\n          parts.push(\"`\");\n          return concat$d(parts);\n        }\n      // These types are unprintable because they serve as abstract\n      // supertypes for other (printable) types.\n\n      case \"TaggedTemplateExpression\":\n        return concat$d([path.call(print, \"tag\"), path.call(print, \"typeParameters\"), path.call(print, \"quasi\")]);\n\n      case \"Node\":\n      case \"Printable\":\n      case \"SourceLocation\":\n      case \"Position\":\n      case \"Statement\":\n      case \"Function\":\n      case \"Pattern\":\n      case \"Expression\":\n      case \"Declaration\":\n      case \"Specifier\":\n      case \"NamedSpecifier\":\n      case \"Comment\":\n      case \"MemberTypeAnnotation\": // Flow\n\n      case \"Type\":\n        /* istanbul ignore next */\n        throw new Error(\"unprintable type: \" + JSON.stringify(n.type));\n      // Type Annotations for Facebook Flow, typically stripped out or\n      // transformed away before printing.\n\n      case \"TypeAnnotation\":\n      case \"TSTypeAnnotation\":\n        if (n.typeAnnotation) {\n          return path.call(print, \"typeAnnotation\");\n        }\n        /* istanbul ignore next */\n\n\n        return \"\";\n\n      case \"TSTupleType\":\n      case \"TupleTypeAnnotation\":\n        {\n          var typesField = n.type === \"TSTupleType\" ? \"elementTypes\" : \"types\";\n          return group$b(concat$d([\"[\", indent$7(concat$d([softline$6, printArrayItems(path, options, typesField, print)])), ifBreak$6(shouldPrintComma$1(options, \"all\") ? \",\" : \"\"), comments.printDanglingComments(path, options,\n          /* sameIndent */\n          true), softline$6, \"]\"]));\n        }\n\n      case \"ExistsTypeAnnotation\":\n        return \"*\";\n\n      case \"EmptyTypeAnnotation\":\n        return \"empty\";\n\n      case \"AnyTypeAnnotation\":\n        return \"any\";\n\n      case \"MixedTypeAnnotation\":\n        return \"mixed\";\n\n      case \"ArrayTypeAnnotation\":\n        return concat$d([path.call(print, \"elementType\"), \"[]\"]);\n\n      case \"BooleanTypeAnnotation\":\n        return \"boolean\";\n\n      case \"BooleanLiteralTypeAnnotation\":\n        return \"\" + n.value;\n\n      case \"DeclareClass\":\n        return printFlowDeclaration(path, printClass(path, options, print));\n\n      case \"TSDeclareFunction\":\n        // For TypeScript the TSDeclareFunction node shares the AST\n        // structure with FunctionDeclaration\n        return concat$d([n.declare ? \"declare \" : \"\", printFunctionDeclaration(path, print, options), semi]);\n\n      case \"DeclareFunction\":\n        return printFlowDeclaration(path, [\"function \", path.call(print, \"id\"), n.predicate ? \" \" : \"\", path.call(print, \"predicate\"), semi]);\n\n      case \"DeclareModule\":\n        return printFlowDeclaration(path, [\"module \", path.call(print, \"id\"), \" \", path.call(print, \"body\")]);\n\n      case \"DeclareModuleExports\":\n        return printFlowDeclaration(path, [\"module.exports\", \": \", path.call(print, \"typeAnnotation\"), semi]);\n\n      case \"DeclareVariable\":\n        return printFlowDeclaration(path, [\"var \", path.call(print, \"id\"), semi]);\n\n      case \"DeclareExportAllDeclaration\":\n        return concat$d([\"declare export * from \", path.call(print, \"source\")]);\n\n      case \"DeclareExportDeclaration\":\n        return concat$d([\"declare \", printExportDeclaration(path, options, print)]);\n\n      case \"DeclareOpaqueType\":\n      case \"OpaqueType\":\n        {\n          parts.push(\"opaque type \", path.call(print, \"id\"), path.call(print, \"typeParameters\"));\n\n          if (n.supertype) {\n            parts.push(\": \", path.call(print, \"supertype\"));\n          }\n\n          if (n.impltype) {\n            parts.push(\" = \", path.call(print, \"impltype\"));\n          }\n\n          parts.push(semi);\n\n          if (n.type === \"DeclareOpaqueType\") {\n            return printFlowDeclaration(path, parts);\n          }\n\n          return concat$d(parts);\n        }\n\n      case \"EnumDeclaration\":\n        return concat$d([\"enum \", path.call(print, \"id\"), \" \", path.call(print, \"body\")]);\n\n      case \"EnumBooleanBody\":\n      case \"EnumNumberBody\":\n      case \"EnumStringBody\":\n      case \"EnumSymbolBody\":\n        {\n          if (n.type === \"EnumSymbolBody\" || n.explicitType) {\n            var type = null;\n\n            switch (n.type) {\n              case \"EnumBooleanBody\":\n                type = \"boolean\";\n                break;\n\n              case \"EnumNumberBody\":\n                type = \"number\";\n                break;\n\n              case \"EnumStringBody\":\n                type = \"string\";\n                break;\n\n              case \"EnumSymbolBody\":\n                type = \"symbol\";\n                break;\n            }\n\n            parts.push(\"of \", type, \" \");\n          }\n\n          if (n.members.length === 0) {\n            parts.push(group$b(concat$d([\"{\", comments.printDanglingComments(path, options), softline$6, \"}\"])));\n          } else {\n            parts.push(group$b(concat$d([\"{\", indent$7(concat$d([hardline$9, printArrayItems(path, options, \"members\", print), shouldPrintComma$1(options) ? \",\" : \"\"])), comments.printDanglingComments(path, options,\n            /* sameIndent */\n            true), hardline$9, \"}\"])));\n          }\n\n          return concat$d(parts);\n        }\n\n      case \"EnumBooleanMember\":\n      case \"EnumNumberMember\":\n      case \"EnumStringMember\":\n        return concat$d([path.call(print, \"id\"), \" = \", _typeof(n.init) === \"object\" ? path.call(print, \"init\") : String(n.init)]);\n\n      case \"EnumDefaultedMember\":\n        return path.call(print, \"id\");\n\n      case \"FunctionTypeAnnotation\":\n      case \"TSFunctionType\":\n        {\n          // FunctionTypeAnnotation is ambiguous:\n          // declare function foo(a: B): void; OR\n          // var A: (a: B) => void;\n          var _parent8 = path.getParentNode(0);\n\n          var _parentParent2 = path.getParentNode(1);\n\n          var _parentParentParent = path.getParentNode(2);\n\n          var isArrowFunctionTypeAnnotation = n.type === \"TSFunctionType\" || !((_parent8.type === \"ObjectTypeProperty\" || _parent8.type === \"ObjectTypeInternalSlot\") && !getFlowVariance$1(_parent8) && !_parent8.optional && options.locStart(_parent8) === options.locStart(n) || _parent8.type === \"ObjectTypeCallProperty\" || _parentParentParent && _parentParentParent.type === \"DeclareFunction\");\n          var needsColon = isArrowFunctionTypeAnnotation && (_parent8.type === \"TypeAnnotation\" || _parent8.type === \"TSTypeAnnotation\"); // Sadly we can't put it inside of FastPath::needsColon because we are\n          // printing \":\" as part of the expression and it would put parenthesis\n          // around :(\n\n          var needsParens = needsColon && isArrowFunctionTypeAnnotation && (_parent8.type === \"TypeAnnotation\" || _parent8.type === \"TSTypeAnnotation\") && _parentParent2.type === \"ArrowFunctionExpression\";\n\n          if (isObjectTypePropertyAFunction$1(_parent8, options)) {\n            isArrowFunctionTypeAnnotation = true;\n            needsColon = true;\n          }\n\n          if (needsParens) {\n            parts.push(\"(\");\n          }\n\n          parts.push(printFunctionParams(path, print, options,\n          /* expandArg */\n          false,\n          /* printTypeParams */\n          true)); // The returnType is not wrapped in a TypeAnnotation, so the colon\n          // needs to be added separately.\n\n          if (n.returnType || n.predicate || n.typeAnnotation) {\n            parts.push(isArrowFunctionTypeAnnotation ? \" => \" : \": \", path.call(print, \"returnType\"), path.call(print, \"predicate\"), path.call(print, \"typeAnnotation\"));\n          }\n\n          if (needsParens) {\n            parts.push(\")\");\n          }\n\n          return group$b(concat$d(parts));\n        }\n\n      case \"TSRestType\":\n        return concat$d([\"...\", path.call(print, \"typeAnnotation\")]);\n\n      case \"TSOptionalType\":\n        return concat$d([path.call(print, \"typeAnnotation\"), \"?\"]);\n\n      case \"FunctionTypeParam\":\n        return concat$d([path.call(print, \"name\"), printOptionalToken(path), n.name ? \": \" : \"\", path.call(print, \"typeAnnotation\")]);\n\n      case \"GenericTypeAnnotation\":\n        return concat$d([path.call(print, \"id\"), path.call(print, \"typeParameters\")]);\n\n      case \"DeclareInterface\":\n      case \"InterfaceDeclaration\":\n      case \"InterfaceTypeAnnotation\":\n        {\n          if (n.type === \"DeclareInterface\" || n.declare) {\n            parts.push(\"declare \");\n          }\n\n          parts.push(\"interface\");\n\n          if (n.type === \"DeclareInterface\" || n.type === \"InterfaceDeclaration\") {\n            parts.push(\" \", path.call(print, \"id\"), path.call(print, \"typeParameters\"));\n          }\n\n          if (n[\"extends\"].length > 0) {\n            parts.push(group$b(indent$7(concat$d([line$7, \"extends \", (n.extends.length === 1 ? identity$2 : indent$7)(join$9(concat$d([\",\", line$7]), path.map(print, \"extends\")))]))));\n          }\n\n          parts.push(\" \", path.call(print, \"body\"));\n          return group$b(concat$d(parts));\n        }\n\n      case \"ClassImplements\":\n      case \"InterfaceExtends\":\n        return concat$d([path.call(print, \"id\"), path.call(print, \"typeParameters\")]);\n\n      case \"TSClassImplements\":\n        return concat$d([path.call(print, \"expression\"), path.call(print, \"typeParameters\")]);\n\n      case \"TSIntersectionType\":\n      case \"IntersectionTypeAnnotation\":\n        {\n          var types = path.map(print, \"types\");\n          var result = [];\n          var wasIndented = false;\n\n          for (var _i = 0; _i < types.length; ++_i) {\n            if (_i === 0) {\n              result.push(types[_i]);\n            } else if (isObjectType$1(n.types[_i - 1]) && isObjectType$1(n.types[_i])) {\n              // If both are objects, don't indent\n              result.push(concat$d([\" & \", wasIndented ? indent$7(types[_i]) : types[_i]]));\n            } else if (!isObjectType$1(n.types[_i - 1]) && !isObjectType$1(n.types[_i])) {\n              // If no object is involved, go to the next line if it breaks\n              result.push(indent$7(concat$d([\" &\", line$7, types[_i]])));\n            } else {\n              // If you go from object to non-object or vis-versa, then inline it\n              if (_i > 1) {\n                wasIndented = true;\n              }\n\n              result.push(\" & \", _i > 1 ? indent$7(types[_i]) : types[_i]);\n            }\n          }\n\n          return group$b(concat$d(result));\n        }\n\n      case \"TSUnionType\":\n      case \"UnionTypeAnnotation\":\n        {\n          // single-line variation\n          // A | B | C\n          // multi-line variation\n          // | A\n          // | B\n          // | C\n          var _parent9 = path.getParentNode(); // If there's a leading comment, the parent is doing the indentation\n\n\n          var shouldIndent = _parent9.type !== \"TypeParameterInstantiation\" && _parent9.type !== \"TSTypeParameterInstantiation\" && _parent9.type !== \"GenericTypeAnnotation\" && _parent9.type !== \"TSTypeReference\" && _parent9.type !== \"TSTypeAssertion\" && _parent9.type !== \"TupleTypeAnnotation\" && _parent9.type !== \"TSTupleType\" && !(_parent9.type === \"FunctionTypeParam\" && !_parent9.name) && !((_parent9.type === \"TypeAlias\" || _parent9.type === \"VariableDeclarator\" || _parent9.type === \"TSTypeAliasDeclaration\") && hasLeadingOwnLineComment$1(options.originalText, n, options)); // {\n          //   a: string\n          // } | null | void\n          // should be inlined and not be printed in the multi-line variant\n\n          var shouldHug = shouldHugType(n); // We want to align the children but without its comment, so it looks like\n          // | child1\n          // // comment\n          // | child2\n\n          var _printed4 = path.map(function (typePath) {\n            var printedType = typePath.call(print);\n\n            if (!shouldHug) {\n              printedType = align$1(2, printedType);\n            }\n\n            return comments.printComments(typePath, function () {\n              return printedType;\n            }, options);\n          }, \"types\");\n\n          if (shouldHug) {\n            return join$9(\" | \", _printed4);\n          }\n\n          var shouldAddStartLine = shouldIndent && !hasLeadingOwnLineComment$1(options.originalText, n, options);\n          var code = concat$d([ifBreak$6(concat$d([shouldAddStartLine ? line$7 : \"\", \"| \"])), join$9(concat$d([line$7, \"| \"]), _printed4)]);\n\n          if (needsParens_1(path, options)) {\n            return group$b(concat$d([indent$7(code), softline$6]));\n          }\n\n          if (_parent9.type === \"TupleTypeAnnotation\" && _parent9.types.length > 1 || _parent9.type === \"TSTupleType\" && _parent9.elementTypes.length > 1) {\n            return group$b(concat$d([indent$7(concat$d([ifBreak$6(concat$d([\"(\", softline$6])), code])), softline$6, ifBreak$6(\")\")]));\n          }\n\n          return group$b(shouldIndent ? indent$7(code) : code);\n        }\n\n      case \"NullableTypeAnnotation\":\n        return concat$d([\"?\", path.call(print, \"typeAnnotation\")]);\n\n      case \"TSNullKeyword\":\n      case \"NullLiteralTypeAnnotation\":\n        return \"null\";\n\n      case \"ThisTypeAnnotation\":\n        return \"this\";\n\n      case \"NumberTypeAnnotation\":\n        return \"number\";\n\n      case \"ObjectTypeCallProperty\":\n        if (n.static) {\n          parts.push(\"static \");\n        }\n\n        parts.push(path.call(print, \"value\"));\n        return concat$d(parts);\n\n      case \"ObjectTypeIndexer\":\n        {\n          var _variance = getFlowVariance$1(n);\n\n          return concat$d([_variance || \"\", \"[\", path.call(print, \"id\"), n.id ? \": \" : \"\", path.call(print, \"key\"), \"]: \", path.call(print, \"value\")]);\n        }\n\n      case \"ObjectTypeProperty\":\n        {\n          var _variance2 = getFlowVariance$1(n);\n\n          var modifier = \"\";\n\n          if (n.proto) {\n            modifier = \"proto \";\n          } else if (n.static) {\n            modifier = \"static \";\n          }\n\n          return concat$d([modifier, isGetterOrSetter$1(n) ? n.kind + \" \" : \"\", _variance2 || \"\", printPropertyKey(path, options, print), printOptionalToken(path), isFunctionNotation$1(n, options) ? \"\" : \": \", path.call(print, \"value\")]);\n        }\n\n      case \"QualifiedTypeIdentifier\":\n        return concat$d([path.call(print, \"qualification\"), \".\", path.call(print, \"id\")]);\n\n      case \"StringLiteralTypeAnnotation\":\n        return nodeStr(n, options);\n\n      case \"NumberLiteralTypeAnnotation\":\n        assert.strictEqual(_typeof(n.value), \"number\");\n\n        if (n.extra != null) {\n          return printNumber$2(n.extra.raw);\n        }\n\n        return printNumber$2(n.raw);\n\n      case \"StringTypeAnnotation\":\n        return \"string\";\n\n      case \"DeclareTypeAlias\":\n      case \"TypeAlias\":\n        {\n          if (n.type === \"DeclareTypeAlias\" || n.declare) {\n            parts.push(\"declare \");\n          }\n\n          var _printed5 = printAssignmentRight(n.id, n.right, path.call(print, \"right\"), options);\n\n          parts.push(\"type \", path.call(print, \"id\"), path.call(print, \"typeParameters\"), \" =\", _printed5, semi);\n          return group$b(concat$d(parts));\n        }\n\n      case \"TypeCastExpression\":\n        {\n          var value = path.getValue(); // Flow supports a comment syntax for specifying type annotations: https://flow.org/en/docs/types/comments/.\n          // Unfortunately, its parser doesn't differentiate between comment annotations and regular\n          // annotations when producing an AST. So to preserve parentheses around type casts that use\n          // the comment syntax, we need to hackily read the source itself to see if the code contains\n          // a type annotation comment.\n          //\n          // Note that we're able to use the normal whitespace regex here because the Flow parser has\n          // already deemed this AST node to be a type cast. Only the Babel parser needs the\n          // non-line-break whitespace regex, which is why hasFlowShorthandAnnotationComment() is\n          // implemented differently.\n\n          var commentSyntax = value && value.typeAnnotation && value.typeAnnotation.range && options.originalText.substring(value.typeAnnotation.range[0]).match(/^\\/\\*\\s*:/);\n          return concat$d([\"(\", path.call(print, \"expression\"), commentSyntax ? \" /*\" : \"\", \": \", path.call(print, \"typeAnnotation\"), commentSyntax ? \" */\" : \"\", \")\"]);\n        }\n\n      case \"TypeParameterDeclaration\":\n      case \"TypeParameterInstantiation\":\n        {\n          var _value = path.getValue();\n\n          var commentStart = _value.range ? options.originalText.substring(0, _value.range[0]).lastIndexOf(\"/*\") : -1; // As noted in the TypeCastExpression comments above, we're able to use a normal whitespace regex here\n          // because we know for sure that this is a type definition.\n\n          var _commentSyntax = commentStart >= 0 && options.originalText.substring(commentStart).match(/^\\/\\*\\s*::/);\n\n          if (_commentSyntax) {\n            return concat$d([\"/*:: \", printTypeParameters(path, options, print, \"params\"), \" */\"]);\n          }\n\n          return printTypeParameters(path, options, print, \"params\");\n        }\n\n      case \"TSTypeParameterDeclaration\":\n      case \"TSTypeParameterInstantiation\":\n        return printTypeParameters(path, options, print, \"params\");\n\n      case \"TSTypeParameter\":\n      case \"TypeParameter\":\n        {\n          var _parent10 = path.getParentNode();\n\n          if (_parent10.type === \"TSMappedType\") {\n            parts.push(\"[\", path.call(print, \"name\"));\n\n            if (n.constraint) {\n              parts.push(\" in \", path.call(print, \"constraint\"));\n            }\n\n            parts.push(\"]\");\n            return concat$d(parts);\n          }\n\n          var _variance3 = getFlowVariance$1(n);\n\n          if (_variance3) {\n            parts.push(_variance3);\n          }\n\n          parts.push(path.call(print, \"name\"));\n\n          if (n.bound) {\n            parts.push(\": \");\n            parts.push(path.call(print, \"bound\"));\n          }\n\n          if (n.constraint) {\n            parts.push(\" extends \", path.call(print, \"constraint\"));\n          }\n\n          if (n[\"default\"]) {\n            parts.push(\" = \", path.call(print, \"default\"));\n          } // Keep comma if the file extension is .tsx and\n          // has one type parameter that isn't extend with any types.\n          // Because, otherwise formatted result will be invalid as tsx.\n\n\n          var _grandParent = path.getNode(2);\n\n          if (_parent10.params && _parent10.params.length === 1 && isTSXFile$1(options) && !n.constraint && _grandParent.type === \"ArrowFunctionExpression\") {\n            parts.push(\",\");\n          }\n\n          return concat$d(parts);\n        }\n\n      case \"TypeofTypeAnnotation\":\n        return concat$d([\"typeof \", path.call(print, \"argument\")]);\n\n      case \"VoidTypeAnnotation\":\n        return \"void\";\n\n      case \"InferredPredicate\":\n        return \"%checks\";\n      // Unhandled types below. If encountered, nodes of these types should\n      // be either left alone or desugared into AST types that are fully\n      // supported by the pretty-printer.\n\n      case \"DeclaredPredicate\":\n        return concat$d([\"%checks(\", path.call(print, \"value\"), \")\"]);\n\n      case \"TSAbstractKeyword\":\n        return \"abstract\";\n\n      case \"TSAnyKeyword\":\n        return \"any\";\n\n      case \"TSAsyncKeyword\":\n        return \"async\";\n\n      case \"TSBooleanKeyword\":\n        return \"boolean\";\n\n      case \"TSBigIntKeyword\":\n        return \"bigint\";\n\n      case \"TSConstKeyword\":\n        return \"const\";\n\n      case \"TSDeclareKeyword\":\n        return \"declare\";\n\n      case \"TSExportKeyword\":\n        return \"export\";\n\n      case \"TSNeverKeyword\":\n        return \"never\";\n\n      case \"TSNumberKeyword\":\n        return \"number\";\n\n      case \"TSObjectKeyword\":\n        return \"object\";\n\n      case \"TSProtectedKeyword\":\n        return \"protected\";\n\n      case \"TSPrivateKeyword\":\n        return \"private\";\n\n      case \"TSPublicKeyword\":\n        return \"public\";\n\n      case \"TSReadonlyKeyword\":\n        return \"readonly\";\n\n      case \"TSSymbolKeyword\":\n        return \"symbol\";\n\n      case \"TSStaticKeyword\":\n        return \"static\";\n\n      case \"TSStringKeyword\":\n        return \"string\";\n\n      case \"TSUndefinedKeyword\":\n        return \"undefined\";\n\n      case \"TSUnknownKeyword\":\n        return \"unknown\";\n\n      case \"TSVoidKeyword\":\n        return \"void\";\n\n      case \"TSAsExpression\":\n        return concat$d([path.call(print, \"expression\"), \" as \", path.call(print, \"typeAnnotation\")]);\n\n      case \"TSArrayType\":\n        return concat$d([path.call(print, \"elementType\"), \"[]\"]);\n\n      case \"TSPropertySignature\":\n        {\n          if (n.export) {\n            parts.push(\"export \");\n          }\n\n          if (n.accessibility) {\n            parts.push(n.accessibility + \" \");\n          }\n\n          if (n.static) {\n            parts.push(\"static \");\n          }\n\n          if (n.readonly) {\n            parts.push(\"readonly \");\n          }\n\n          parts.push(printPropertyKey(path, options, print), printOptionalToken(path));\n\n          if (n.typeAnnotation) {\n            parts.push(\": \");\n            parts.push(path.call(print, \"typeAnnotation\"));\n          } // This isn't valid semantically, but it's in the AST so we can print it.\n\n\n          if (n.initializer) {\n            parts.push(\" = \", path.call(print, \"initializer\"));\n          }\n\n          return concat$d(parts);\n        }\n\n      case \"TSParameterProperty\":\n        if (n.accessibility) {\n          parts.push(n.accessibility + \" \");\n        }\n\n        if (n.export) {\n          parts.push(\"export \");\n        }\n\n        if (n.static) {\n          parts.push(\"static \");\n        }\n\n        if (n.readonly) {\n          parts.push(\"readonly \");\n        }\n\n        parts.push(path.call(print, \"parameter\"));\n        return concat$d(parts);\n\n      case \"TSTypeReference\":\n        return concat$d([path.call(print, \"typeName\"), printTypeParameters(path, options, print, \"typeParameters\")]);\n\n      case \"TSTypeQuery\":\n        return concat$d([\"typeof \", path.call(print, \"exprName\")]);\n\n      case \"TSIndexSignature\":\n        {\n          var _parent11 = path.getParentNode();\n\n          return concat$d([n.export ? \"export \" : \"\", n.accessibility ? concat$d([n.accessibility, \" \"]) : \"\", n.static ? \"static \" : \"\", n.readonly ? \"readonly \" : \"\", \"[\", n.parameters ? concat$d(path.map(print, \"parameters\")) : \"\", \"]: \", path.call(print, \"typeAnnotation\"), _parent11.type === \"ClassBody\" ? semi : \"\"]);\n        }\n\n      case \"TSTypePredicate\":\n        return concat$d([n.asserts ? \"asserts \" : \"\", path.call(print, \"parameterName\"), n.typeAnnotation ? concat$d([\" is \", path.call(print, \"typeAnnotation\")]) : \"\"]);\n\n      case \"TSNonNullExpression\":\n        return concat$d([path.call(print, \"expression\"), \"!\"]);\n\n      case \"TSThisType\":\n        return \"this\";\n\n      case \"TSImportType\":\n        return concat$d([!n.isTypeOf ? \"\" : \"typeof \", \"import(\", path.call(print, \"parameter\"), \")\", !n.qualifier ? \"\" : concat$d([\".\", path.call(print, \"qualifier\")]), printTypeParameters(path, options, print, \"typeParameters\")]);\n\n      case \"TSLiteralType\":\n        return path.call(print, \"literal\");\n\n      case \"TSIndexedAccessType\":\n        return concat$d([path.call(print, \"objectType\"), \"[\", path.call(print, \"indexType\"), \"]\"]);\n\n      case \"TSConstructSignatureDeclaration\":\n      case \"TSCallSignatureDeclaration\":\n      case \"TSConstructorType\":\n        {\n          if (n.type !== \"TSCallSignatureDeclaration\") {\n            parts.push(\"new \");\n          }\n\n          parts.push(group$b(printFunctionParams(path, print, options,\n          /* expandArg */\n          false,\n          /* printTypeParams */\n          true)));\n\n          if (n.returnType) {\n            var isType = n.type === \"TSConstructorType\";\n            parts.push(isType ? \" => \" : \": \", path.call(print, \"returnType\"));\n          }\n\n          return concat$d(parts);\n        }\n\n      case \"TSTypeOperator\":\n        return concat$d([n.operator, \" \", path.call(print, \"typeAnnotation\")]);\n\n      case \"TSMappedType\":\n        {\n          var _shouldBreak3 = hasNewlineInRange$2(options.originalText, options.locStart(n), options.locEnd(n));\n\n          return group$b(concat$d([\"{\", indent$7(concat$d([options.bracketSpacing ? line$7 : softline$6, n.readonly ? concat$d([getTypeScriptMappedTypeModifier$1(n.readonly, \"readonly\"), \" \"]) : \"\", printTypeScriptModifiers(path, options, print), path.call(print, \"typeParameter\"), n.optional ? getTypeScriptMappedTypeModifier$1(n.optional, \"?\") : \"\", \": \", path.call(print, \"typeAnnotation\"), ifBreak$6(semi, \"\")])), comments.printDanglingComments(path, options,\n          /* sameIndent */\n          true), options.bracketSpacing ? line$7 : softline$6, \"}\"]), {\n            shouldBreak: _shouldBreak3\n          });\n        }\n\n      case \"TSMethodSignature\":\n        parts.push(n.accessibility ? concat$d([n.accessibility, \" \"]) : \"\", n.export ? \"export \" : \"\", n.static ? \"static \" : \"\", n.readonly ? \"readonly \" : \"\", n.computed ? \"[\" : \"\", path.call(print, \"key\"), n.computed ? \"]\" : \"\", printOptionalToken(path), printFunctionParams(path, print, options,\n        /* expandArg */\n        false,\n        /* printTypeParams */\n        true));\n\n        if (n.returnType) {\n          parts.push(\": \", path.call(print, \"returnType\"));\n        }\n\n        return group$b(concat$d(parts));\n\n      case \"TSNamespaceExportDeclaration\":\n        parts.push(\"export as namespace \", path.call(print, \"id\"));\n\n        if (options.semi) {\n          parts.push(\";\");\n        }\n\n        return group$b(concat$d(parts));\n\n      case \"TSEnumDeclaration\":\n        if (n.declare) {\n          parts.push(\"declare \");\n        }\n\n        if (n.modifiers) {\n          parts.push(printTypeScriptModifiers(path, options, print));\n        }\n\n        if (n.const) {\n          parts.push(\"const \");\n        }\n\n        parts.push(\"enum \", path.call(print, \"id\"), \" \");\n\n        if (n.members.length === 0) {\n          parts.push(group$b(concat$d([\"{\", comments.printDanglingComments(path, options), softline$6, \"}\"])));\n        } else {\n          parts.push(group$b(concat$d([\"{\", indent$7(concat$d([hardline$9, printArrayItems(path, options, \"members\", print), shouldPrintComma$1(options, \"es5\") ? \",\" : \"\"])), comments.printDanglingComments(path, options,\n          /* sameIndent */\n          true), hardline$9, \"}\"])));\n        }\n\n        return concat$d(parts);\n\n      case \"TSEnumMember\":\n        parts.push(path.call(print, \"id\"));\n\n        if (n.initializer) {\n          parts.push(\" = \", path.call(print, \"initializer\"));\n        }\n\n        return concat$d(parts);\n\n      case \"TSImportEqualsDeclaration\":\n        if (n.isExport) {\n          parts.push(\"export \");\n        }\n\n        parts.push(\"import \", path.call(print, \"id\"), \" = \", path.call(print, \"moduleReference\"));\n\n        if (options.semi) {\n          parts.push(\";\");\n        }\n\n        return group$b(concat$d(parts));\n\n      case \"TSExternalModuleReference\":\n        return concat$d([\"require(\", path.call(print, \"expression\"), \")\"]);\n\n      case \"TSModuleDeclaration\":\n        {\n          var _parent12 = path.getParentNode();\n\n          var isExternalModule = isLiteral$1(n.id);\n          var parentIsDeclaration = _parent12.type === \"TSModuleDeclaration\";\n          var bodyIsDeclaration = n.body && n.body.type === \"TSModuleDeclaration\";\n\n          if (parentIsDeclaration) {\n            parts.push(\".\");\n          } else {\n            if (n.declare) {\n              parts.push(\"declare \");\n            }\n\n            parts.push(printTypeScriptModifiers(path, options, print));\n            var textBetweenNodeAndItsId = options.originalText.slice(options.locStart(n), options.locStart(n.id)); // Global declaration looks like this:\n            // (declare)? global { ... }\n\n            var isGlobalDeclaration = n.id.type === \"Identifier\" && n.id.name === \"global\" && !/namespace|module/.test(textBetweenNodeAndItsId);\n\n            if (!isGlobalDeclaration) {\n              parts.push(isExternalModule || /(^|\\s)module(\\s|$)/.test(textBetweenNodeAndItsId) ? \"module \" : \"namespace \");\n            }\n          }\n\n          parts.push(path.call(print, \"id\"));\n\n          if (bodyIsDeclaration) {\n            parts.push(path.call(print, \"body\"));\n          } else if (n.body) {\n            parts.push(\" \", group$b(path.call(print, \"body\")));\n          } else {\n            parts.push(semi);\n          }\n\n          return concat$d(parts);\n        }\n\n      case \"PrivateName\":\n        return concat$d([\"#\", path.call(print, \"id\")]);\n\n      case \"TSConditionalType\":\n        return printTernaryOperator(path, options, print, {\n          beforeParts: function beforeParts() {\n            return [path.call(print, \"checkType\"), \" \", \"extends\", \" \", path.call(print, \"extendsType\")];\n          },\n          afterParts: function afterParts() {\n            return [];\n          },\n          shouldCheckJsx: false,\n          conditionalNodeType: \"TSConditionalType\",\n          consequentNodePropertyName: \"trueType\",\n          alternateNodePropertyName: \"falseType\",\n          testNodePropertyName: \"checkType\",\n          breakNested: true\n        });\n\n      case \"TSInferType\":\n        return concat$d([\"infer\", \" \", path.call(print, \"typeParameter\")]);\n\n      case \"InterpreterDirective\":\n        parts.push(\"#!\", n.value, hardline$9);\n\n        if (isNextLineEmpty$4(options.originalText, n, options)) {\n          parts.push(hardline$9);\n        }\n\n        return concat$d(parts);\n\n      case \"NGRoot\":\n        return concat$d([].concat(path.call(print, \"node\"), !n.node.comments || n.node.comments.length === 0 ? [] : concat$d([\" //\", n.node.comments[0].value.trimRight()])));\n\n      case \"NGChainedExpression\":\n        return group$b(join$9(concat$d([\";\", line$7]), path.map(function (childPath) {\n          return hasNgSideEffect$1(childPath) ? print(childPath) : concat$d([\"(\", print(childPath), \")\"]);\n        }, \"expressions\")));\n\n      case \"NGEmptyExpression\":\n        return \"\";\n\n      case \"NGQuotedExpression\":\n        return concat$d([n.prefix, \":\", n.value]);\n\n      case \"NGMicrosyntax\":\n        return concat$d(path.map(function (childPath, index) {\n          return concat$d([index === 0 ? \"\" : isNgForOf$1(childPath.getValue(), index, n) ? \" \" : concat$d([\";\", line$7]), print(childPath)]);\n        }, \"body\"));\n\n      case \"NGMicrosyntaxKey\":\n        return /^[a-z_$][a-z0-9_$]*(-[a-z_$][a-z0-9_$])*$/i.test(n.name) ? n.name : JSON.stringify(n.name);\n\n      case \"NGMicrosyntaxExpression\":\n        return concat$d([path.call(print, \"expression\"), n.alias === null ? \"\" : concat$d([\" as \", path.call(print, \"alias\")])]);\n\n      case \"NGMicrosyntaxKeyedExpression\":\n        {\n          var index = path.getName();\n\n          var _parentNode2 = path.getParentNode();\n\n          var shouldNotPrintColon = isNgForOf$1(n, index, _parentNode2) || (index === 1 && (n.key.name === \"then\" || n.key.name === \"else\") || index === 2 && n.key.name === \"else\" && _parentNode2.body[index - 1].type === \"NGMicrosyntaxKeyedExpression\" && _parentNode2.body[index - 1].key.name === \"then\") && _parentNode2.body[0].type === \"NGMicrosyntaxExpression\";\n          return concat$d([path.call(print, \"key\"), shouldNotPrintColon ? \" \" : \": \", path.call(print, \"expression\")]);\n        }\n\n      case \"NGMicrosyntaxLet\":\n        return concat$d([\"let \", path.call(print, \"key\"), n.value === null ? \"\" : concat$d([\" = \", path.call(print, \"value\")])]);\n\n      case \"NGMicrosyntaxAs\":\n        return concat$d([path.call(print, \"key\"), \" as \", path.call(print, \"alias\")]);\n\n      case \"ArgumentPlaceholder\":\n        return \"?\";\n\n      default:\n        /* istanbul ignore next */\n        throw new Error(\"unknown type: \" + JSON.stringify(n.type));\n    }\n  }\n\n  function printStatementSequence(path, options, print) {\n    var printed = [];\n    var bodyNode = path.getNode();\n    var isClass = bodyNode.type === \"ClassBody\";\n    path.map(function (stmtPath, i) {\n      var stmt = stmtPath.getValue(); // Just in case the AST has been modified to contain falsy\n      // \"statements,\" it's safer simply to skip them.\n\n      /* istanbul ignore if */\n\n      if (!stmt) {\n        return;\n      } // Skip printing EmptyStatement nodes to avoid leaving stray\n      // semicolons lying around.\n\n\n      if (stmt.type === \"EmptyStatement\") {\n        return;\n      }\n\n      var stmtPrinted = print(stmtPath);\n      var text = options.originalText;\n      var parts = []; // in no-semi mode, prepend statement with semicolon if it might break ASI\n      // don't prepend the only JSX element in a program with semicolon\n\n      if (!options.semi && !isClass && !isTheOnlyJSXElementInMarkdown$1(options, stmtPath) && stmtNeedsASIProtection(stmtPath, options)) {\n        if (stmt.comments && stmt.comments.some(function (comment) {\n          return comment.leading;\n        })) {\n          parts.push(print(stmtPath, {\n            needsSemi: true\n          }));\n        } else {\n          parts.push(\";\", stmtPrinted);\n        }\n      } else {\n        parts.push(stmtPrinted);\n      }\n\n      if (!options.semi && isClass) {\n        if (classPropMayCauseASIProblems$1(stmtPath)) {\n          parts.push(\";\");\n        } else if (stmt.type === \"ClassProperty\") {\n          var nextChild = bodyNode.body[i + 1];\n\n          if (classChildNeedsASIProtection$1(nextChild)) {\n            parts.push(\";\");\n          }\n        }\n      }\n\n      if (isNextLineEmpty$4(text, stmt, options) && !isLastStatement$1(stmtPath)) {\n        parts.push(hardline$9);\n      }\n\n      printed.push(concat$d(parts));\n    });\n    return join$9(hardline$9, printed);\n  }\n\n  function printPropertyKey(path, options, print) {\n    var node = path.getNode();\n\n    if (node.computed) {\n      return concat$d([\"[\", path.call(print, \"key\"), \"]\"]);\n    }\n\n    var parent = path.getParentNode();\n    var key = node.key;\n\n    if (options.quoteProps === \"consistent\" && !needsQuoteProps.has(parent)) {\n      var objectHasStringProp = (parent.properties || parent.body || parent.members).some(function (prop) {\n        return !prop.computed && prop.key && isStringLiteral$1(prop.key) && !isStringPropSafeToCoerceToIdentifier$1(prop, options);\n      });\n      needsQuoteProps.set(parent, objectHasStringProp);\n    }\n\n    if (key.type === \"Identifier\" && (options.parser === \"json\" || options.quoteProps === \"consistent\" && needsQuoteProps.get(parent))) {\n      // a -> \"a\"\n      var prop = printString$2(JSON.stringify(key.name), options);\n      return path.call(function (keyPath) {\n        return comments.printComments(keyPath, function () {\n          return prop;\n        }, options);\n      }, \"key\");\n    }\n\n    if (isStringPropSafeToCoerceToIdentifier$1(node, options) && (options.quoteProps === \"as-needed\" || options.quoteProps === \"consistent\" && !needsQuoteProps.get(parent))) {\n      // 'a' -> a\n      return path.call(function (keyPath) {\n        return comments.printComments(keyPath, function () {\n          return key.value;\n        }, options);\n      }, \"key\");\n    }\n\n    return path.call(print, \"key\");\n  }\n\n  function printMethod(path, options, print) {\n    var node = path.getNode();\n    var kind = node.kind;\n    var value = node.value || node;\n    var parts = [];\n\n    if (!kind || kind === \"init\" || kind === \"method\" || kind === \"constructor\") {\n      if (value.async) {\n        parts.push(\"async \");\n      }\n\n      if (value.generator) {\n        parts.push(\"*\");\n      }\n    } else {\n      assert.ok(kind === \"get\" || kind === \"set\");\n      parts.push(kind, \" \");\n    }\n\n    parts.push(printPropertyKey(path, options, print), node.optional || node.key.optional ? \"?\" : \"\", node === value ? printMethodInternal(path, options, print) : path.call(function (path) {\n      return printMethodInternal(path, options, print);\n    }, \"value\"));\n    return concat$d(parts);\n  }\n\n  function printMethodInternal(path, options, print) {\n    var parts = [printFunctionTypeParameters(path, options, print), group$b(concat$d([printFunctionParams(path, print, options), printReturnType(path, print, options)]))];\n\n    if (path.getNode().body) {\n      parts.push(\" \", path.call(print, \"body\"));\n    } else {\n      parts.push(options.semi ? \";\" : \"\");\n    }\n\n    return concat$d(parts);\n  }\n\n  function couldGroupArg(arg) {\n    return arg.type === \"ObjectExpression\" && (arg.properties.length > 0 || arg.comments) || arg.type === \"ArrayExpression\" && (arg.elements.length > 0 || arg.comments) || arg.type === \"TSTypeAssertion\" && couldGroupArg(arg.expression) || arg.type === \"TSAsExpression\" && couldGroupArg(arg.expression) || arg.type === \"FunctionExpression\" || arg.type === \"ArrowFunctionExpression\" && ( // we want to avoid breaking inside composite return types but not simple keywords\n    // https://github.com/prettier/prettier/issues/4070\n    // export class Thing implements OtherThing {\n    //   do: (type: Type) => Provider<Prop> = memoize(\n    //     (type: ObjectType): Provider<Opts> => {}\n    //   );\n    // }\n    // https://github.com/prettier/prettier/issues/6099\n    // app.get(\"/\", (req, res): void => {\n    //   res.send(\"Hello World!\");\n    // });\n    !arg.returnType || !arg.returnType.typeAnnotation || arg.returnType.typeAnnotation.type !== \"TSTypeReference\") && (arg.body.type === \"BlockStatement\" || arg.body.type === \"ArrowFunctionExpression\" || arg.body.type === \"ObjectExpression\" || arg.body.type === \"ArrayExpression\" || arg.body.type === \"CallExpression\" || arg.body.type === \"OptionalCallExpression\" || arg.body.type === \"ConditionalExpression\" || isJSXNode$1(arg.body));\n  }\n\n  function shouldGroupLastArg(args) {\n    var lastArg = getLast$2(args);\n    var penultimateArg = getPenultimate$1(args);\n    return !hasLeadingComment$3(lastArg) && !hasTrailingComment$1(lastArg) && couldGroupArg(lastArg) && ( // If the last two arguments are of the same type,\n    // disable last element expansion.\n    !penultimateArg || penultimateArg.type !== lastArg.type);\n  }\n\n  function shouldGroupFirstArg(args) {\n    if (args.length !== 2) {\n      return false;\n    }\n\n    var firstArg = args[0];\n    var secondArg = args[1];\n    return (!firstArg.comments || !firstArg.comments.length) && (firstArg.type === \"FunctionExpression\" || firstArg.type === \"ArrowFunctionExpression\" && firstArg.body.type === \"BlockStatement\") && secondArg.type !== \"FunctionExpression\" && secondArg.type !== \"ArrowFunctionExpression\" && secondArg.type !== \"ConditionalExpression\" && !couldGroupArg(secondArg);\n  }\n\n  function printJestEachTemplateLiteral(node, expressions, options) {\n    /**\n     * a    | b    | expected\n     * ${1} | ${1} | ${2}\n     * ${1} | ${2} | ${3}\n     * ${2} | ${1} | ${3}\n     */\n    var headerNames = node.quasis[0].value.raw.trim().split(/\\s*\\|\\s*/);\n\n    if (headerNames.length > 1 || headerNames.some(function (headerName) {\n      return headerName.length !== 0;\n    })) {\n      var parts = [];\n      var stringifiedExpressions = expressions.map(function (doc) {\n        return \"${\" + printDocToString$1(doc, Object.assign({}, options, {\n          printWidth: Infinity,\n          endOfLine: \"lf\"\n        })).formatted + \"}\";\n      });\n      var tableBody = [{\n        hasLineBreak: false,\n        cells: []\n      }];\n\n      for (var i = 1; i < node.quasis.length; i++) {\n        var row = tableBody[tableBody.length - 1];\n        var correspondingExpression = stringifiedExpressions[i - 1];\n        row.cells.push(correspondingExpression);\n\n        if (correspondingExpression.indexOf(\"\\n\") !== -1) {\n          row.hasLineBreak = true;\n        }\n\n        if (node.quasis[i].value.raw.indexOf(\"\\n\") !== -1) {\n          tableBody.push({\n            hasLineBreak: false,\n            cells: []\n          });\n        }\n      }\n\n      var maxColumnCount = tableBody.reduce(function (maxColumnCount, row) {\n        return Math.max(maxColumnCount, row.cells.length);\n      }, headerNames.length);\n      var maxColumnWidths = Array.from(new Array(maxColumnCount), function () {\n        return 0;\n      });\n      var table = [{\n        cells: headerNames\n      }].concat(tableBody.filter(function (row) {\n        return row.cells.length !== 0;\n      }));\n      table.filter(function (row) {\n        return !row.hasLineBreak;\n      }).forEach(function (row) {\n        row.cells.forEach(function (cell, index) {\n          maxColumnWidths[index] = Math.max(maxColumnWidths[index], getStringWidth$2(cell));\n        });\n      });\n      parts.push(lineSuffixBoundary$1, \"`\", indent$7(concat$d([hardline$9, join$9(hardline$9, table.map(function (row) {\n        return join$9(\" | \", row.cells.map(function (cell, index) {\n          return row.hasLineBreak ? cell : cell + \" \".repeat(maxColumnWidths[index] - getStringWidth$2(cell));\n        }));\n      }))])), hardline$9, \"`\");\n      return concat$d(parts);\n    }\n  }\n\n  function printArgumentsList(path, options, print) {\n    var node = path.getValue();\n    var args = node.arguments;\n\n    if (args.length === 0) {\n      return concat$d([\"(\", comments.printDanglingComments(path, options,\n      /* sameIndent */\n      true), \")\"]);\n    } // useEffect(() => { ... }, [foo, bar, baz])\n\n\n    if (args.length === 2 && args[0].type === \"ArrowFunctionExpression\" && args[0].params.length === 0 && args[0].body.type === \"BlockStatement\" && args[1].type === \"ArrayExpression\" && !args.find(function (arg) {\n      return arg.comments;\n    })) {\n      return concat$d([\"(\", path.call(print, \"arguments\", 0), \", \", path.call(print, \"arguments\", 1), \")\"]);\n    } // func(\n    //   ({\n    //     a,\n    //     b\n    //   }) => {}\n    // );\n\n\n    function shouldBreakForArrowFunctionInArguments(arg, argPath) {\n      if (!arg || arg.type !== \"ArrowFunctionExpression\" || !arg.body || arg.body.type !== \"BlockStatement\" || !arg.params || arg.params.length < 1) {\n        return false;\n      }\n\n      var shouldBreak = false;\n      argPath.each(function (paramPath) {\n        var printed = concat$d([print(paramPath)]);\n        shouldBreak = shouldBreak || willBreak$1(printed);\n      }, \"params\");\n      return shouldBreak;\n    }\n\n    var anyArgEmptyLine = false;\n    var shouldBreakForArrowFunction = false;\n    var hasEmptyLineFollowingFirstArg = false;\n    var lastArgIndex = args.length - 1;\n    var printedArguments = path.map(function (argPath, index) {\n      var arg = argPath.getNode();\n      var parts = [print(argPath)];\n\n      if (index === lastArgIndex) ; else if (isNextLineEmpty$4(options.originalText, arg, options)) {\n        if (index === 0) {\n          hasEmptyLineFollowingFirstArg = true;\n        }\n\n        anyArgEmptyLine = true;\n        parts.push(\",\", hardline$9, hardline$9);\n      } else {\n        parts.push(\",\", line$7);\n      }\n\n      shouldBreakForArrowFunction = shouldBreakForArrowFunctionInArguments(arg, argPath);\n      return concat$d(parts);\n    }, \"arguments\");\n    var maybeTrailingComma = // Dynamic imports cannot have trailing commas\n    !(node.callee && node.callee.type === \"Import\") && shouldPrintComma$1(options, \"all\") ? \",\" : \"\";\n\n    function allArgsBrokenOut() {\n      return group$b(concat$d([\"(\", indent$7(concat$d([line$7, concat$d(printedArguments)])), maybeTrailingComma, line$7, \")\"]), {\n        shouldBreak: true\n      });\n    }\n\n    if (isFunctionCompositionArgs$1(args)) {\n      return allArgsBrokenOut();\n    }\n\n    var shouldGroupFirst = shouldGroupFirstArg(args);\n    var shouldGroupLast = shouldGroupLastArg(args);\n\n    if (shouldGroupFirst || shouldGroupLast) {\n      var shouldBreak = (shouldGroupFirst ? printedArguments.slice(1).some(willBreak$1) : printedArguments.slice(0, -1).some(willBreak$1)) || anyArgEmptyLine || shouldBreakForArrowFunction; // We want to print the last argument with a special flag\n\n      var printedExpanded;\n      var i = 0;\n      path.each(function (argPath) {\n        if (shouldGroupFirst && i === 0) {\n          printedExpanded = [concat$d([argPath.call(function (p) {\n            return print(p, {\n              expandFirstArg: true\n            });\n          }), printedArguments.length > 1 ? \",\" : \"\", hasEmptyLineFollowingFirstArg ? hardline$9 : line$7, hasEmptyLineFollowingFirstArg ? hardline$9 : \"\"])].concat(printedArguments.slice(1));\n        }\n\n        if (shouldGroupLast && i === args.length - 1) {\n          printedExpanded = printedArguments.slice(0, -1).concat(argPath.call(function (p) {\n            return print(p, {\n              expandLastArg: true\n            });\n          }));\n        }\n\n        i++;\n      }, \"arguments\");\n      var somePrintedArgumentsWillBreak = printedArguments.some(willBreak$1);\n      var simpleConcat = concat$d([\"(\", concat$d(printedExpanded), \")\"]);\n      return concat$d([somePrintedArgumentsWillBreak ? breakParent$3 : \"\", conditionalGroup$1([!somePrintedArgumentsWillBreak && !node.typeArguments && !node.typeParameters ? simpleConcat : ifBreak$6(allArgsBrokenOut(), simpleConcat), shouldGroupFirst ? concat$d([\"(\", group$b(printedExpanded[0], {\n        shouldBreak: true\n      }), concat$d(printedExpanded.slice(1)), \")\"]) : concat$d([\"(\", concat$d(printedArguments.slice(0, -1)), group$b(getLast$2(printedExpanded), {\n        shouldBreak: true\n      }), \")\"]), allArgsBrokenOut()], {\n        shouldBreak: shouldBreak\n      })]);\n    }\n\n    var contents = concat$d([\"(\", indent$7(concat$d([softline$6, concat$d(printedArguments)])), ifBreak$6(maybeTrailingComma), softline$6, \")\"]);\n\n    if (isLongCurriedCallExpression$1(path)) {\n      // By not wrapping the arguments in a group, the printer prioritizes\n      // breaking up these arguments rather than the args of the parent call.\n      return contents;\n    }\n\n    return group$b(contents, {\n      shouldBreak: printedArguments.some(willBreak$1) || anyArgEmptyLine\n    });\n  }\n\n  function printTypeAnnotation(path, options, print) {\n    var node = path.getValue();\n\n    if (!node.typeAnnotation) {\n      return \"\";\n    }\n\n    var parentNode = path.getParentNode();\n    var isDefinite = node.definite || parentNode && parentNode.type === \"VariableDeclarator\" && parentNode.definite;\n    var isFunctionDeclarationIdentifier = parentNode.type === \"DeclareFunction\" && parentNode.id === node;\n\n    if (isFlowAnnotationComment$1(options.originalText, node.typeAnnotation, options)) {\n      return concat$d([\" /*: \", path.call(print, \"typeAnnotation\"), \" */\"]);\n    }\n\n    return concat$d([isFunctionDeclarationIdentifier ? \"\" : isDefinite ? \"!: \" : \": \", path.call(print, \"typeAnnotation\")]);\n  }\n\n  function printFunctionTypeParameters(path, options, print) {\n    var fun = path.getValue();\n\n    if (fun.typeArguments) {\n      return path.call(print, \"typeArguments\");\n    }\n\n    if (fun.typeParameters) {\n      return path.call(print, \"typeParameters\");\n    }\n\n    return \"\";\n  }\n\n  function printFunctionParams(path, print, options, expandArg, printTypeParams) {\n    var fun = path.getValue();\n    var parent = path.getParentNode();\n    var paramsField = fun.parameters ? \"parameters\" : \"params\";\n    var isParametersInTestCall = isTestCall$1(parent);\n    var shouldHugParameters = shouldHugArguments(fun);\n    var shouldExpandParameters = expandArg && !(fun[paramsField] && fun[paramsField].some(function (n) {\n      return n.comments;\n    }));\n    var typeParams = printTypeParams ? printFunctionTypeParameters(path, options, print) : \"\";\n    var printed = [];\n\n    if (fun[paramsField]) {\n      var lastArgIndex = fun[paramsField].length - 1;\n      printed = path.map(function (childPath, index) {\n        var parts = [];\n        var param = childPath.getValue();\n        parts.push(print(childPath));\n\n        if (index === lastArgIndex) {\n          if (fun.rest) {\n            parts.push(\",\", line$7);\n          }\n        } else if (isParametersInTestCall || shouldHugParameters || shouldExpandParameters) {\n          parts.push(\", \");\n        } else if (isNextLineEmpty$4(options.originalText, param, options)) {\n          parts.push(\",\", hardline$9, hardline$9);\n        } else {\n          parts.push(\",\", line$7);\n        }\n\n        return concat$d(parts);\n      }, paramsField);\n    }\n\n    if (fun.rest) {\n      printed.push(concat$d([\"...\", path.call(print, \"rest\")]));\n    }\n\n    if (printed.length === 0) {\n      return concat$d([typeParams, \"(\", comments.printDanglingComments(path, options,\n      /* sameIndent */\n      true, function (comment) {\n        return getNextNonSpaceNonCommentCharacter$1(options.originalText, comment, options.locEnd) === \")\";\n      }), \")\"]);\n    }\n\n    var lastParam = getLast$2(fun[paramsField]); // If the parent is a call with the first/last argument expansion and this is the\n    // params of the first/last argument, we don't want the arguments to break and instead\n    // want the whole expression to be on a new line.\n    //\n    // Good:                 Bad:\n    //   verylongcall(         verylongcall((\n    //     (a, b) => {           a,\n    //     }                     b,\n    //   })                    ) => {\n    //                         })\n\n    if (shouldExpandParameters) {\n      return group$b(concat$d([removeLines$2(typeParams), \"(\", concat$d(printed.map(removeLines$2)), \")\"]));\n    } // Single object destructuring should hug\n    //\n    // function({\n    //   a,\n    //   b,\n    //   c\n    // }) {}\n\n\n    var hasNotParameterDecorator = fun[paramsField].every(function (param) {\n      return !param.decorators;\n    });\n\n    if (shouldHugParameters && hasNotParameterDecorator) {\n      return concat$d([typeParams, \"(\", concat$d(printed), \")\"]);\n    } // don't break in specs, eg; `it(\"should maintain parens around done even when long\", (done) => {})`\n\n\n    if (isParametersInTestCall) {\n      return concat$d([typeParams, \"(\", concat$d(printed), \")\"]);\n    }\n\n    var isFlowShorthandWithOneArg = (isObjectTypePropertyAFunction$1(parent, options) || isTypeAnnotationAFunction$1(parent, options) || parent.type === \"TypeAlias\" || parent.type === \"UnionTypeAnnotation\" || parent.type === \"TSUnionType\" || parent.type === \"IntersectionTypeAnnotation\" || parent.type === \"FunctionTypeAnnotation\" && parent.returnType === fun) && fun[paramsField].length === 1 && fun[paramsField][0].name === null && fun[paramsField][0].typeAnnotation && fun.typeParameters === null && isSimpleFlowType$1(fun[paramsField][0].typeAnnotation) && !fun.rest;\n\n    if (isFlowShorthandWithOneArg) {\n      if (options.arrowParens === \"always\") {\n        return concat$d([\"(\", concat$d(printed), \")\"]);\n      }\n\n      return concat$d(printed);\n    }\n\n    var canHaveTrailingComma = !(lastParam && lastParam.type === \"RestElement\") && !fun.rest;\n    return concat$d([typeParams, \"(\", indent$7(concat$d([softline$6, concat$d(printed)])), ifBreak$6(canHaveTrailingComma && shouldPrintComma$1(options, \"all\") ? \",\" : \"\"), softline$6, \")\"]);\n  }\n\n  function shouldPrintParamsWithoutParens(path, options) {\n    if (options.arrowParens === \"always\") {\n      return false;\n    }\n\n    if (options.arrowParens === \"avoid\") {\n      var node = path.getValue();\n      return canPrintParamsWithoutParens(node);\n    } // Fallback default; should be unreachable\n\n\n    return false;\n  }\n\n  function canPrintParamsWithoutParens(node) {\n    return node.params.length === 1 && !node.rest && !node.typeParameters && !hasDanglingComments$1(node) && node.params[0].type === \"Identifier\" && !node.params[0].typeAnnotation && !node.params[0].comments && !node.params[0].optional && !node.predicate && !node.returnType;\n  }\n\n  function printFunctionDeclaration(path, print, options) {\n    var n = path.getValue();\n    var parts = [];\n\n    if (n.async) {\n      parts.push(\"async \");\n    }\n\n    parts.push(\"function\");\n\n    if (n.generator) {\n      parts.push(\"*\");\n    }\n\n    if (n.id) {\n      parts.push(\" \", path.call(print, \"id\"));\n    }\n\n    parts.push(printFunctionTypeParameters(path, options, print), group$b(concat$d([printFunctionParams(path, print, options), printReturnType(path, print, options)])), n.body ? \" \" : \"\", path.call(print, \"body\"));\n    return concat$d(parts);\n  }\n\n  function printReturnType(path, print, options) {\n    var n = path.getValue();\n    var returnType = path.call(print, \"returnType\");\n\n    if (n.returnType && isFlowAnnotationComment$1(options.originalText, n.returnType, options)) {\n      return concat$d([\" /*: \", returnType, \" */\"]);\n    }\n\n    var parts = [returnType]; // prepend colon to TypeScript type annotation\n\n    if (n.returnType && n.returnType.typeAnnotation) {\n      parts.unshift(\": \");\n    }\n\n    if (n.predicate) {\n      // The return type will already add the colon, but otherwise we\n      // need to do it ourselves\n      parts.push(n.returnType ? \" \" : \": \", path.call(print, \"predicate\"));\n    }\n\n    return concat$d(parts);\n  }\n\n  function printExportDeclaration(path, options, print) {\n    var decl = path.getValue();\n    var semi = options.semi ? \";\" : \"\";\n    var parts = [\"export \"];\n    var isDefault = decl[\"default\"] || decl.type === \"ExportDefaultDeclaration\";\n\n    if (isDefault) {\n      parts.push(\"default \");\n    }\n\n    parts.push(comments.printDanglingComments(path, options,\n    /* sameIndent */\n    true));\n\n    if (needsHardlineAfterDanglingComment$1(decl)) {\n      parts.push(hardline$9);\n    }\n\n    if (decl.declaration) {\n      parts.push(path.call(print, \"declaration\"));\n\n      if (isDefault && decl.declaration.type !== \"ClassDeclaration\" && decl.declaration.type !== \"FunctionDeclaration\" && decl.declaration.type !== \"TSInterfaceDeclaration\" && decl.declaration.type !== \"DeclareClass\" && decl.declaration.type !== \"DeclareFunction\" && decl.declaration.type !== \"TSDeclareFunction\") {\n        parts.push(semi);\n      }\n    } else {\n      if (decl.specifiers && decl.specifiers.length > 0) {\n        var specifiers = [];\n        var defaultSpecifiers = [];\n        var namespaceSpecifiers = [];\n        path.each(function (specifierPath) {\n          var specifierType = path.getValue().type;\n\n          if (specifierType === \"ExportSpecifier\") {\n            specifiers.push(print(specifierPath));\n          } else if (specifierType === \"ExportDefaultSpecifier\") {\n            defaultSpecifiers.push(print(specifierPath));\n          } else if (specifierType === \"ExportNamespaceSpecifier\") {\n            namespaceSpecifiers.push(concat$d([\"* as \", print(specifierPath)]));\n          }\n        }, \"specifiers\");\n        var isNamespaceFollowed = namespaceSpecifiers.length !== 0 && specifiers.length !== 0;\n        var isDefaultFollowed = defaultSpecifiers.length !== 0 && (namespaceSpecifiers.length !== 0 || specifiers.length !== 0);\n        var canBreak = specifiers.length > 1 || defaultSpecifiers.length > 0 || decl.specifiers && decl.specifiers.some(function (node) {\n          return node.comments;\n        });\n        var printed = \"\";\n\n        if (specifiers.length !== 0) {\n          if (canBreak) {\n            printed = group$b(concat$d([\"{\", indent$7(concat$d([options.bracketSpacing ? line$7 : softline$6, join$9(concat$d([\",\", line$7]), specifiers)])), ifBreak$6(shouldPrintComma$1(options) ? \",\" : \"\"), options.bracketSpacing ? line$7 : softline$6, \"}\"]));\n          } else {\n            printed = concat$d([\"{\", options.bracketSpacing ? \" \" : \"\", concat$d(specifiers), options.bracketSpacing ? \" \" : \"\", \"}\"]);\n          }\n        }\n\n        parts.push(decl.exportKind === \"type\" ? \"type \" : \"\", concat$d(defaultSpecifiers), concat$d([isDefaultFollowed ? \", \" : \"\"]), concat$d(namespaceSpecifiers), concat$d([isNamespaceFollowed ? \", \" : \"\"]), printed);\n      } else {\n        parts.push(\"{}\");\n      }\n\n      if (decl.source) {\n        parts.push(\" from \", path.call(print, \"source\"));\n      }\n\n      parts.push(semi);\n    }\n\n    return concat$d(parts);\n  }\n\n  function printFlowDeclaration(path, parts) {\n    var parentExportDecl = getParentExportDeclaration$1(path);\n\n    if (parentExportDecl) {\n      assert.strictEqual(parentExportDecl.type, \"DeclareExportDeclaration\");\n    } else {\n      // If the parent node has type DeclareExportDeclaration, then it\n      // will be responsible for printing the \"declare\" token. Otherwise\n      // it needs to be printed with this non-exported declaration node.\n      parts.unshift(\"declare \");\n    }\n\n    return concat$d(parts);\n  }\n\n  function printTypeScriptModifiers(path, options, print) {\n    var n = path.getValue();\n\n    if (!n.modifiers || !n.modifiers.length) {\n      return \"\";\n    }\n\n    return concat$d([join$9(\" \", path.map(print, \"modifiers\")), \" \"]);\n  }\n\n  function printTypeParameters(path, options, print, paramsKey) {\n    var n = path.getValue();\n\n    if (!n[paramsKey]) {\n      return \"\";\n    } // for TypeParameterDeclaration typeParameters is a single node\n\n\n    if (!Array.isArray(n[paramsKey])) {\n      return path.call(print, paramsKey);\n    }\n\n    var grandparent = path.getNode(2);\n    var greatGreatGrandParent = path.getNode(4);\n    var isParameterInTestCall = grandparent != null && isTestCall$1(grandparent);\n    var shouldInline = isParameterInTestCall || n[paramsKey].length === 0 || n[paramsKey].length === 1 && (shouldHugType(n[paramsKey][0]) || n[paramsKey][0].type === \"GenericTypeAnnotation\" && shouldHugType(n[paramsKey][0].id) || n[paramsKey][0].type === \"TSTypeReference\" && shouldHugType(n[paramsKey][0].typeName) || n[paramsKey][0].type === \"NullableTypeAnnotation\" || // See https://github.com/prettier/prettier/pull/6467 for the context.\n    greatGreatGrandParent && greatGreatGrandParent.type === \"VariableDeclarator\" && grandparent && grandparent.type === \"TSTypeAnnotation\" && n[paramsKey][0].type !== \"TSUnionType\" && n[paramsKey][0].type !== \"UnionTypeAnnotation\" && n[paramsKey][0].type !== \"TSConditionalType\" && n[paramsKey][0].type !== \"TSMappedType\");\n\n    if (shouldInline) {\n      return concat$d([\"<\", join$9(\", \", path.map(print, paramsKey)), \">\"]);\n    }\n\n    return group$b(concat$d([\"<\", indent$7(concat$d([softline$6, join$9(concat$d([\",\", line$7]), path.map(print, paramsKey))])), ifBreak$6(options.parser !== \"typescript\" && shouldPrintComma$1(options, \"all\") ? \",\" : \"\"), softline$6, \">\"]));\n  }\n\n  function printClass(path, options, print) {\n    var n = path.getValue();\n    var parts = [];\n\n    if (n.abstract) {\n      parts.push(\"abstract \");\n    }\n\n    parts.push(\"class\");\n\n    if (n.id) {\n      parts.push(\" \", path.call(print, \"id\"));\n    }\n\n    parts.push(path.call(print, \"typeParameters\"));\n    var partsGroup = [];\n\n    if (n.superClass) {\n      var printed = concat$d([\"extends \", path.call(print, \"superClass\"), path.call(print, \"superTypeParameters\")]); // Keep old behaviour of extends in same line\n      // If there is only on extends and there are not comments\n\n      if ((!n.implements || n.implements.length === 0) && (!n.superClass.comments || n.superClass.comments.length === 0)) {\n        parts.push(concat$d([\" \", path.call(function (superClass) {\n          return comments.printComments(superClass, function () {\n            return printed;\n          }, options);\n        }, \"superClass\")]));\n      } else {\n        partsGroup.push(group$b(concat$d([line$7, path.call(function (superClass) {\n          return comments.printComments(superClass, function () {\n            return printed;\n          }, options);\n        }, \"superClass\")])));\n      }\n    } else if (n.extends && n.extends.length > 0) {\n      parts.push(\" extends \", join$9(\", \", path.map(print, \"extends\")));\n    }\n\n    if (n[\"mixins\"] && n[\"mixins\"].length > 0) {\n      partsGroup.push(line$7, \"mixins \", group$b(indent$7(join$9(concat$d([\",\", line$7]), path.map(print, \"mixins\")))));\n    }\n\n    if (n[\"implements\"] && n[\"implements\"].length > 0) {\n      partsGroup.push(line$7, \"implements\", group$b(indent$7(concat$d([line$7, join$9(concat$d([\",\", line$7]), path.map(print, \"implements\"))]))));\n    }\n\n    if (partsGroup.length > 0) {\n      parts.push(group$b(indent$7(concat$d(partsGroup))));\n    }\n\n    if (n.body && n.body.comments && hasLeadingOwnLineComment$1(options.originalText, n.body, options)) {\n      parts.push(hardline$9);\n    } else {\n      parts.push(\" \");\n    }\n\n    parts.push(path.call(print, \"body\"));\n    return parts;\n  }\n\n  function printOptionalToken(path) {\n    var node = path.getValue();\n\n    if (!node.optional || // It's an optional computed method parsed by typescript-estree.\n    // \"?\" is printed in `printMethod`.\n    node.type === \"Identifier\" && node === path.getParentNode().key) {\n      return \"\";\n    }\n\n    if (node.type === \"OptionalCallExpression\" || node.type === \"OptionalMemberExpression\" && node.computed) {\n      return \"?.\";\n    }\n\n    return \"?\";\n  }\n\n  function printMemberLookup(path, options, print) {\n    var property = path.call(print, \"property\");\n    var n = path.getValue();\n    var optional = printOptionalToken(path);\n\n    if (!n.computed) {\n      return concat$d([optional, \".\", property]);\n    }\n\n    if (!n.property || isNumericLiteral$1(n.property)) {\n      return concat$d([optional, \"[\", property, \"]\"]);\n    }\n\n    return group$b(concat$d([optional, \"[\", indent$7(concat$d([softline$6, property])), softline$6, \"]\"]));\n  }\n\n  function printBindExpressionCallee(path, options, print) {\n    return concat$d([\"::\", path.call(print, \"callee\")]);\n  } // We detect calls on member expressions specially to format a\n  // common pattern better. The pattern we are looking for is this:\n  //\n  // arr\n  //   .map(x => x + 1)\n  //   .filter(x => x > 10)\n  //   .some(x => x % 2)\n  //\n  // The way it is structured in the AST is via a nested sequence of\n  // MemberExpression and CallExpression. We need to traverse the AST\n  // and make groups out of it to print it in the desired way.\n\n\n  function printMemberChain(path, options, print) {\n    // The first phase is to linearize the AST by traversing it down.\n    //\n    //   a().b()\n    // has the following AST structure:\n    //   CallExpression(MemberExpression(CallExpression(Identifier)))\n    // and we transform it into\n    //   [Identifier, CallExpression, MemberExpression, CallExpression]\n    var printedNodes = []; // Here we try to retain one typed empty line after each call expression or\n    // the first group whether it is in parentheses or not\n\n    function shouldInsertEmptyLineAfter(node) {\n      var originalText = options.originalText;\n      var nextCharIndex = getNextNonSpaceNonCommentCharacterIndex$2(originalText, node, options);\n      var nextChar = originalText.charAt(nextCharIndex); // if it is cut off by a parenthesis, we only account for one typed empty\n      // line after that parenthesis\n\n      if (nextChar == \")\") {\n        return isNextLineEmptyAfterIndex$1(originalText, nextCharIndex + 1, options);\n      }\n\n      return isNextLineEmpty$4(originalText, node, options);\n    }\n\n    function rec(path) {\n      var node = path.getValue();\n\n      if ((node.type === \"CallExpression\" || node.type === \"OptionalCallExpression\") && (isMemberish$1(node.callee) || node.callee.type === \"CallExpression\" || node.callee.type === \"OptionalCallExpression\")) {\n        printedNodes.unshift({\n          node: node,\n          printed: concat$d([comments.printComments(path, function () {\n            return concat$d([printOptionalToken(path), printFunctionTypeParameters(path, options, print), printArgumentsList(path, options, print)]);\n          }, options), shouldInsertEmptyLineAfter(node) ? hardline$9 : \"\"])\n        });\n        path.call(function (callee) {\n          return rec(callee);\n        }, \"callee\");\n      } else if (isMemberish$1(node)) {\n        printedNodes.unshift({\n          node: node,\n          needsParens: needsParens_1(path, options),\n          printed: comments.printComments(path, function () {\n            return node.type === \"OptionalMemberExpression\" || node.type === \"MemberExpression\" ? printMemberLookup(path, options, print) : printBindExpressionCallee(path, options, print);\n          }, options)\n        });\n        path.call(function (object) {\n          return rec(object);\n        }, \"object\");\n      } else if (node.type === \"TSNonNullExpression\") {\n        printedNodes.unshift({\n          node: node,\n          printed: comments.printComments(path, function () {\n            return \"!\";\n          }, options)\n        });\n        path.call(function (expression) {\n          return rec(expression);\n        }, \"expression\");\n      } else {\n        printedNodes.unshift({\n          node: node,\n          printed: path.call(print)\n        });\n      }\n    } // Note: the comments of the root node have already been printed, so we\n    // need to extract this first call without printing them as they would\n    // if handled inside of the recursive call.\n\n\n    var node = path.getValue();\n    printedNodes.unshift({\n      node: node,\n      printed: concat$d([printOptionalToken(path), printFunctionTypeParameters(path, options, print), printArgumentsList(path, options, print)])\n    });\n    path.call(function (callee) {\n      return rec(callee);\n    }, \"callee\"); // Once we have a linear list of printed nodes, we want to create groups out\n    // of it.\n    //\n    //   a().b.c().d().e\n    // will be grouped as\n    //   [\n    //     [Identifier, CallExpression],\n    //     [MemberExpression, MemberExpression, CallExpression],\n    //     [MemberExpression, CallExpression],\n    //     [MemberExpression],\n    //   ]\n    // so that we can print it as\n    //   a()\n    //     .b.c()\n    //     .d()\n    //     .e\n    // The first group is the first node followed by\n    //   - as many CallExpression as possible\n    //       < fn()()() >.something()\n    //   - as many array accessors as possible\n    //       < fn()[0][1][2] >.something()\n    //   - then, as many MemberExpression as possible but the last one\n    //       < this.items >.something()\n\n    var groups = [];\n    var currentGroup = [printedNodes[0]];\n    var i = 1;\n\n    for (; i < printedNodes.length; ++i) {\n      if (printedNodes[i].node.type === \"TSNonNullExpression\" || printedNodes[i].node.type === \"OptionalCallExpression\" || printedNodes[i].node.type === \"CallExpression\" || (printedNodes[i].node.type === \"MemberExpression\" || printedNodes[i].node.type === \"OptionalMemberExpression\") && printedNodes[i].node.computed && isNumericLiteral$1(printedNodes[i].node.property)) {\n        currentGroup.push(printedNodes[i]);\n      } else {\n        break;\n      }\n    }\n\n    if (printedNodes[0].node.type !== \"CallExpression\" && printedNodes[0].node.type !== \"OptionalCallExpression\") {\n      for (; i + 1 < printedNodes.length; ++i) {\n        if (isMemberish$1(printedNodes[i].node) && isMemberish$1(printedNodes[i + 1].node)) {\n          currentGroup.push(printedNodes[i]);\n        } else {\n          break;\n        }\n      }\n    }\n\n    groups.push(currentGroup);\n    currentGroup = []; // Then, each following group is a sequence of MemberExpression followed by\n    // a sequence of CallExpression. To compute it, we keep adding things to the\n    // group until we has seen a CallExpression in the past and reach a\n    // MemberExpression\n\n    var hasSeenCallExpression = false;\n\n    for (; i < printedNodes.length; ++i) {\n      if (hasSeenCallExpression && isMemberish$1(printedNodes[i].node)) {\n        // [0] should be appended at the end of the group instead of the\n        // beginning of the next one\n        if (printedNodes[i].node.computed && isNumericLiteral$1(printedNodes[i].node.property)) {\n          currentGroup.push(printedNodes[i]);\n          continue;\n        }\n\n        groups.push(currentGroup);\n        currentGroup = [];\n        hasSeenCallExpression = false;\n      }\n\n      if (printedNodes[i].node.type === \"CallExpression\" || printedNodes[i].node.type === \"OptionalCallExpression\") {\n        hasSeenCallExpression = true;\n      }\n\n      currentGroup.push(printedNodes[i]);\n\n      if (printedNodes[i].node.comments && printedNodes[i].node.comments.some(function (comment) {\n        return comment.trailing;\n      })) {\n        groups.push(currentGroup);\n        currentGroup = [];\n        hasSeenCallExpression = false;\n      }\n    }\n\n    if (currentGroup.length > 0) {\n      groups.push(currentGroup);\n    } // There are cases like Object.keys(), Observable.of(), _.values() where\n    // they are the subject of all the chained calls and therefore should\n    // be kept on the same line:\n    //\n    //   Object.keys(items)\n    //     .filter(x => x)\n    //     .map(x => x)\n    //\n    // In order to detect those cases, we use an heuristic: if the first\n    // node is an identifier with the name starting with a capital\n    // letter or just a sequence of _$. The rationale is that they are\n    // likely to be factories.\n\n\n    function isFactory(name) {\n      return /^[A-Z]|^[_$]+$/.test(name);\n    } // In case the Identifier is shorter than tab width, we can keep the\n    // first call in a single line, if it's an ExpressionStatement.\n    //\n    //   d3.scaleLinear()\n    //     .domain([0, 100])\n    //     .range([0, width]);\n    //\n\n\n    function isShort(name) {\n      return name.length <= options.tabWidth;\n    }\n\n    function shouldNotWrap(groups) {\n      var parent = path.getParentNode();\n      var isExpression = parent && parent.type === \"ExpressionStatement\";\n      var hasComputed = groups[1].length && groups[1][0].node.computed;\n\n      if (groups[0].length === 1) {\n        var firstNode = groups[0][0].node;\n        return firstNode.type === \"ThisExpression\" || firstNode.type === \"Identifier\" && (isFactory(firstNode.name) || isExpression && isShort(firstNode.name) || hasComputed);\n      }\n\n      var lastNode = getLast$2(groups[0]).node;\n      return (lastNode.type === \"MemberExpression\" || lastNode.type === \"OptionalMemberExpression\") && lastNode.property.type === \"Identifier\" && (isFactory(lastNode.property.name) || hasComputed);\n    }\n\n    var shouldMerge = groups.length >= 2 && !groups[1][0].node.comments && shouldNotWrap(groups);\n\n    function printGroup(printedGroup) {\n      var printed = printedGroup.map(function (tuple) {\n        return tuple.printed;\n      }); // Checks if the last node (i.e. the parent node) needs parens and print\n      // accordingly\n\n      if (printedGroup.length > 0 && printedGroup[printedGroup.length - 1].needsParens) {\n        return concat$d([\"(\"].concat(_toConsumableArray(printed), [\")\"]));\n      }\n\n      return concat$d(printed);\n    }\n\n    function printIndentedGroup(groups) {\n      if (groups.length === 0) {\n        return \"\";\n      }\n\n      return indent$7(group$b(concat$d([hardline$9, join$9(hardline$9, groups.map(printGroup))])));\n    }\n\n    var printedGroups = groups.map(printGroup);\n    var oneLine = concat$d(printedGroups);\n    var cutoff = shouldMerge ? 3 : 2;\n    var flatGroups = groups.slice(0, cutoff).reduce(function (res, group) {\n      return res.concat(group);\n    }, []);\n    var hasComment = flatGroups.slice(1, -1).some(function (node) {\n      return hasLeadingComment$3(node.node);\n    }) || flatGroups.slice(0, -1).some(function (node) {\n      return hasTrailingComment$1(node.node);\n    }) || groups[cutoff] && hasLeadingComment$3(groups[cutoff][0].node); // If we only have a single `.`, we shouldn't do anything fancy and just\n    // render everything concatenated together.\n\n    if (groups.length <= cutoff && !hasComment) {\n      if (isLongCurriedCallExpression$1(path)) {\n        return oneLine;\n      }\n\n      return group$b(oneLine);\n    } // Find out the last node in the first group and check if it has an\n    // empty line after\n\n\n    var lastNodeBeforeIndent = getLast$2(shouldMerge ? groups.slice(1, 2)[0] : groups[0]).node;\n    var shouldHaveEmptyLineBeforeIndent = lastNodeBeforeIndent.type !== \"CallExpression\" && lastNodeBeforeIndent.type !== \"OptionalCallExpression\" && shouldInsertEmptyLineAfter(lastNodeBeforeIndent);\n    var expanded = concat$d([printGroup(groups[0]), shouldMerge ? concat$d(groups.slice(1, 2).map(printGroup)) : \"\", shouldHaveEmptyLineBeforeIndent ? hardline$9 : \"\", printIndentedGroup(groups.slice(shouldMerge ? 2 : 1))]);\n    var callExpressions = printedNodes.map(function (_ref) {\n      var node = _ref.node;\n      return node;\n    }).filter(isCallOrOptionalCallExpression$1); // We don't want to print in one line if there's:\n    //  * A comment.\n    //  * 3 or more chained calls.\n    //  * Any group but the last one has a hard line.\n    // If the last group is a function it's okay to inline if it fits.\n\n    if (hasComment || callExpressions.length >= 3 || printedGroups.slice(0, -1).some(willBreak$1) ||\n    /**\n     *     scopes.filter(scope => scope.value !== '').map((scope, i) => {\n     *       // multi line content\n     *     })\n     */\n    function (lastGroupDoc, lastGroupNode) {\n      return isCallOrOptionalCallExpression$1(lastGroupNode) && willBreak$1(lastGroupDoc);\n    }(getLast$2(printedGroups), getLast$2(getLast$2(groups)).node) && callExpressions.slice(0, -1).some(function (n) {\n      return n.arguments.some(isFunctionOrArrowExpression$1);\n    })) {\n      return group$b(expanded);\n    }\n\n    return concat$d([// We only need to check `oneLine` because if `expanded` is chosen\n    // that means that the parent group has already been broken\n    // naturally\n    willBreak$1(oneLine) || shouldHaveEmptyLineBeforeIndent ? breakParent$3 : \"\", conditionalGroup$1([oneLine, expanded])]);\n  }\n\n  function separatorNoWhitespace(isFacebookTranslationTag, child, childNode, nextNode) {\n    if (isFacebookTranslationTag) {\n      return \"\";\n    }\n\n    if (childNode.type === \"JSXElement\" && !childNode.closingElement || nextNode && nextNode.type === \"JSXElement\" && !nextNode.closingElement) {\n      return child.length === 1 ? softline$6 : hardline$9;\n    }\n\n    return softline$6;\n  }\n\n  function separatorWithWhitespace(isFacebookTranslationTag, child, childNode, nextNode) {\n    if (isFacebookTranslationTag) {\n      return hardline$9;\n    }\n\n    if (child.length === 1) {\n      return childNode.type === \"JSXElement\" && !childNode.closingElement || nextNode && nextNode.type === \"JSXElement\" && !nextNode.closingElement ? hardline$9 : softline$6;\n    }\n\n    return hardline$9;\n  } // JSX Children are strange, mostly for two reasons:\n  // 1. JSX reads newlines into string values, instead of skipping them like JS\n  // 2. up to one whitespace between elements within a line is significant,\n  //    but not between lines.\n  //\n  // Leading, trailing, and lone whitespace all need to\n  // turn themselves into the rather ugly `{' '}` when breaking.\n  //\n  // We print JSX using the `fill` doc primitive.\n  // This requires that we give it an array of alternating\n  // content and whitespace elements.\n  // To ensure this we add dummy `\"\"` content elements as needed.\n\n\n  function printJSXChildren(path, options, print, jsxWhitespace, isFacebookTranslationTag) {\n    var n = path.getValue();\n    var children = []; // using `map` instead of `each` because it provides `i`\n\n    path.map(function (childPath, i) {\n      var child = childPath.getValue();\n\n      if (isLiteral$1(child)) {\n        var text = rawText$1(child); // Contains a non-whitespace character\n\n        if (isMeaningfulJSXText$1(child)) {\n          var words = text.split(matchJsxWhitespaceRegex$1); // Starts with whitespace\n\n          if (words[0] === \"\") {\n            children.push(\"\");\n            words.shift();\n\n            if (/\\n/.test(words[0])) {\n              var next = n.children[i + 1];\n              children.push(separatorWithWhitespace(isFacebookTranslationTag, words[1], child, next));\n            } else {\n              children.push(jsxWhitespace);\n            }\n\n            words.shift();\n          }\n\n          var endWhitespace; // Ends with whitespace\n\n          if (getLast$2(words) === \"\") {\n            words.pop();\n            endWhitespace = words.pop();\n          } // This was whitespace only without a new line.\n\n\n          if (words.length === 0) {\n            return;\n          }\n\n          words.forEach(function (word, i) {\n            if (i % 2 === 1) {\n              children.push(line$7);\n            } else {\n              children.push(word);\n            }\n          });\n\n          if (endWhitespace !== undefined) {\n            if (/\\n/.test(endWhitespace)) {\n              var _next = n.children[i + 1];\n              children.push(separatorWithWhitespace(isFacebookTranslationTag, getLast$2(children), child, _next));\n            } else {\n              children.push(jsxWhitespace);\n            }\n          } else {\n            var _next2 = n.children[i + 1];\n            children.push(separatorNoWhitespace(isFacebookTranslationTag, getLast$2(children), child, _next2));\n          }\n        } else if (/\\n/.test(text)) {\n          // Keep (up to one) blank line between tags/expressions/text.\n          // Note: We don't keep blank lines between text elements.\n          if (text.match(/\\n/g).length > 1) {\n            children.push(\"\");\n            children.push(hardline$9);\n          }\n        } else {\n          children.push(\"\");\n          children.push(jsxWhitespace);\n        }\n      } else {\n        var printedChild = print(childPath);\n        children.push(printedChild);\n        var _next3 = n.children[i + 1];\n\n        var directlyFollowedByMeaningfulText = _next3 && isMeaningfulJSXText$1(_next3);\n\n        if (directlyFollowedByMeaningfulText) {\n          var firstWord = rawText$1(_next3).trim().split(matchJsxWhitespaceRegex$1)[0];\n          children.push(separatorNoWhitespace(isFacebookTranslationTag, firstWord, child, _next3));\n        } else {\n          children.push(hardline$9);\n        }\n      }\n    }, \"children\");\n    return children;\n  } // JSX expands children from the inside-out, instead of the outside-in.\n  // This is both to break children before attributes,\n  // and to ensure that when children break, their parents do as well.\n  //\n  // Any element that is written without any newlines and fits on a single line\n  // is left that way.\n  // Not only that, any user-written-line containing multiple JSX siblings\n  // should also be kept on one line if possible,\n  // so each user-written-line is wrapped in its own group.\n  //\n  // Elements that contain newlines or don't fit on a single line (recursively)\n  // are fully-split, using hardline and shouldBreak: true.\n  //\n  // To support that case properly, all leading and trailing spaces\n  // are stripped from the list of children, and replaced with a single hardline.\n\n\n  function printJSXElement(path, options, print) {\n    var n = path.getValue();\n\n    if (n.type === \"JSXElement\" && isEmptyJSXElement$1(n)) {\n      return concat$d([path.call(print, \"openingElement\"), path.call(print, \"closingElement\")]);\n    }\n\n    var openingLines = n.type === \"JSXElement\" ? path.call(print, \"openingElement\") : path.call(print, \"openingFragment\");\n    var closingLines = n.type === \"JSXElement\" ? path.call(print, \"closingElement\") : path.call(print, \"closingFragment\");\n\n    if (n.children.length === 1 && n.children[0].type === \"JSXExpressionContainer\" && (n.children[0].expression.type === \"TemplateLiteral\" || n.children[0].expression.type === \"TaggedTemplateExpression\")) {\n      return concat$d([openingLines, concat$d(path.map(print, \"children\")), closingLines]);\n    } // Convert `{\" \"}` to text nodes containing a space.\n    // This makes it easy to turn them into `jsxWhitespace` which\n    // can then print as either a space or `{\" \"}` when breaking.\n\n\n    n.children = n.children.map(function (child) {\n      if (isJSXWhitespaceExpression$1(child)) {\n        return {\n          type: \"JSXText\",\n          value: \" \",\n          raw: \" \"\n        };\n      }\n\n      return child;\n    });\n    var containsTag = n.children.filter(isJSXNode$1).length > 0;\n    var containsMultipleExpressions = n.children.filter(function (child) {\n      return child.type === \"JSXExpressionContainer\";\n    }).length > 1;\n    var containsMultipleAttributes = n.type === \"JSXElement\" && n.openingElement.attributes.length > 1; // Record any breaks. Should never go from true to false, only false to true.\n\n    var forcedBreak = willBreak$1(openingLines) || containsTag || containsMultipleAttributes || containsMultipleExpressions;\n    var rawJsxWhitespace = options.singleQuote ? \"{' '}\" : '{\" \"}';\n    var jsxWhitespace = ifBreak$6(concat$d([rawJsxWhitespace, softline$6]), \" \");\n    var isFacebookTranslationTag = n.openingElement && n.openingElement.name && n.openingElement.name.name === \"fbt\";\n    var children = printJSXChildren(path, options, print, jsxWhitespace, isFacebookTranslationTag);\n    var containsText = n.children.filter(function (child) {\n      return isMeaningfulJSXText$1(child);\n    }).length > 0; // We can end up we multiple whitespace elements with empty string\n    // content between them.\n    // We need to remove empty whitespace and softlines before JSX whitespace\n    // to get the correct output.\n\n    for (var i = children.length - 2; i >= 0; i--) {\n      var isPairOfEmptyStrings = children[i] === \"\" && children[i + 1] === \"\";\n      var isPairOfHardlines = children[i] === hardline$9 && children[i + 1] === \"\" && children[i + 2] === hardline$9;\n      var isLineFollowedByJSXWhitespace = (children[i] === softline$6 || children[i] === hardline$9) && children[i + 1] === \"\" && children[i + 2] === jsxWhitespace;\n      var isJSXWhitespaceFollowedByLine = children[i] === jsxWhitespace && children[i + 1] === \"\" && (children[i + 2] === softline$6 || children[i + 2] === hardline$9);\n      var isDoubleJSXWhitespace = children[i] === jsxWhitespace && children[i + 1] === \"\" && children[i + 2] === jsxWhitespace;\n      var isPairOfHardOrSoftLines = children[i] === softline$6 && children[i + 1] === \"\" && children[i + 2] === hardline$9 || children[i] === hardline$9 && children[i + 1] === \"\" && children[i + 2] === softline$6;\n\n      if (isPairOfHardlines && containsText || isPairOfEmptyStrings || isLineFollowedByJSXWhitespace || isDoubleJSXWhitespace || isPairOfHardOrSoftLines) {\n        children.splice(i, 2);\n      } else if (isJSXWhitespaceFollowedByLine) {\n        children.splice(i + 1, 2);\n      }\n    } // Trim trailing lines (or empty strings)\n\n\n    while (children.length && (isLineNext$1(getLast$2(children)) || isEmpty$1(getLast$2(children)))) {\n      children.pop();\n    } // Trim leading lines (or empty strings)\n\n\n    while (children.length && (isLineNext$1(children[0]) || isEmpty$1(children[0])) && (isLineNext$1(children[1]) || isEmpty$1(children[1]))) {\n      children.shift();\n      children.shift();\n    } // Tweak how we format children if outputting this element over multiple lines.\n    // Also detect whether we will force this element to output over multiple lines.\n\n\n    var multilineChildren = [];\n    children.forEach(function (child, i) {\n      // There are a number of situations where we need to ensure we display\n      // whitespace as `{\" \"}` when outputting this element over multiple lines.\n      if (child === jsxWhitespace) {\n        if (i === 1 && children[i - 1] === \"\") {\n          if (children.length === 2) {\n            // Solitary whitespace\n            multilineChildren.push(rawJsxWhitespace);\n            return;\n          } // Leading whitespace\n\n\n          multilineChildren.push(concat$d([rawJsxWhitespace, hardline$9]));\n          return;\n        } else if (i === children.length - 1) {\n          // Trailing whitespace\n          multilineChildren.push(rawJsxWhitespace);\n          return;\n        } else if (children[i - 1] === \"\" && children[i - 2] === hardline$9) {\n          // Whitespace after line break\n          multilineChildren.push(rawJsxWhitespace);\n          return;\n        }\n      }\n\n      multilineChildren.push(child);\n\n      if (willBreak$1(child)) {\n        forcedBreak = true;\n      }\n    }); // If there is text we use `fill` to fit as much onto each line as possible.\n    // When there is no text (just tags and expressions) we use `group`\n    // to output each on a separate line.\n\n    var content = containsText ? fill$4(multilineChildren) : group$b(concat$d(multilineChildren), {\n      shouldBreak: true\n    });\n    var multiLineElem = group$b(concat$d([openingLines, indent$7(concat$d([hardline$9, content])), hardline$9, closingLines]));\n\n    if (forcedBreak) {\n      return multiLineElem;\n    }\n\n    return conditionalGroup$1([group$b(concat$d([openingLines, concat$d(children), closingLines])), multiLineElem]);\n  }\n\n  function maybeWrapJSXElementInParens(path, elem, options) {\n    var parent = path.getParentNode();\n\n    if (!parent) {\n      return elem;\n    }\n\n    var NO_WRAP_PARENTS = {\n      ArrayExpression: true,\n      JSXAttribute: true,\n      JSXElement: true,\n      JSXExpressionContainer: true,\n      JSXFragment: true,\n      ExpressionStatement: true,\n      CallExpression: true,\n      OptionalCallExpression: true,\n      ConditionalExpression: true,\n      JsExpressionRoot: true\n    };\n\n    if (NO_WRAP_PARENTS[parent.type]) {\n      return elem;\n    }\n\n    var shouldBreak = matchAncestorTypes$1(path, [\"ArrowFunctionExpression\", \"CallExpression\", \"JSXExpressionContainer\"]) || matchAncestorTypes$1(path, [\"ArrowFunctionExpression\", \"OptionalCallExpression\", \"JSXExpressionContainer\"]);\n    var needsParens = needsParens_1(path, options);\n    return group$b(concat$d([needsParens ? \"\" : ifBreak$6(\"(\"), indent$7(concat$d([softline$6, elem])), softline$6, needsParens ? \"\" : ifBreak$6(\")\")]), {\n      shouldBreak: shouldBreak\n    });\n  }\n\n  function shouldInlineLogicalExpression(node) {\n    if (node.type !== \"LogicalExpression\") {\n      return false;\n    }\n\n    if (node.right.type === \"ObjectExpression\" && node.right.properties.length !== 0) {\n      return true;\n    }\n\n    if (node.right.type === \"ArrayExpression\" && node.right.elements.length !== 0) {\n      return true;\n    }\n\n    if (isJSXNode$1(node.right)) {\n      return true;\n    }\n\n    return false;\n  } // For binary expressions to be consistent, we need to group\n  // subsequent operators with the same precedence level under a single\n  // group. Otherwise they will be nested such that some of them break\n  // onto new lines but not all. Operators with the same precedence\n  // level should either all break or not. Because we group them by\n  // precedence level and the AST is structured based on precedence\n  // level, things are naturally broken up correctly, i.e. `&&` is\n  // broken before `+`.\n\n\n  function printBinaryishExpressions(path, print, options, isNested, isInsideParenthesis) {\n    var parts = [];\n    var node = path.getValue(); // We treat BinaryExpression and LogicalExpression nodes the same.\n\n    if (isBinaryish$1(node)) {\n      // Put all operators with the same precedence level in the same\n      // group. The reason we only need to do this with the `left`\n      // expression is because given an expression like `1 + 2 - 3`, it\n      // is always parsed like `((1 + 2) - 3)`, meaning the `left` side\n      // is where the rest of the expression will exist. Binary\n      // expressions on the right side mean they have a difference\n      // precedence level and should be treated as a separate group, so\n      // print them normally. (This doesn't hold for the `**` operator,\n      // which is unique in that it is right-associative.)\n      if (shouldFlatten$1(node.operator, node.left.operator)) {\n        // Flatten them out by recursively calling this function.\n        parts = parts.concat(path.call(function (left) {\n          return printBinaryishExpressions(left, print, options,\n          /* isNested */\n          true, isInsideParenthesis);\n        }, \"left\"));\n      } else {\n        parts.push(path.call(print, \"left\"));\n      }\n\n      var shouldInline = shouldInlineLogicalExpression(node);\n      var lineBeforeOperator = (node.operator === \"|>\" || node.type === \"NGPipeExpression\" || node.operator === \"|\" && options.parser === \"__vue_expression\") && !hasLeadingOwnLineComment$1(options.originalText, node.right, options);\n      var operator = node.type === \"NGPipeExpression\" ? \"|\" : node.operator;\n      var rightSuffix = node.type === \"NGPipeExpression\" && node.arguments.length !== 0 ? group$b(indent$7(concat$d([softline$6, \": \", join$9(concat$d([softline$6, \":\", ifBreak$6(\" \")]), path.map(print, \"arguments\").map(function (arg) {\n        return align$1(2, group$b(arg));\n      }))]))) : \"\";\n      var right = shouldInline ? concat$d([operator, \" \", path.call(print, \"right\"), rightSuffix]) : concat$d([lineBeforeOperator ? softline$6 : \"\", operator, lineBeforeOperator ? \" \" : line$7, path.call(print, \"right\"), rightSuffix]); // If there's only a single binary expression, we want to create a group\n      // in order to avoid having a small right part like -1 be on its own line.\n\n      var parent = path.getParentNode();\n      var shouldGroup = !(isInsideParenthesis && node.type === \"LogicalExpression\") && parent.type !== node.type && node.left.type !== node.type && node.right.type !== node.type;\n      parts.push(\" \", shouldGroup ? group$b(right) : right); // The root comments are already printed, but we need to manually print\n      // the other ones since we don't call the normal print on BinaryExpression,\n      // only for the left and right parts\n\n      if (isNested && node.comments) {\n        parts = comments.printComments(path, function () {\n          return concat$d(parts);\n        }, options);\n      }\n    } else {\n      // Our stopping case. Simply print the node normally.\n      parts.push(path.call(print));\n    }\n\n    return parts;\n  }\n\n  function printAssignmentRight(leftNode, rightNode, printedRight, options) {\n    if (hasLeadingOwnLineComment$1(options.originalText, rightNode, options)) {\n      return indent$7(concat$d([hardline$9, printedRight]));\n    }\n\n    var canBreak = isBinaryish$1(rightNode) && !shouldInlineLogicalExpression(rightNode) || rightNode.type === \"ConditionalExpression\" && isBinaryish$1(rightNode.test) && !shouldInlineLogicalExpression(rightNode.test) || rightNode.type === \"StringLiteralTypeAnnotation\" || rightNode.type === \"ClassExpression\" && rightNode.decorators && rightNode.decorators.length || (leftNode.type === \"Identifier\" || isStringLiteral$1(leftNode) || leftNode.type === \"MemberExpression\") && (isStringLiteral$1(rightNode) || isMemberExpressionChain$1(rightNode)) && // do not put values on a separate line from the key in json\n    options.parser !== \"json\" && options.parser !== \"json5\" || rightNode.type === \"SequenceExpression\";\n\n    if (canBreak) {\n      return group$b(indent$7(concat$d([line$7, printedRight])));\n    }\n\n    return concat$d([\" \", printedRight]);\n  }\n\n  function printAssignment(leftNode, printedLeft, operator, rightNode, printedRight, options) {\n    if (!rightNode) {\n      return printedLeft;\n    }\n\n    var printed = printAssignmentRight(leftNode, rightNode, printedRight, options);\n    return group$b(concat$d([printedLeft, operator, printed]));\n  }\n\n  function adjustClause(node, clause, forceSpace) {\n    if (node.type === \"EmptyStatement\") {\n      return \";\";\n    }\n\n    if (node.type === \"BlockStatement\" || forceSpace) {\n      return concat$d([\" \", clause]);\n    }\n\n    return indent$7(concat$d([line$7, clause]));\n  }\n\n  function nodeStr(node, options, isFlowOrTypeScriptDirectiveLiteral) {\n    var raw = rawText$1(node);\n    var isDirectiveLiteral = isFlowOrTypeScriptDirectiveLiteral || node.type === \"DirectiveLiteral\";\n    return printString$2(raw, options, isDirectiveLiteral);\n  }\n\n  function printRegex(node) {\n    var flags = node.flags.split(\"\").sort().join(\"\");\n    return \"/\".concat(node.pattern, \"/\").concat(flags);\n  }\n\n  function exprNeedsASIProtection(path, options) {\n    var node = path.getValue();\n    var maybeASIProblem = needsParens_1(path, options) || node.type === \"ParenthesizedExpression\" || node.type === \"TypeCastExpression\" || node.type === \"ArrowFunctionExpression\" && !shouldPrintParamsWithoutParens(path, options) || node.type === \"ArrayExpression\" || node.type === \"ArrayPattern\" || node.type === \"UnaryExpression\" && node.prefix && (node.operator === \"+\" || node.operator === \"-\") || node.type === \"TemplateLiteral\" || node.type === \"TemplateElement\" || isJSXNode$1(node) || node.type === \"BindExpression\" && !node.object || node.type === \"RegExpLiteral\" || node.type === \"Literal\" && node.pattern || node.type === \"Literal\" && node.regex;\n\n    if (maybeASIProblem) {\n      return true;\n    }\n\n    if (!hasNakedLeftSide$2(node)) {\n      return false;\n    }\n\n    return path.call.apply(path, [function (childPath) {\n      return exprNeedsASIProtection(childPath, options);\n    }].concat(getLeftSidePathName$2(path, node)));\n  }\n\n  function stmtNeedsASIProtection(path, options) {\n    var node = path.getNode();\n\n    if (node.type !== \"ExpressionStatement\") {\n      return false;\n    }\n\n    return path.call(function (childPath) {\n      return exprNeedsASIProtection(childPath, options);\n    }, \"expression\");\n  }\n\n  function shouldHugType(node) {\n    if (isSimpleFlowType$1(node) || isObjectType$1(node)) {\n      return true;\n    }\n\n    if (node.type === \"UnionTypeAnnotation\" || node.type === \"TSUnionType\") {\n      var voidCount = node.types.filter(function (n) {\n        return n.type === \"VoidTypeAnnotation\" || n.type === \"TSVoidKeyword\" || n.type === \"NullLiteralTypeAnnotation\" || n.type === \"TSNullKeyword\";\n      }).length;\n      var objectCount = node.types.filter(function (n) {\n        return n.type === \"ObjectTypeAnnotation\" || n.type === \"TSTypeLiteral\" || // This is a bit aggressive but captures Array<{x}>\n        n.type === \"GenericTypeAnnotation\" || n.type === \"TSTypeReference\";\n      }).length;\n\n      if (node.types.length - 1 === voidCount && objectCount > 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function shouldHugArguments(fun) {\n    return fun && fun.params && fun.params.length === 1 && !fun.params[0].comments && (fun.params[0].type === \"ObjectPattern\" || fun.params[0].type === \"ArrayPattern\" || fun.params[0].type === \"Identifier\" && fun.params[0].typeAnnotation && (fun.params[0].typeAnnotation.type === \"TypeAnnotation\" || fun.params[0].typeAnnotation.type === \"TSTypeAnnotation\") && isObjectType$1(fun.params[0].typeAnnotation.typeAnnotation) || fun.params[0].type === \"FunctionTypeParam\" && isObjectType$1(fun.params[0].typeAnnotation) || fun.params[0].type === \"AssignmentPattern\" && (fun.params[0].left.type === \"ObjectPattern\" || fun.params[0].left.type === \"ArrayPattern\") && (fun.params[0].right.type === \"Identifier\" || fun.params[0].right.type === \"ObjectExpression\" && fun.params[0].right.properties.length === 0 || fun.params[0].right.type === \"ArrayExpression\" && fun.params[0].right.elements.length === 0)) && !fun.rest;\n  }\n\n  function printArrayItems(path, options, printPath, print) {\n    var printedElements = [];\n    var separatorParts = [];\n    path.each(function (childPath) {\n      printedElements.push(concat$d(separatorParts));\n      printedElements.push(group$b(print(childPath)));\n      separatorParts = [\",\", line$7];\n\n      if (childPath.getValue() && isNextLineEmpty$4(options.originalText, childPath.getValue(), options)) {\n        separatorParts.push(softline$6);\n      }\n    }, printPath);\n    return concat$d(printedElements);\n  }\n\n  function willPrintOwnComments(path\n  /*, options */\n  ) {\n    var node = path.getValue();\n    var parent = path.getParentNode();\n    return (node && (isJSXNode$1(node) || hasFlowShorthandAnnotationComment$2(node) || parent && (parent.type === \"CallExpression\" || parent.type === \"OptionalCallExpression\") && (hasFlowAnnotationComment$1(node.leadingComments) || hasFlowAnnotationComment$1(node.trailingComments))) || parent && (parent.type === \"JSXSpreadAttribute\" || parent.type === \"JSXSpreadChild\" || parent.type === \"UnionTypeAnnotation\" || parent.type === \"TSUnionType\" || (parent.type === \"ClassDeclaration\" || parent.type === \"ClassExpression\") && parent.superClass === node)) && !hasIgnoreComment$4(path);\n  }\n\n  function canAttachComment$1(node) {\n    return node.type && node.type !== \"CommentBlock\" && node.type !== \"CommentLine\" && node.type !== \"Line\" && node.type !== \"Block\" && node.type !== \"EmptyStatement\" && node.type !== \"TemplateElement\" && node.type !== \"Import\";\n  }\n\n  function printComment$2(commentPath, options) {\n    var comment = commentPath.getValue();\n\n    switch (comment.type) {\n      case \"CommentBlock\":\n      case \"Block\":\n        {\n          if (isIndentableBlockComment(comment)) {\n            var printed = printIndentableBlockComment(comment); // We need to prevent an edge case of a previous trailing comment\n            // printed as a `lineSuffix` which causes the comments to be\n            // interleaved. See https://github.com/prettier/prettier/issues/4412\n\n            if (comment.trailing && !hasNewline$4(options.originalText, options.locStart(comment), {\n              backwards: true\n            })) {\n              return concat$d([hardline$9, printed]);\n            }\n\n            return printed;\n          }\n\n          var isInsideFlowComment = options.originalText.substr(options.locEnd(comment) - 3, 3) === \"*-/\";\n          return \"/*\" + comment.value + (isInsideFlowComment ? \"*-/\" : \"*/\");\n        }\n\n      case \"CommentLine\":\n      case \"Line\":\n        // Print shebangs with the proper comment characters\n        if (options.originalText.slice(options.locStart(comment)).startsWith(\"#!\")) {\n          return \"#!\" + comment.value.trimRight();\n        }\n\n        return \"//\" + comment.value.trimRight();\n\n      default:\n        throw new Error(\"Not a comment: \" + JSON.stringify(comment));\n    }\n  }\n\n  function isIndentableBlockComment(comment) {\n    // If the comment has multiple lines and every line starts with a star\n    // we can fix the indentation of each line. The stars in the `/*` and\n    // `*/` delimiters are not included in the comment value, so add them\n    // back first.\n    var lines = \"*\".concat(comment.value, \"*\").split(\"\\n\");\n    return lines.length > 1 && lines.every(function (line) {\n      return line.trim()[0] === \"*\";\n    });\n  }\n\n  function printIndentableBlockComment(comment) {\n    var lines = comment.value.split(\"\\n\");\n    return concat$d([\"/*\", join$9(hardline$9, lines.map(function (line, index) {\n      return index === 0 ? line.trimRight() : \" \" + (index < lines.length - 1 ? line.trim() : line.trimLeft());\n    })), \"*/\"]);\n  }\n\n  var printerEstree = {\n    preprocess: preprocess_1$1,\n    print: genericPrint$3,\n    embed: embed_1$1,\n    insertPragma: insertPragma$7,\n    massageAstNode: clean_1$1,\n    hasPrettierIgnore: hasPrettierIgnore$3,\n    willPrintOwnComments: willPrintOwnComments,\n    canAttachComment: canAttachComment$1,\n    printComment: printComment$2,\n    isBlockComment: comments$1.isBlockComment,\n    handleComments: {\n      ownLine: comments$1.handleOwnLineComment,\n      endOfLine: comments$1.handleEndOfLineComment,\n      remaining: comments$1.handleRemainingComment\n    }\n  };\n\n  var _require$$0$builders$7 = doc.builders,\n      concat$e = _require$$0$builders$7.concat,\n      hardline$a = _require$$0$builders$7.hardline,\n      indent$8 = _require$$0$builders$7.indent,\n      join$a = _require$$0$builders$7.join;\n\n  function genericPrint$4(path, options, print) {\n    var node = path.getValue();\n\n    switch (node.type) {\n      case \"JsonRoot\":\n        return concat$e([path.call(print, \"node\"), hardline$a]);\n\n      case \"ArrayExpression\":\n        return node.elements.length === 0 ? \"[]\" : concat$e([\"[\", indent$8(concat$e([hardline$a, join$a(concat$e([\",\", hardline$a]), path.map(print, \"elements\"))])), hardline$a, \"]\"]);\n\n      case \"ObjectExpression\":\n        return node.properties.length === 0 ? \"{}\" : concat$e([\"{\", indent$8(concat$e([hardline$a, join$a(concat$e([\",\", hardline$a]), path.map(print, \"properties\"))])), hardline$a, \"}\"]);\n\n      case \"ObjectProperty\":\n        return concat$e([path.call(print, \"key\"), \": \", path.call(print, \"value\")]);\n\n      case \"UnaryExpression\":\n        return concat$e([node.operator === \"+\" ? \"\" : node.operator, path.call(print, \"argument\")]);\n\n      case \"NullLiteral\":\n        return \"null\";\n\n      case \"BooleanLiteral\":\n        return node.value ? \"true\" : \"false\";\n\n      case \"StringLiteral\":\n      case \"NumericLiteral\":\n        return JSON.stringify(node.value);\n\n      case \"Identifier\":\n        return JSON.stringify(node.name);\n\n      default:\n        /* istanbul ignore next */\n        throw new Error(\"unknown type: \" + JSON.stringify(node.type));\n    }\n  }\n\n  function clean$5(node, newNode\n  /*, parent*/\n  ) {\n    delete newNode.start;\n    delete newNode.end;\n    delete newNode.extra;\n    delete newNode.loc;\n    delete newNode.comments;\n    delete newNode.errors;\n\n    if (node.type === \"Identifier\") {\n      return {\n        type: \"StringLiteral\",\n        value: node.name\n      };\n    }\n\n    if (node.type === \"UnaryExpression\" && node.operator === \"+\") {\n      return newNode.argument;\n    }\n  }\n\n  var printerEstreeJson = {\n    preprocess: preprocess_1$1,\n    print: genericPrint$4,\n    massageAstNode: clean$5\n  };\n\n  var CATEGORY_JAVASCRIPT = \"JavaScript\"; // format based on https://github.com/prettier/prettier/blob/master/src/main/core-options.js\n\n  var options$5 = {\n    arrowParens: {\n      since: \"1.9.0\",\n      category: CATEGORY_JAVASCRIPT,\n      type: \"choice\",\n      default: \"avoid\",\n      description: \"Include parentheses around a sole arrow function parameter.\",\n      choices: [{\n        value: \"avoid\",\n        description: \"Omit parens when possible. Example: `x => x`\"\n      }, {\n        value: \"always\",\n        description: \"Always include parens. Example: `(x) => x`\"\n      }]\n    },\n    bracketSpacing: commonOptions.bracketSpacing,\n    jsxBracketSameLine: {\n      since: \"0.17.0\",\n      category: CATEGORY_JAVASCRIPT,\n      type: \"boolean\",\n      default: false,\n      description: \"Put > on the last line instead of at a new line.\"\n    },\n    semi: {\n      since: \"1.0.0\",\n      category: CATEGORY_JAVASCRIPT,\n      type: \"boolean\",\n      default: true,\n      description: \"Print semicolons.\",\n      oppositeDescription: \"Do not print semicolons, except at the beginning of lines which may need them.\"\n    },\n    singleQuote: commonOptions.singleQuote,\n    jsxSingleQuote: {\n      since: \"1.15.0\",\n      category: CATEGORY_JAVASCRIPT,\n      type: \"boolean\",\n      default: false,\n      description: \"Use single quotes in JSX.\"\n    },\n    quoteProps: {\n      since: \"1.17.0\",\n      category: CATEGORY_JAVASCRIPT,\n      type: \"choice\",\n      default: \"as-needed\",\n      description: \"Change when properties in objects are quoted.\",\n      choices: [{\n        value: \"as-needed\",\n        description: \"Only add quotes around object properties where required.\"\n      }, {\n        value: \"consistent\",\n        description: \"If at least one property in an object requires quotes, quote all properties.\"\n      }, {\n        value: \"preserve\",\n        description: \"Respect the input use of quotes in object properties.\"\n      }]\n    },\n    trailingComma: {\n      since: \"0.0.0\",\n      category: CATEGORY_JAVASCRIPT,\n      type: \"choice\",\n      default: [{\n        since: \"0.0.0\",\n        value: false\n      }, {\n        since: \"0.19.0\",\n        value: \"none\"\n      }],\n      description: \"Print trailing commas wherever possible when multi-line.\",\n      choices: [{\n        value: \"none\",\n        description: \"No trailing commas.\"\n      }, {\n        value: \"es5\",\n        description: \"Trailing commas where valid in ES5 (objects, arrays, etc.)\"\n      }, {\n        value: \"all\",\n        description: \"Trailing commas wherever possible (including function arguments).\"\n      }, {\n        value: true,\n        deprecated: \"0.19.0\",\n        redirect: \"es5\"\n      }, {\n        value: false,\n        deprecated: \"0.19.0\",\n        redirect: \"none\"\n      }]\n    }\n  };\n\n  var name$9 = \"JavaScript\";\n  var type$8 = \"programming\";\n  var tmScope$8 = \"source.js\";\n  var aceMode$8 = \"javascript\";\n  var codemirrorMode$4 = \"javascript\";\n  var codemirrorMimeType$4 = \"text/javascript\";\n  var color$3 = \"#f1e05a\";\n  var aliases$2 = [\n  \t\"js\",\n  \t\"node\"\n  ];\n  var extensions$8 = [\n  \t\".js\",\n  \t\"._js\",\n  \t\".bones\",\n  \t\".es\",\n  \t\".es6\",\n  \t\".frag\",\n  \t\".gs\",\n  \t\".jake\",\n  \t\".jsb\",\n  \t\".jscad\",\n  \t\".jsfl\",\n  \t\".jsm\",\n  \t\".jss\",\n  \t\".mjs\",\n  \t\".njs\",\n  \t\".pac\",\n  \t\".sjs\",\n  \t\".ssjs\",\n  \t\".xsjs\",\n  \t\".xsjslib\"\n  ];\n  var filenames = [\n  \t\"Jakefile\"\n  ];\n  var interpreters = [\n  \t\"chakra\",\n  \t\"d8\",\n  \t\"js\",\n  \t\"node\",\n  \t\"rhino\",\n  \t\"v8\",\n  \t\"v8-shell\"\n  ];\n  var languageId$8 = 183;\n  var JavaScript = {\n  \tname: name$9,\n  \ttype: type$8,\n  \ttmScope: tmScope$8,\n  \taceMode: aceMode$8,\n  \tcodemirrorMode: codemirrorMode$4,\n  \tcodemirrorMimeType: codemirrorMimeType$4,\n  \tcolor: color$3,\n  \taliases: aliases$2,\n  \textensions: extensions$8,\n  \tfilenames: filenames,\n  \tinterpreters: interpreters,\n  \tlanguageId: languageId$8\n  };\n\n  var JavaScript$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$9,\n    type: type$8,\n    tmScope: tmScope$8,\n    aceMode: aceMode$8,\n    codemirrorMode: codemirrorMode$4,\n    codemirrorMimeType: codemirrorMimeType$4,\n    color: color$3,\n    aliases: aliases$2,\n    extensions: extensions$8,\n    filenames: filenames,\n    interpreters: interpreters,\n    languageId: languageId$8,\n    'default': JavaScript\n  });\n\n  var name$a = \"JSX\";\n  var type$9 = \"programming\";\n  var group$c = \"JavaScript\";\n  var extensions$9 = [\n  \t\".jsx\"\n  ];\n  var tmScope$9 = \"source.js.jsx\";\n  var aceMode$9 = \"javascript\";\n  var codemirrorMode$5 = \"jsx\";\n  var codemirrorMimeType$5 = \"text/jsx\";\n  var languageId$9 = 178;\n  var JSX = {\n  \tname: name$a,\n  \ttype: type$9,\n  \tgroup: group$c,\n  \textensions: extensions$9,\n  \ttmScope: tmScope$9,\n  \taceMode: aceMode$9,\n  \tcodemirrorMode: codemirrorMode$5,\n  \tcodemirrorMimeType: codemirrorMimeType$5,\n  \tlanguageId: languageId$9\n  };\n\n  var JSX$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$a,\n    type: type$9,\n    group: group$c,\n    extensions: extensions$9,\n    tmScope: tmScope$9,\n    aceMode: aceMode$9,\n    codemirrorMode: codemirrorMode$5,\n    codemirrorMimeType: codemirrorMimeType$5,\n    languageId: languageId$9,\n    'default': JSX\n  });\n\n  var name$b = \"TypeScript\";\n  var type$a = \"programming\";\n  var color$4 = \"#2b7489\";\n  var aliases$3 = [\n  \t\"ts\"\n  ];\n  var interpreters$1 = [\n  \t\"deno\",\n  \t\"ts-node\"\n  ];\n  var extensions$a = [\n  \t\".ts\"\n  ];\n  var tmScope$a = \"source.ts\";\n  var aceMode$a = \"typescript\";\n  var codemirrorMode$6 = \"javascript\";\n  var codemirrorMimeType$6 = \"application/typescript\";\n  var languageId$a = 378;\n  var TypeScript = {\n  \tname: name$b,\n  \ttype: type$a,\n  \tcolor: color$4,\n  \taliases: aliases$3,\n  \tinterpreters: interpreters$1,\n  \textensions: extensions$a,\n  \ttmScope: tmScope$a,\n  \taceMode: aceMode$a,\n  \tcodemirrorMode: codemirrorMode$6,\n  \tcodemirrorMimeType: codemirrorMimeType$6,\n  \tlanguageId: languageId$a\n  };\n\n  var TypeScript$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$b,\n    type: type$a,\n    color: color$4,\n    aliases: aliases$3,\n    interpreters: interpreters$1,\n    extensions: extensions$a,\n    tmScope: tmScope$a,\n    aceMode: aceMode$a,\n    codemirrorMode: codemirrorMode$6,\n    codemirrorMimeType: codemirrorMimeType$6,\n    languageId: languageId$a,\n    'default': TypeScript\n  });\n\n  var name$c = \"TSX\";\n  var type$b = \"programming\";\n  var group$d = \"TypeScript\";\n  var extensions$b = [\n  \t\".tsx\"\n  ];\n  var tmScope$b = \"source.tsx\";\n  var aceMode$b = \"javascript\";\n  var codemirrorMode$7 = \"jsx\";\n  var codemirrorMimeType$7 = \"text/jsx\";\n  var languageId$b = 94901924;\n  var TSX = {\n  \tname: name$c,\n  \ttype: type$b,\n  \tgroup: group$d,\n  \textensions: extensions$b,\n  \ttmScope: tmScope$b,\n  \taceMode: aceMode$b,\n  \tcodemirrorMode: codemirrorMode$7,\n  \tcodemirrorMimeType: codemirrorMimeType$7,\n  \tlanguageId: languageId$b\n  };\n\n  var TSX$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$c,\n    type: type$b,\n    group: group$d,\n    extensions: extensions$b,\n    tmScope: tmScope$b,\n    aceMode: aceMode$b,\n    codemirrorMode: codemirrorMode$7,\n    codemirrorMimeType: codemirrorMimeType$7,\n    languageId: languageId$b,\n    'default': TSX\n  });\n\n  var name$d = \"JSON\";\n  var type$c = \"data\";\n  var tmScope$c = \"source.json\";\n  var aceMode$c = \"json\";\n  var codemirrorMode$8 = \"javascript\";\n  var codemirrorMimeType$8 = \"application/json\";\n  var searchable = false;\n  var extensions$c = [\n  \t\".json\",\n  \t\".avsc\",\n  \t\".geojson\",\n  \t\".gltf\",\n  \t\".har\",\n  \t\".ice\",\n  \t\".JSON-tmLanguage\",\n  \t\".jsonl\",\n  \t\".mcmeta\",\n  \t\".tfstate\",\n  \t\".tfstate.backup\",\n  \t\".topojson\",\n  \t\".webapp\",\n  \t\".webmanifest\",\n  \t\".yy\",\n  \t\".yyp\"\n  ];\n  var filenames$1 = [\n  \t\".arcconfig\",\n  \t\".htmlhintrc\",\n  \t\".tern-config\",\n  \t\".tern-project\",\n  \t\".watchmanconfig\",\n  \t\"composer.lock\",\n  \t\"mcmod.info\"\n  ];\n  var languageId$c = 174;\n  var _JSON = {\n  \tname: name$d,\n  \ttype: type$c,\n  \ttmScope: tmScope$c,\n  \taceMode: aceMode$c,\n  \tcodemirrorMode: codemirrorMode$8,\n  \tcodemirrorMimeType: codemirrorMimeType$8,\n  \tsearchable: searchable,\n  \textensions: extensions$c,\n  \tfilenames: filenames$1,\n  \tlanguageId: languageId$c\n  };\n\n  var _JSON$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$d,\n    type: type$c,\n    tmScope: tmScope$c,\n    aceMode: aceMode$c,\n    codemirrorMode: codemirrorMode$8,\n    codemirrorMimeType: codemirrorMimeType$8,\n    searchable: searchable,\n    extensions: extensions$c,\n    filenames: filenames$1,\n    languageId: languageId$c,\n    'default': _JSON\n  });\n\n  var name$e = \"JSON with Comments\";\n  var type$d = \"data\";\n  var group$e = \"JSON\";\n  var tmScope$d = \"source.js\";\n  var aceMode$d = \"javascript\";\n  var codemirrorMode$9 = \"javascript\";\n  var codemirrorMimeType$9 = \"text/javascript\";\n  var aliases$4 = [\n  \t\"jsonc\"\n  ];\n  var extensions$d = [\n  \t\".sublime-build\",\n  \t\".sublime-commands\",\n  \t\".sublime-completions\",\n  \t\".sublime-keymap\",\n  \t\".sublime-macro\",\n  \t\".sublime-menu\",\n  \t\".sublime-mousemap\",\n  \t\".sublime-project\",\n  \t\".sublime-settings\",\n  \t\".sublime-theme\",\n  \t\".sublime-workspace\",\n  \t\".sublime_metrics\",\n  \t\".sublime_session\"\n  ];\n  var filenames$2 = [\n  \t\".babelrc\",\n  \t\".eslintrc.json\",\n  \t\".jscsrc\",\n  \t\".jshintrc\",\n  \t\".jslintrc\",\n  \t\"jsconfig.json\",\n  \t\"language-configuration.json\",\n  \t\"tsconfig.json\"\n  ];\n  var languageId$d = 423;\n  var JSON_with_Comments = {\n  \tname: name$e,\n  \ttype: type$d,\n  \tgroup: group$e,\n  \ttmScope: tmScope$d,\n  \taceMode: aceMode$d,\n  \tcodemirrorMode: codemirrorMode$9,\n  \tcodemirrorMimeType: codemirrorMimeType$9,\n  \taliases: aliases$4,\n  \textensions: extensions$d,\n  \tfilenames: filenames$2,\n  \tlanguageId: languageId$d\n  };\n\n  var JSON_with_Comments$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$e,\n    type: type$d,\n    group: group$e,\n    tmScope: tmScope$d,\n    aceMode: aceMode$d,\n    codemirrorMode: codemirrorMode$9,\n    codemirrorMimeType: codemirrorMimeType$9,\n    aliases: aliases$4,\n    extensions: extensions$d,\n    filenames: filenames$2,\n    languageId: languageId$d,\n    'default': JSON_with_Comments\n  });\n\n  var name$f = \"JSON5\";\n  var type$e = \"data\";\n  var extensions$e = [\n  \t\".json5\"\n  ];\n  var tmScope$e = \"source.js\";\n  var aceMode$e = \"javascript\";\n  var codemirrorMode$a = \"javascript\";\n  var codemirrorMimeType$a = \"application/json\";\n  var languageId$e = 175;\n  var JSON5 = {\n  \tname: name$f,\n  \ttype: type$e,\n  \textensions: extensions$e,\n  \ttmScope: tmScope$e,\n  \taceMode: aceMode$e,\n  \tcodemirrorMode: codemirrorMode$a,\n  \tcodemirrorMimeType: codemirrorMimeType$a,\n  \tlanguageId: languageId$e\n  };\n\n  var JSON5$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$f,\n    type: type$e,\n    extensions: extensions$e,\n    tmScope: tmScope$e,\n    aceMode: aceMode$e,\n    codemirrorMode: codemirrorMode$a,\n    codemirrorMimeType: codemirrorMimeType$a,\n    languageId: languageId$e,\n    'default': JSON5\n  });\n\n  var require$$0$6 = getCjsExportFromNamespace(JavaScript$1);\n\n  var require$$1$2 = getCjsExportFromNamespace(JSX$1);\n\n  var require$$2$1 = getCjsExportFromNamespace(TypeScript$1);\n\n  var require$$3$1 = getCjsExportFromNamespace(TSX$1);\n\n  var require$$4 = getCjsExportFromNamespace(_JSON$1);\n\n  var require$$5 = getCjsExportFromNamespace(JSON_with_Comments$1);\n\n  var require$$6 = getCjsExportFromNamespace(JSON5$1);\n\n  var languages$4 = [createLanguage(require$$0$6, function (data) {\n    return Object.assign(data, {\n      since: \"0.0.0\",\n      parsers: [\"babel\", \"flow\"],\n      vscodeLanguageIds: [\"javascript\", \"mongo\"],\n      interpreters: data.interpreters.concat([\"nodejs\"])\n    });\n  }), createLanguage(require$$0$6, function (data) {\n    return Object.assign(data, {\n      name: \"Flow\",\n      since: \"0.0.0\",\n      parsers: [\"babel\", \"flow\"],\n      vscodeLanguageIds: [\"javascript\"],\n      aliases: [],\n      filenames: [],\n      extensions: [\".js.flow\"]\n    });\n  }), createLanguage(require$$1$2, function (data) {\n    return Object.assign(data, {\n      since: \"0.0.0\",\n      parsers: [\"babel\", \"flow\"],\n      vscodeLanguageIds: [\"javascriptreact\"]\n    });\n  }), createLanguage(require$$2$1, function (data) {\n    return Object.assign(data, {\n      since: \"1.4.0\",\n      parsers: [\"typescript\"],\n      vscodeLanguageIds: [\"typescript\"]\n    });\n  }), createLanguage(require$$3$1, function (data) {\n    return Object.assign(data, {\n      since: \"1.4.0\",\n      parsers: [\"typescript\"],\n      vscodeLanguageIds: [\"typescriptreact\"]\n    });\n  }), createLanguage(require$$4, function (data) {\n    return Object.assign(data, {\n      name: \"JSON.stringify\",\n      since: \"1.13.0\",\n      parsers: [\"json-stringify\"],\n      vscodeLanguageIds: [\"json\"],\n      extensions: [],\n      // .json file defaults to json instead of json-stringify\n      filenames: [\"package.json\", \"package-lock.json\", \"composer.json\"]\n    });\n  }), createLanguage(require$$4, function (data) {\n    return Object.assign(data, {\n      since: \"1.5.0\",\n      parsers: [\"json\"],\n      vscodeLanguageIds: [\"json\"],\n      filenames: data.filenames.concat([\".prettierrc\"])\n    });\n  }), createLanguage(require$$5, function (data) {\n    return Object.assign(data, {\n      since: \"1.5.0\",\n      parsers: [\"json\"],\n      vscodeLanguageIds: [\"jsonc\"],\n      filenames: data.filenames.concat([\".eslintrc\"])\n    });\n  }), createLanguage(require$$6, function (data) {\n    return Object.assign(data, {\n      since: \"1.13.0\",\n      parsers: [\"json5\"],\n      vscodeLanguageIds: [\"json5\"]\n    });\n  })];\n  var printers$4 = {\n    estree: printerEstree,\n    \"estree-json\": printerEstreeJson\n  };\n  var languageJs = {\n    languages: languages$4,\n    options: options$5,\n    printers: printers$4\n  };\n\n  var json$1 = {\n    \"cjkPattern\": \"[\\\\u02ea-\\\\u02eb\\\\u1100-\\\\u11ff\\\\u2e80-\\\\u2e99\\\\u2e9b-\\\\u2ef3\\\\u2f00-\\\\u2fd5\\\\u3000-\\\\u303f\\\\u3041-\\\\u3096\\\\u3099-\\\\u309f\\\\u30a1-\\\\u30fa\\\\u30fc-\\\\u30ff\\\\u3105-\\\\u312f\\\\u3131-\\\\u318e\\\\u3190-\\\\u3191\\\\u3196-\\\\u31ba\\\\u31c0-\\\\u31e3\\\\u31f0-\\\\u321e\\\\u322a-\\\\u3247\\\\u3260-\\\\u327e\\\\u328a-\\\\u32b0\\\\u32c0-\\\\u32cb\\\\u32d0-\\\\u3370\\\\u337b-\\\\u337f\\\\u33e0-\\\\u33fe\\\\u3400-\\\\u4db5\\\\u4e00-\\\\u9fef\\\\ua960-\\\\ua97c\\\\uac00-\\\\ud7a3\\\\ud7b0-\\\\ud7c6\\\\ud7cb-\\\\ud7fb\\\\uf900-\\\\ufa6d\\\\ufa70-\\\\ufad9\\\\ufe10-\\\\ufe1f\\\\ufe30-\\\\ufe6f\\\\uff00-\\\\uffef]|[\\\\ud840-\\\\ud868\\\\ud86a-\\\\ud86c\\\\ud86f-\\\\ud872\\\\ud874-\\\\ud879][\\\\udc00-\\\\udfff]|\\\\ud82c[\\\\udc00-\\\\udd1e\\\\udd50-\\\\udd52\\\\udd64-\\\\udd67]|\\\\ud83c[\\\\ude00\\\\ude50-\\\\ude51]|\\\\ud869[\\\\udc00-\\\\uded6\\\\udf00-\\\\udfff]|\\\\ud86d[\\\\udc00-\\\\udf34\\\\udf40-\\\\udfff]|\\\\ud86e[\\\\udc00-\\\\udc1d\\\\udc20-\\\\udfff]|\\\\ud873[\\\\udc00-\\\\udea1\\\\udeb0-\\\\udfff]|\\\\ud87a[\\\\udc00-\\\\udfe0]|\\\\ud87e[\\\\udc00-\\\\ude1d]\",\n    \"kPattern\": \"[\\\\u1100-\\\\u11ff\\\\u3001-\\\\u3003\\\\u3008-\\\\u3011\\\\u3013-\\\\u301f\\\\u302e-\\\\u3030\\\\u3037\\\\u30fb\\\\u3131-\\\\u318e\\\\u3200-\\\\u321e\\\\u3260-\\\\u327e\\\\ua960-\\\\ua97c\\\\uac00-\\\\ud7a3\\\\ud7b0-\\\\ud7c6\\\\ud7cb-\\\\ud7fb\\\\ufe45-\\\\ufe46\\\\uff61-\\\\uff65\\\\uffa0-\\\\uffbe\\\\uffc2-\\\\uffc7\\\\uffca-\\\\uffcf\\\\uffd2-\\\\uffd7\\\\uffda-\\\\uffdc]\",\n    \"punctuationPattern\": \"[\\\\u0021-\\\\u002f\\\\u003a-\\\\u0040\\\\u005b-\\\\u0060\\\\u007b-\\\\u007e\\\\u00a1\\\\u00a7\\\\u00ab\\\\u00b6-\\\\u00b7\\\\u00bb\\\\u00bf\\\\u037e\\\\u0387\\\\u055a-\\\\u055f\\\\u0589-\\\\u058a\\\\u05be\\\\u05c0\\\\u05c3\\\\u05c6\\\\u05f3-\\\\u05f4\\\\u0609-\\\\u060a\\\\u060c-\\\\u060d\\\\u061b\\\\u061e-\\\\u061f\\\\u066a-\\\\u066d\\\\u06d4\\\\u0700-\\\\u070d\\\\u07f7-\\\\u07f9\\\\u0830-\\\\u083e\\\\u085e\\\\u0964-\\\\u0965\\\\u0970\\\\u09fd\\\\u0a76\\\\u0af0\\\\u0c77\\\\u0c84\\\\u0df4\\\\u0e4f\\\\u0e5a-\\\\u0e5b\\\\u0f04-\\\\u0f12\\\\u0f14\\\\u0f3a-\\\\u0f3d\\\\u0f85\\\\u0fd0-\\\\u0fd4\\\\u0fd9-\\\\u0fda\\\\u104a-\\\\u104f\\\\u10fb\\\\u1360-\\\\u1368\\\\u1400\\\\u166e\\\\u169b-\\\\u169c\\\\u16eb-\\\\u16ed\\\\u1735-\\\\u1736\\\\u17d4-\\\\u17d6\\\\u17d8-\\\\u17da\\\\u1800-\\\\u180a\\\\u1944-\\\\u1945\\\\u1a1e-\\\\u1a1f\\\\u1aa0-\\\\u1aa6\\\\u1aa8-\\\\u1aad\\\\u1b5a-\\\\u1b60\\\\u1bfc-\\\\u1bff\\\\u1c3b-\\\\u1c3f\\\\u1c7e-\\\\u1c7f\\\\u1cc0-\\\\u1cc7\\\\u1cd3\\\\u2010-\\\\u2027\\\\u2030-\\\\u2043\\\\u2045-\\\\u2051\\\\u2053-\\\\u205e\\\\u207d-\\\\u207e\\\\u208d-\\\\u208e\\\\u2308-\\\\u230b\\\\u2329-\\\\u232a\\\\u2768-\\\\u2775\\\\u27c5-\\\\u27c6\\\\u27e6-\\\\u27ef\\\\u2983-\\\\u2998\\\\u29d8-\\\\u29db\\\\u29fc-\\\\u29fd\\\\u2cf9-\\\\u2cfc\\\\u2cfe-\\\\u2cff\\\\u2d70\\\\u2e00-\\\\u2e2e\\\\u2e30-\\\\u2e4f\\\\u3001-\\\\u3003\\\\u3008-\\\\u3011\\\\u3014-\\\\u301f\\\\u3030\\\\u303d\\\\u30a0\\\\u30fb\\\\ua4fe-\\\\ua4ff\\\\ua60d-\\\\ua60f\\\\ua673\\\\ua67e\\\\ua6f2-\\\\ua6f7\\\\ua874-\\\\ua877\\\\ua8ce-\\\\ua8cf\\\\ua8f8-\\\\ua8fa\\\\ua8fc\\\\ua92e-\\\\ua92f\\\\ua95f\\\\ua9c1-\\\\ua9cd\\\\ua9de-\\\\ua9df\\\\uaa5c-\\\\uaa5f\\\\uaade-\\\\uaadf\\\\uaaf0-\\\\uaaf1\\\\uabeb\\\\ufd3e-\\\\ufd3f\\\\ufe10-\\\\ufe19\\\\ufe30-\\\\ufe52\\\\ufe54-\\\\ufe61\\\\ufe63\\\\ufe68\\\\ufe6a-\\\\ufe6b\\\\uff01-\\\\uff03\\\\uff05-\\\\uff0a\\\\uff0c-\\\\uff0f\\\\uff1a-\\\\uff1b\\\\uff1f-\\\\uff20\\\\uff3b-\\\\uff3d\\\\uff3f\\\\uff5b\\\\uff5d\\\\uff5f-\\\\uff65]|\\\\ud800[\\\\udd00-\\\\udd02\\\\udf9f\\\\udfd0]|\\\\ud801[\\\\udd6f]|\\\\ud802[\\\\udc57\\\\udd1f\\\\udd3f\\\\ude50-\\\\ude58\\\\ude7f\\\\udef0-\\\\udef6\\\\udf39-\\\\udf3f\\\\udf99-\\\\udf9c]|\\\\ud803[\\\\udf55-\\\\udf59]|\\\\ud804[\\\\udc47-\\\\udc4d\\\\udcbb-\\\\udcbc\\\\udcbe-\\\\udcc1\\\\udd40-\\\\udd43\\\\udd74-\\\\udd75\\\\uddc5-\\\\uddc8\\\\uddcd\\\\udddb\\\\udddd-\\\\udddf\\\\ude38-\\\\ude3d\\\\udea9]|\\\\ud805[\\\\udc4b-\\\\udc4f\\\\udc5b\\\\udc5d\\\\udcc6\\\\uddc1-\\\\uddd7\\\\ude41-\\\\ude43\\\\ude60-\\\\ude6c\\\\udf3c-\\\\udf3e]|\\\\ud806[\\\\udc3b\\\\udde2\\\\ude3f-\\\\ude46\\\\ude9a-\\\\ude9c\\\\ude9e-\\\\udea2]|\\\\ud807[\\\\udc41-\\\\udc45\\\\udc70-\\\\udc71\\\\udef7-\\\\udef8\\\\udfff]|\\\\ud809[\\\\udc70-\\\\udc74]|\\\\ud81a[\\\\ude6e-\\\\ude6f\\\\udef5\\\\udf37-\\\\udf3b\\\\udf44]|\\\\ud81b[\\\\ude97-\\\\ude9a\\\\udfe2]|\\\\ud82f[\\\\udc9f]|\\\\ud836[\\\\ude87-\\\\ude8b]|\\\\ud83a[\\\\udd5e-\\\\udd5f]\"\n  };\n\n  var cjkPattern = json$1.cjkPattern,\n      kPattern = json$1.kPattern,\n      punctuationPattern = json$1.punctuationPattern;\n  var getLast$3 = util.getLast;\n  var INLINE_NODE_TYPES = [\"liquidNode\", \"inlineCode\", \"emphasis\", \"strong\", \"delete\", \"link\", \"linkReference\", \"image\", \"imageReference\", \"footnote\", \"footnoteReference\", \"sentence\", \"whitespace\", \"word\", \"break\", \"inlineMath\"];\n  var INLINE_NODE_WRAPPER_TYPES = INLINE_NODE_TYPES.concat([\"tableCell\", \"paragraph\", \"heading\"]);\n  var kRegex = new RegExp(kPattern);\n  var punctuationRegex = new RegExp(punctuationPattern);\n  /**\n   * split text into whitespaces and words\n   * @param {string} text\n   * @return {Array<{ type: \"whitespace\", value: \" \" | \"\\n\" | \"\" } | { type: \"word\", value: string }>}\n   */\n\n  function splitText(text, options) {\n    var KIND_NON_CJK = \"non-cjk\";\n    var KIND_CJ_LETTER = \"cj-letter\";\n    var KIND_K_LETTER = \"k-letter\";\n    var KIND_CJK_PUNCTUATION = \"cjk-punctuation\";\n    var nodes = [];\n    (options.proseWrap === \"preserve\" ? text : text.replace(new RegExp(\"(\".concat(cjkPattern, \")\\n(\").concat(cjkPattern, \")\"), \"g\"), \"$1$2\")).split(/([ \\t\\n]+)/).forEach(function (token, index, tokens) {\n      // whitespace\n      if (index % 2 === 1) {\n        nodes.push({\n          type: \"whitespace\",\n          value: /\\n/.test(token) ? \"\\n\" : \" \"\n        });\n        return;\n      } // word separated by whitespace\n\n\n      if ((index === 0 || index === tokens.length - 1) && token === \"\") {\n        return;\n      }\n\n      token.split(new RegExp(\"(\".concat(cjkPattern, \")\"))).forEach(function (innerToken, innerIndex, innerTokens) {\n        if ((innerIndex === 0 || innerIndex === innerTokens.length - 1) && innerToken === \"\") {\n          return;\n        } // non-CJK word\n\n\n        if (innerIndex % 2 === 0) {\n          if (innerToken !== \"\") {\n            appendNode({\n              type: \"word\",\n              value: innerToken,\n              kind: KIND_NON_CJK,\n              hasLeadingPunctuation: punctuationRegex.test(innerToken[0]),\n              hasTrailingPunctuation: punctuationRegex.test(getLast$3(innerToken))\n            });\n          }\n\n          return;\n        } // CJK character\n\n\n        appendNode(punctuationRegex.test(innerToken) ? {\n          type: \"word\",\n          value: innerToken,\n          kind: KIND_CJK_PUNCTUATION,\n          hasLeadingPunctuation: true,\n          hasTrailingPunctuation: true\n        } : {\n          type: \"word\",\n          value: innerToken,\n          kind: kRegex.test(innerToken) ? KIND_K_LETTER : KIND_CJ_LETTER,\n          hasLeadingPunctuation: false,\n          hasTrailingPunctuation: false\n        });\n      });\n    });\n    return nodes;\n\n    function appendNode(node) {\n      var lastNode = getLast$3(nodes);\n\n      if (lastNode && lastNode.type === \"word\") {\n        if (lastNode.kind === KIND_NON_CJK && node.kind === KIND_CJ_LETTER && !lastNode.hasTrailingPunctuation || lastNode.kind === KIND_CJ_LETTER && node.kind === KIND_NON_CJK && !node.hasLeadingPunctuation) {\n          nodes.push({\n            type: \"whitespace\",\n            value: \" \"\n          });\n        } else if (!isBetween(KIND_NON_CJK, KIND_CJK_PUNCTUATION) && // disallow leading/trailing full-width whitespace\n        ![lastNode.value, node.value].some(function (value) {\n          return /\\u3000/.test(value);\n        })) {\n          nodes.push({\n            type: \"whitespace\",\n            value: \"\"\n          });\n        }\n      }\n\n      nodes.push(node);\n\n      function isBetween(kind1, kind2) {\n        return lastNode.kind === kind1 && node.kind === kind2 || lastNode.kind === kind2 && node.kind === kind1;\n      }\n    }\n  }\n\n  function getOrderedListItemInfo(orderListItem, originalText) {\n    var _originalText$slice$m = originalText.slice(orderListItem.position.start.offset, orderListItem.position.end.offset).match(/^\\s*(\\d+)(\\.|\\))(\\s*)/),\n        _originalText$slice$m2 = _slicedToArray(_originalText$slice$m, 4),\n        numberText = _originalText$slice$m2[1],\n        marker = _originalText$slice$m2[2],\n        leadingSpaces = _originalText$slice$m2[3];\n\n    return {\n      numberText: numberText,\n      marker: marker,\n      leadingSpaces: leadingSpaces\n    };\n  } // workaround for https://github.com/remarkjs/remark/issues/351\n  // leading and trailing newlines are stripped by remark\n\n\n  function getFencedCodeBlockValue(node, originalText) {\n    var text = originalText.slice(node.position.start.offset, node.position.end.offset);\n    var leadingSpaceCount = text.match(/^\\s*/)[0].length;\n    var replaceRegex = new RegExp(\"^\\\\s{0,\".concat(leadingSpaceCount, \"}\"));\n    var lineContents = text.split(\"\\n\");\n    var markerStyle = text[leadingSpaceCount]; // ` or ~\n\n    var marker = text.slice(leadingSpaceCount).match(new RegExp(\"^[\".concat(markerStyle, \"]+\")))[0]; // https://spec.commonmark.org/0.28/#example-104: Closing fences may be indented by 0-3 spaces\n    // https://spec.commonmark.org/0.28/#example-93: The closing code fence must be at least as long as the opening fence\n\n    var hasEndMarker = new RegExp(\"^\\\\s{0,3}\".concat(marker)).test(lineContents[lineContents.length - 1].slice(getIndent(lineContents.length - 1)));\n    return lineContents.slice(1, hasEndMarker ? -1 : undefined).map(function (x, i) {\n      return x.slice(getIndent(i + 1)).replace(replaceRegex, \"\");\n    }).join(\"\\n\");\n\n    function getIndent(lineIndex) {\n      return node.position.indent[lineIndex - 1] - 1;\n    }\n  }\n\n  function mapAst(ast, handler) {\n    return function preorder(node, index, parentStack) {\n      parentStack = parentStack || [];\n      var newNode = handler(node, index, parentStack);\n\n      if (Array.isArray(newNode)) {\n        return newNode;\n      }\n\n      newNode = Object.assign({}, newNode);\n\n      if (newNode.children) {\n        newNode.children = newNode.children.reduce(function (nodes, child, index) {\n          var newNodes = preorder(child, index, [newNode].concat(parentStack));\n\n          if (!Array.isArray(newNodes)) {\n            newNodes = [newNodes];\n          }\n\n          nodes.push.apply(nodes, newNodes);\n          return nodes;\n        }, []);\n      }\n\n      return newNode;\n    }(ast, null, null);\n  }\n\n  var utils$5 = {\n    mapAst: mapAst,\n    splitText: splitText,\n    punctuationPattern: punctuationPattern,\n    getFencedCodeBlockValue: getFencedCodeBlockValue,\n    getOrderedListItemInfo: getOrderedListItemInfo,\n    INLINE_NODE_TYPES: INLINE_NODE_TYPES,\n    INLINE_NODE_WRAPPER_TYPES: INLINE_NODE_WRAPPER_TYPES\n  };\n\n  var _require$$0$builders$8 = doc.builders,\n      hardline$b = _require$$0$builders$8.hardline,\n      literalline$5 = _require$$0$builders$8.literalline,\n      concat$f = _require$$0$builders$8.concat,\n      markAsRoot$3 = _require$$0$builders$8.markAsRoot,\n      mapDoc$6 = doc.utils.mapDoc;\n  var getFencedCodeBlockValue$1 = utils$5.getFencedCodeBlockValue;\n\n  function embed$4(path, print, textToDoc, options) {\n    var node = path.getValue();\n\n    if (node.type === \"code\" && node.lang !== null) {\n      // only look for the first string so as to support [markdown-preview-enhanced](https://shd101wyy.github.io/markdown-preview-enhanced/#/code-chunk)\n      var langMatch = node.lang.match(/^[A-Za-z0-9_-]+/);\n      var lang = langMatch ? langMatch[0] : \"\";\n      var parser = getParserName(lang);\n\n      if (parser) {\n        var styleUnit = options.__inJsTemplate ? \"~\" : \"`\";\n        var style = styleUnit.repeat(Math.max(3, util.getMaxContinuousCount(node.value, styleUnit) + 1));\n        var doc = textToDoc(getFencedCodeBlockValue$1(node, options.originalText), {\n          parser: parser\n        });\n        return markAsRoot$3(concat$f([style, node.lang, hardline$b, replaceNewlinesWithLiterallines(doc), style]));\n      }\n    }\n\n    if (node.type === \"yaml\") {\n      return markAsRoot$3(concat$f([\"---\", hardline$b, node.value && node.value.trim() ? replaceNewlinesWithLiterallines(textToDoc(node.value, {\n        parser: \"yaml\"\n      })) : \"\", \"---\"]));\n    } // MDX\n\n\n    switch (node.type) {\n      case \"importExport\":\n        return textToDoc(node.value, {\n          parser: \"babel\"\n        });\n\n      case \"jsx\":\n        return textToDoc(node.value, {\n          parser: \"__js_expression\"\n        });\n    }\n\n    return null;\n\n    function getParserName(lang) {\n      var supportInfo = support.getSupportInfo(null, {\n        plugins: options.plugins\n      });\n      var language = supportInfo.languages.find(function (language) {\n        return language.name.toLowerCase() === lang || language.aliases && language.aliases.indexOf(lang) !== -1 || language.extensions && language.extensions.find(function (ext) {\n          return ext.substring(1) === lang;\n        });\n      });\n\n      if (language) {\n        return language.parsers[0];\n      }\n\n      return null;\n    }\n\n    function replaceNewlinesWithLiterallines(doc) {\n      return mapDoc$6(doc, function (currentDoc) {\n        return typeof currentDoc === \"string\" && currentDoc.includes(\"\\n\") ? concat$f(currentDoc.split(/(\\n)/g).map(function (v, i) {\n          return i % 2 === 0 ? v : literalline$5;\n        })) : currentDoc;\n      });\n    }\n  }\n\n  var embed_1$2 = embed$4;\n\n  var pragmas = [\"format\", \"prettier\"];\n\n  function startWithPragma(text) {\n    var pragma = \"@(\".concat(pragmas.join(\"|\"), \")\");\n    var regex = new RegExp([\"<!--\\\\s*\".concat(pragma, \"\\\\s*-->\"), \"<!--.*\\r?\\n[\\\\s\\\\S]*(^|\\n)[^\\\\S\\n]*\".concat(pragma, \"[^\\\\S\\n]*($|\\n)[\\\\s\\\\S]*\\n.*-->\")].join(\"|\"), \"m\");\n    var matched = text.match(regex);\n    return matched && matched.index === 0;\n  }\n\n  var pragma$4 = {\n    startWithPragma: startWithPragma,\n    hasPragma: function hasPragma(text) {\n      return startWithPragma(frontMatter(text).content.trimLeft());\n    },\n    insertPragma: function insertPragma(text) {\n      var extracted = frontMatter(text);\n      var pragma = \"<!-- @\".concat(pragmas[0], \" -->\");\n      return extracted.frontMatter ? \"\".concat(extracted.frontMatter.raw, \"\\n\\n\").concat(pragma, \"\\n\\n\").concat(extracted.content) : \"\".concat(pragma, \"\\n\\n\").concat(extracted.content);\n    }\n  };\n\n  var getOrderedListItemInfo$1 = utils$5.getOrderedListItemInfo,\n      mapAst$1 = utils$5.mapAst,\n      splitText$1 = utils$5.splitText; // 0x0 ~ 0x10ffff\n  // eslint-disable-next-line no-control-regex\n\n  var isSingleCharRegex = /^([\\u0000-\\uffff]|[\\ud800-\\udbff][\\udc00-\\udfff])$/;\n\n  function preprocess$2(ast, options) {\n    ast = restoreUnescapedCharacter(ast, options);\n    ast = mergeContinuousTexts(ast);\n    ast = transformInlineCode(ast);\n    ast = transformIndentedCodeblockAndMarkItsParentList(ast, options);\n    ast = markAlignedList(ast, options);\n    ast = splitTextIntoSentences(ast, options);\n    ast = transformImportExport(ast);\n    ast = mergeContinuousImportExport(ast);\n    return ast;\n  }\n\n  function transformImportExport(ast) {\n    return mapAst$1(ast, function (node) {\n      if (node.type !== \"import\" && node.type !== \"export\") {\n        return node;\n      }\n\n      return Object.assign({}, node, {\n        type: \"importExport\"\n      });\n    });\n  }\n\n  function transformInlineCode(ast) {\n    return mapAst$1(ast, function (node) {\n      if (node.type !== \"inlineCode\") {\n        return node;\n      }\n\n      return Object.assign({}, node, {\n        value: node.value.replace(/\\s+/g, \" \")\n      });\n    });\n  }\n\n  function restoreUnescapedCharacter(ast, options) {\n    return mapAst$1(ast, function (node) {\n      return node.type !== \"text\" ? node : Object.assign({}, node, {\n        value: node.value !== \"*\" && node.value !== \"_\" && node.value !== \"$\" && // handle these cases in printer\n        isSingleCharRegex.test(node.value) && node.position.end.offset - node.position.start.offset !== node.value.length ? options.originalText.slice(node.position.start.offset, node.position.end.offset) : node.value\n      });\n    });\n  }\n\n  function mergeContinuousImportExport(ast) {\n    return mergeChildren(ast, function (prevNode, node) {\n      return prevNode.type === \"importExport\" && node.type === \"importExport\";\n    }, function (prevNode, node) {\n      return {\n        type: \"importExport\",\n        value: prevNode.value + \"\\n\\n\" + node.value,\n        position: {\n          start: prevNode.position.start,\n          end: node.position.end\n        }\n      };\n    });\n  }\n\n  function mergeChildren(ast, shouldMerge, mergeNode) {\n    return mapAst$1(ast, function (node) {\n      if (!node.children) {\n        return node;\n      }\n\n      var children = node.children.reduce(function (current, child) {\n        var lastChild = current[current.length - 1];\n\n        if (lastChild && shouldMerge(lastChild, child)) {\n          current.splice(-1, 1, mergeNode(lastChild, child));\n        } else {\n          current.push(child);\n        }\n\n        return current;\n      }, []);\n      return Object.assign({}, node, {\n        children: children\n      });\n    });\n  }\n\n  function mergeContinuousTexts(ast) {\n    return mergeChildren(ast, function (prevNode, node) {\n      return prevNode.type === \"text\" && node.type === \"text\";\n    }, function (prevNode, node) {\n      return {\n        type: \"text\",\n        value: prevNode.value + node.value,\n        position: {\n          start: prevNode.position.start,\n          end: node.position.end\n        }\n      };\n    });\n  }\n\n  function splitTextIntoSentences(ast, options) {\n    return mapAst$1(ast, function (node, index, _ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          parentNode = _ref2[0];\n\n      if (node.type !== \"text\") {\n        return node;\n      }\n\n      var value = node.value;\n\n      if (parentNode.type === \"paragraph\") {\n        if (index === 0) {\n          value = value.trimLeft();\n        }\n\n        if (index === parentNode.children.length - 1) {\n          value = value.trimRight();\n        }\n      }\n\n      return {\n        type: \"sentence\",\n        position: node.position,\n        children: splitText$1(value, options)\n      };\n    });\n  }\n\n  function transformIndentedCodeblockAndMarkItsParentList(ast, options) {\n    return mapAst$1(ast, function (node, index, parentStack) {\n      if (node.type === \"code\") {\n        // the first char may point to `\\n`, e.g. `\\n\\t\\tbar`, just ignore it\n        var isIndented = /^\\n?( {4,}|\\t)/.test(options.originalText.slice(node.position.start.offset, node.position.end.offset));\n        node.isIndented = isIndented;\n\n        if (isIndented) {\n          for (var i = 0; i < parentStack.length; i++) {\n            var parent = parentStack[i]; // no need to check checked items\n\n            if (parent.hasIndentedCodeblock) {\n              break;\n            }\n\n            if (parent.type === \"list\") {\n              parent.hasIndentedCodeblock = true;\n            }\n          }\n        }\n      }\n\n      return node;\n    });\n  }\n\n  function markAlignedList(ast, options) {\n    return mapAst$1(ast, function (node, index, parentStack) {\n      if (node.type === \"list\" && node.children.length !== 0) {\n        // if one of its parents is not aligned, it's not possible to be aligned in sub-lists\n        for (var i = 0; i < parentStack.length; i++) {\n          var parent = parentStack[i];\n\n          if (parent.type === \"list\" && !parent.isAligned) {\n            node.isAligned = false;\n            return node;\n          }\n        }\n\n        node.isAligned = isAligned(node);\n      }\n\n      return node;\n    });\n\n    function getListItemStart(listItem) {\n      return listItem.children.length === 0 ? -1 : listItem.children[0].position.start.column - 1;\n    }\n\n    function isAligned(list) {\n      if (!list.ordered) {\n        /**\n         * - 123\n         * - 123\n         */\n        return true;\n      }\n\n      var _list$children = _slicedToArray(list.children, 2),\n          firstItem = _list$children[0],\n          secondItem = _list$children[1];\n\n      var firstInfo = getOrderedListItemInfo$1(firstItem, options.originalText);\n\n      if (firstInfo.leadingSpaces.length > 1) {\n        /**\n         * 1.   123\n         *\n         * 1.   123\n         * 1. 123\n         */\n        return true;\n      }\n\n      var firstStart = getListItemStart(firstItem);\n\n      if (firstStart === -1) {\n        /**\n         * 1.\n         *\n         * 1.\n         * 1.\n         */\n        return false;\n      }\n\n      if (list.children.length === 1) {\n        /**\n         * aligned:\n         *\n         * 11. 123\n         *\n         * not aligned:\n         *\n         * 1. 123\n         */\n        return firstStart % options.tabWidth === 0;\n      }\n\n      var secondStart = getListItemStart(secondItem);\n\n      if (firstStart !== secondStart) {\n        /**\n         * 11. 123\n         * 1. 123\n         *\n         * 1. 123\n         * 11. 123\n         */\n        return false;\n      }\n\n      if (firstStart % options.tabWidth === 0) {\n        /**\n         * 11. 123\n         * 12. 123\n         */\n        return true;\n      }\n      /**\n       * aligned:\n       *\n       * 11. 123\n       * 1.  123\n       *\n       * not aligned:\n       *\n       * 1. 123\n       * 2. 123\n       */\n\n\n      var secondInfo = getOrderedListItemInfo$1(secondItem, options.originalText);\n      return secondInfo.leadingSpaces.length > 1;\n    }\n  }\n\n  var preprocess_1$2 = preprocess$2;\n\n  var _require$$0$builders$9 = doc.builders,\n      breakParent$4 = _require$$0$builders$9.breakParent,\n      concat$g = _require$$0$builders$9.concat,\n      join$b = _require$$0$builders$9.join,\n      line$8 = _require$$0$builders$9.line,\n      literalline$6 = _require$$0$builders$9.literalline,\n      markAsRoot$4 = _require$$0$builders$9.markAsRoot,\n      hardline$c = _require$$0$builders$9.hardline,\n      softline$7 = _require$$0$builders$9.softline,\n      ifBreak$7 = _require$$0$builders$9.ifBreak,\n      fill$5 = _require$$0$builders$9.fill,\n      align$2 = _require$$0$builders$9.align,\n      indent$9 = _require$$0$builders$9.indent,\n      group$f = _require$$0$builders$9.group,\n      mapDoc$7 = doc.utils.mapDoc,\n      printDocToString$2 = doc.printer.printDocToString;\n  var getFencedCodeBlockValue$2 = utils$5.getFencedCodeBlockValue,\n      getOrderedListItemInfo$2 = utils$5.getOrderedListItemInfo,\n      splitText$2 = utils$5.splitText,\n      punctuationPattern$1 = utils$5.punctuationPattern,\n      INLINE_NODE_TYPES$1 = utils$5.INLINE_NODE_TYPES,\n      INLINE_NODE_WRAPPER_TYPES$1 = utils$5.INLINE_NODE_WRAPPER_TYPES;\n  var replaceEndOfLineWith$2 = util.replaceEndOfLineWith;\n  var TRAILING_HARDLINE_NODES = [\"importExport\"];\n  var SINGLE_LINE_NODE_TYPES = [\"heading\", \"tableCell\", \"link\"];\n  var SIBLING_NODE_TYPES = [\"listItem\", \"definition\", \"footnoteDefinition\", \"jsx\"];\n\n  function genericPrint$5(path, options, print) {\n    var node = path.getValue();\n\n    if (shouldRemainTheSameContent(path)) {\n      return concat$g(splitText$2(options.originalText.slice(node.position.start.offset, node.position.end.offset), options).map(function (node) {\n        return node.type === \"word\" ? node.value : node.value === \"\" ? \"\" : printLine(path, node.value, options);\n      }));\n    }\n\n    switch (node.type) {\n      case \"root\":\n        if (node.children.length === 0) {\n          return \"\";\n        }\n\n        return concat$g([normalizeDoc(printRoot(path, options, print)), TRAILING_HARDLINE_NODES.indexOf(getLastDescendantNode(node).type) === -1 ? hardline$c : \"\"]);\n\n      case \"paragraph\":\n        return printChildren$2(path, options, print, {\n          postprocessor: fill$5\n        });\n\n      case \"sentence\":\n        return printChildren$2(path, options, print);\n\n      case \"word\":\n        return node.value.replace(/[*$]/g, \"\\\\$&\") // escape all `*` and `$` (math)\n        .replace(new RegExp([\"(^|\".concat(punctuationPattern$1, \")(_+)\"), \"(_+)(\".concat(punctuationPattern$1, \"|$)\")].join(\"|\"), \"g\"), function (_, text1, underscore1, underscore2, text2) {\n          return (underscore1 ? \"\".concat(text1).concat(underscore1) : \"\".concat(underscore2).concat(text2)).replace(/_/g, \"\\\\_\");\n        });\n      // escape all `_` except concating with non-punctuation, e.g. `1_2_3` is not considered emphasis\n\n      case \"whitespace\":\n        {\n          var parentNode = path.getParentNode();\n          var index = parentNode.children.indexOf(node);\n          var nextNode = parentNode.children[index + 1];\n          var proseWrap = // leading char that may cause different syntax\n          nextNode && /^>|^([-+*]|#{1,6}|[0-9]+[.)])$/.test(nextNode.value) ? \"never\" : options.proseWrap;\n          return printLine(path, node.value, {\n            proseWrap: proseWrap\n          });\n        }\n\n      case \"emphasis\":\n        {\n          var _parentNode = path.getParentNode();\n\n          var _index = _parentNode.children.indexOf(node);\n\n          var prevNode = _parentNode.children[_index - 1];\n          var _nextNode = _parentNode.children[_index + 1];\n          var hasPrevOrNextWord = // `1*2*3` is considered emphasis but `1_2_3` is not\n          prevNode && prevNode.type === \"sentence\" && prevNode.children.length > 0 && util.getLast(prevNode.children).type === \"word\" && !util.getLast(prevNode.children).hasTrailingPunctuation || _nextNode && _nextNode.type === \"sentence\" && _nextNode.children.length > 0 && _nextNode.children[0].type === \"word\" && !_nextNode.children[0].hasLeadingPunctuation;\n          var style = hasPrevOrNextWord || getAncestorNode$2(path, \"emphasis\") ? \"*\" : \"_\";\n          return concat$g([style, printChildren$2(path, options, print), style]);\n        }\n\n      case \"strong\":\n        return concat$g([\"**\", printChildren$2(path, options, print), \"**\"]);\n\n      case \"delete\":\n        return concat$g([\"~~\", printChildren$2(path, options, print), \"~~\"]);\n\n      case \"inlineCode\":\n        {\n          var backtickCount = util.getMinNotPresentContinuousCount(node.value, \"`\");\n\n          var _style = \"`\".repeat(backtickCount || 1);\n\n          var gap = backtickCount ? \" \" : \"\";\n          return concat$g([_style, gap, node.value, gap, _style]);\n        }\n\n      case \"link\":\n        switch (options.originalText[node.position.start.offset]) {\n          case \"<\":\n            {\n              var mailto = \"mailto:\";\n              var url = // <hello@example.com> is parsed as { url: \"mailto:hello@example.com\" }\n              node.url.startsWith(mailto) && options.originalText.slice(node.position.start.offset + 1, node.position.start.offset + 1 + mailto.length) !== mailto ? node.url.slice(mailto.length) : node.url;\n              return concat$g([\"<\", url, \">\"]);\n            }\n\n          case \"[\":\n            return concat$g([\"[\", printChildren$2(path, options, print), \"](\", printUrl(node.url, \")\"), printTitle(node.title, options), \")\"]);\n\n          default:\n            return options.originalText.slice(node.position.start.offset, node.position.end.offset);\n        }\n\n      case \"image\":\n        return concat$g([\"![\", node.alt || \"\", \"](\", printUrl(node.url, \")\"), printTitle(node.title, options), \")\"]);\n\n      case \"blockquote\":\n        return concat$g([\"> \", align$2(\"> \", printChildren$2(path, options, print))]);\n\n      case \"heading\":\n        return concat$g([\"#\".repeat(node.depth) + \" \", printChildren$2(path, options, print)]);\n\n      case \"code\":\n        {\n          if (node.isIndented) {\n            // indented code block\n            var alignment = \" \".repeat(4);\n            return align$2(alignment, concat$g([alignment, concat$g(replaceEndOfLineWith$2(node.value, hardline$c))]));\n          } // fenced code block\n\n\n          var styleUnit = options.__inJsTemplate ? \"~\" : \"`\";\n\n          var _style2 = styleUnit.repeat(Math.max(3, util.getMaxContinuousCount(node.value, styleUnit) + 1));\n\n          return concat$g([_style2, node.lang || \"\", hardline$c, concat$g(replaceEndOfLineWith$2(getFencedCodeBlockValue$2(node, options.originalText), hardline$c)), hardline$c, _style2]);\n        }\n\n      case \"yaml\":\n      case \"toml\":\n        return options.originalText.slice(node.position.start.offset, node.position.end.offset);\n\n      case \"html\":\n        {\n          var _parentNode2 = path.getParentNode();\n\n          var value = _parentNode2.type === \"root\" && util.getLast(_parentNode2.children) === node ? node.value.trimRight() : node.value;\n          var isHtmlComment = /^<!--[\\s\\S]*-->$/.test(value);\n          return concat$g(replaceEndOfLineWith$2(value, isHtmlComment ? hardline$c : markAsRoot$4(literalline$6)));\n        }\n\n      case \"list\":\n        {\n          var nthSiblingIndex = getNthListSiblingIndex(node, path.getParentNode());\n          var isGitDiffFriendlyOrderedList = node.ordered && node.children.length > 1 && +getOrderedListItemInfo$2(node.children[1], options.originalText).numberText === 1;\n          return printChildren$2(path, options, print, {\n            processor: function processor(childPath, index) {\n              var prefix = getPrefix();\n              return concat$g([prefix, align$2(\" \".repeat(prefix.length), printListItem(childPath, options, print, prefix))]);\n\n              function getPrefix() {\n                var rawPrefix = node.ordered ? (index === 0 ? node.start : isGitDiffFriendlyOrderedList ? 1 : node.start + index) + (nthSiblingIndex % 2 === 0 ? \". \" : \") \") : nthSiblingIndex % 2 === 0 ? \"- \" : \"* \";\n                return node.isAligned ||\n                /* workaround for https://github.com/remarkjs/remark/issues/315 */\n                node.hasIndentedCodeblock ? alignListPrefix(rawPrefix, options) : rawPrefix;\n              }\n            }\n          });\n        }\n\n      case \"thematicBreak\":\n        {\n          var counter = getAncestorCounter$1(path, \"list\");\n\n          if (counter === -1) {\n            return \"---\";\n          }\n\n          var _nthSiblingIndex = getNthListSiblingIndex(path.getParentNode(counter), path.getParentNode(counter + 1));\n\n          return _nthSiblingIndex % 2 === 0 ? \"***\" : \"---\";\n        }\n\n      case \"linkReference\":\n        return concat$g([\"[\", printChildren$2(path, options, print), \"]\", node.referenceType === \"full\" ? concat$g([\"[\", node.identifier, \"]\"]) : node.referenceType === \"collapsed\" ? \"[]\" : \"\"]);\n\n      case \"imageReference\":\n        switch (node.referenceType) {\n          case \"full\":\n            return concat$g([\"![\", node.alt || \"\", \"][\", node.identifier, \"]\"]);\n\n          default:\n            return concat$g([\"![\", node.alt, \"]\", node.referenceType === \"collapsed\" ? \"[]\" : \"\"]);\n        }\n\n      case \"definition\":\n        {\n          var lineOrSpace = options.proseWrap === \"always\" ? line$8 : \" \";\n          return group$f(concat$g([concat$g([\"[\", node.identifier, \"]:\"]), indent$9(concat$g([lineOrSpace, printUrl(node.url), node.title === null ? \"\" : concat$g([lineOrSpace, printTitle(node.title, options, false)])]))]));\n        }\n\n      case \"footnote\":\n        return concat$g([\"[^\", printChildren$2(path, options, print), \"]\"]);\n\n      case \"footnoteReference\":\n        return concat$g([\"[^\", node.identifier, \"]\"]);\n\n      case \"footnoteDefinition\":\n        {\n          var _nextNode2 = path.getParentNode().children[path.getName() + 1];\n          var shouldInlineFootnote = node.children.length === 1 && node.children[0].type === \"paragraph\" && (options.proseWrap === \"never\" || options.proseWrap === \"preserve\" && node.children[0].position.start.line === node.children[0].position.end.line);\n          return concat$g([\"[^\", node.identifier, \"]: \", shouldInlineFootnote ? printChildren$2(path, options, print) : group$f(concat$g([align$2(\" \".repeat(options.tabWidth), printChildren$2(path, options, print, {\n            processor: function processor(childPath, index) {\n              return index === 0 ? group$f(concat$g([softline$7, softline$7, childPath.call(print)])) : childPath.call(print);\n            }\n          })), _nextNode2 && _nextNode2.type === \"footnoteDefinition\" ? softline$7 : \"\"]))]);\n        }\n\n      case \"table\":\n        return printTable(path, options, print);\n\n      case \"tableCell\":\n        return printChildren$2(path, options, print);\n\n      case \"break\":\n        return /\\s/.test(options.originalText[node.position.start.offset]) ? concat$g([\"  \", markAsRoot$4(literalline$6)]) : concat$g([\"\\\\\", hardline$c]);\n\n      case \"liquidNode\":\n        return concat$g(replaceEndOfLineWith$2(node.value, hardline$c));\n      // MDX\n\n      case \"importExport\":\n      case \"jsx\":\n        return node.value;\n      // fallback to the original text if multiparser failed\n\n      case \"math\":\n        return concat$g([\"$$\", hardline$c, node.value ? concat$g([concat$g(replaceEndOfLineWith$2(node.value, hardline$c)), hardline$c]) : \"\", \"$$\"]);\n\n      case \"inlineMath\":\n        {\n          // remark-math trims content but we don't want to remove whitespaces\n          // since it's very possible that it's recognized as math accidentally\n          return options.originalText.slice(options.locStart(node), options.locEnd(node));\n        }\n\n      case \"tableRow\": // handled in \"table\"\n\n      case \"listItem\": // handled in \"list\"\n\n      default:\n        throw new Error(\"Unknown markdown type \".concat(JSON.stringify(node.type)));\n    }\n  }\n\n  function printListItem(path, options, print, listPrefix) {\n    var node = path.getValue();\n    var prefix = node.checked === null ? \"\" : node.checked ? \"[x] \" : \"[ ] \";\n    return concat$g([prefix, printChildren$2(path, options, print, {\n      processor: function processor(childPath, index) {\n        if (index === 0 && childPath.getValue().type !== \"list\") {\n          return align$2(\" \".repeat(prefix.length), childPath.call(print));\n        }\n\n        var alignment = \" \".repeat(clamp(options.tabWidth - listPrefix.length, 0, 3) // 4+ will cause indented code block\n        );\n        return concat$g([alignment, align$2(alignment, childPath.call(print))]);\n      }\n    })]);\n  }\n\n  function alignListPrefix(prefix, options) {\n    var additionalSpaces = getAdditionalSpaces();\n    return prefix + \" \".repeat(additionalSpaces >= 4 ? 0 : additionalSpaces // 4+ will cause indented code block\n    );\n\n    function getAdditionalSpaces() {\n      var restSpaces = prefix.length % options.tabWidth;\n      return restSpaces === 0 ? 0 : options.tabWidth - restSpaces;\n    }\n  }\n\n  function getNthListSiblingIndex(node, parentNode) {\n    return getNthSiblingIndex(node, parentNode, function (siblingNode) {\n      return siblingNode.ordered === node.ordered;\n    });\n  }\n\n  function getNthSiblingIndex(node, parentNode, condition) {\n    condition = condition || function () {\n      return true;\n    };\n\n    var index = -1;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = parentNode.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var childNode = _step.value;\n\n        if (childNode.type === node.type && condition(childNode)) {\n          index++;\n        } else {\n          index = -1;\n        }\n\n        if (childNode === node) {\n          return index;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  function getAncestorCounter$1(path, typeOrTypes) {\n    var types = [].concat(typeOrTypes);\n    var counter = -1;\n    var ancestorNode;\n\n    while (ancestorNode = path.getParentNode(++counter)) {\n      if (types.indexOf(ancestorNode.type) !== -1) {\n        return counter;\n      }\n    }\n\n    return -1;\n  }\n\n  function getAncestorNode$2(path, typeOrTypes) {\n    var counter = getAncestorCounter$1(path, typeOrTypes);\n    return counter === -1 ? null : path.getParentNode(counter);\n  }\n\n  function printLine(path, value, options) {\n    if (options.proseWrap === \"preserve\" && value === \"\\n\") {\n      return hardline$c;\n    }\n\n    var isBreakable = options.proseWrap === \"always\" && !getAncestorNode$2(path, SINGLE_LINE_NODE_TYPES);\n    return value !== \"\" ? isBreakable ? line$8 : \" \" : isBreakable ? softline$7 : \"\";\n  }\n\n  function printTable(path, options, print) {\n    var hardlineWithoutBreakParent = hardline$c.parts[0];\n    var node = path.getValue();\n    var contents = []; // { [rowIndex: number]: { [columnIndex: number]: string } }\n\n    path.map(function (rowPath) {\n      var rowContents = [];\n      rowPath.map(function (cellPath) {\n        rowContents.push(printDocToString$2(cellPath.call(print), options).formatted);\n      }, \"children\");\n      contents.push(rowContents);\n    }, \"children\"); // Get the width of each column\n\n    var columnMaxWidths = contents.reduce(function (currentWidths, rowContents) {\n      return currentWidths.map(function (width, columnIndex) {\n        return Math.max(width, util.getStringWidth(rowContents[columnIndex]));\n      });\n    }, contents[0].map(function () {\n      return 3;\n    }) // minimum width = 3 (---, :--, :-:, --:)\n    );\n    var alignedTable = join$b(hardlineWithoutBreakParent, [printRow(contents[0]), printSeparator(), join$b(hardlineWithoutBreakParent, contents.slice(1).map(function (rowContents) {\n      return printRow(rowContents);\n    }))]);\n\n    if (options.proseWrap !== \"never\") {\n      return concat$g([breakParent$4, alignedTable]);\n    } // Only if the --prose-wrap never is set and it exceeds the print width.\n\n\n    var compactTable = join$b(hardlineWithoutBreakParent, [printRow(contents[0],\n    /* isCompact */\n    true), printSeparator(\n    /* isCompact */\n    true), join$b(hardlineWithoutBreakParent, contents.slice(1).map(function (rowContents) {\n      return printRow(rowContents,\n      /* isCompact */\n      true);\n    }))]);\n    return concat$g([breakParent$4, group$f(ifBreak$7(compactTable, alignedTable))]);\n\n    function printSeparator(isCompact) {\n      return concat$g([\"| \", join$b(\" | \", columnMaxWidths.map(function (width, index) {\n        var spaces = isCompact ? 3 : width;\n\n        switch (node.align[index]) {\n          case \"left\":\n            return \":\" + \"-\".repeat(spaces - 1);\n\n          case \"right\":\n            return \"-\".repeat(spaces - 1) + \":\";\n\n          case \"center\":\n            return \":\" + \"-\".repeat(spaces - 2) + \":\";\n\n          default:\n            return \"-\".repeat(spaces);\n        }\n      })), \" |\"]);\n    }\n\n    function printRow(rowContents, isCompact) {\n      return concat$g([\"| \", join$b(\" | \", isCompact ? rowContents : rowContents.map(function (rowContent, columnIndex) {\n        switch (node.align[columnIndex]) {\n          case \"right\":\n            return alignRight(rowContent, columnMaxWidths[columnIndex]);\n\n          case \"center\":\n            return alignCenter(rowContent, columnMaxWidths[columnIndex]);\n\n          default:\n            return alignLeft(rowContent, columnMaxWidths[columnIndex]);\n        }\n      })), \" |\"]);\n    }\n\n    function alignLeft(text, width) {\n      var spaces = width - util.getStringWidth(text);\n      return concat$g([text, \" \".repeat(spaces)]);\n    }\n\n    function alignRight(text, width) {\n      var spaces = width - util.getStringWidth(text);\n      return concat$g([\" \".repeat(spaces), text]);\n    }\n\n    function alignCenter(text, width) {\n      var spaces = width - util.getStringWidth(text);\n      var left = Math.floor(spaces / 2);\n      var right = spaces - left;\n      return concat$g([\" \".repeat(left), text, \" \".repeat(right)]);\n    }\n  }\n\n  function printRoot(path, options, print) {\n    /** @typedef {{ index: number, offset: number }} IgnorePosition */\n\n    /** @type {Array<{start: IgnorePosition, end: IgnorePosition}>} */\n    var ignoreRanges = [];\n    /** @type {IgnorePosition | null} */\n\n    var ignoreStart = null;\n    var children = path.getValue().children;\n    children.forEach(function (childNode, index) {\n      switch (isPrettierIgnore$1(childNode)) {\n        case \"start\":\n          if (ignoreStart === null) {\n            ignoreStart = {\n              index: index,\n              offset: childNode.position.end.offset\n            };\n          }\n\n          break;\n\n        case \"end\":\n          if (ignoreStart !== null) {\n            ignoreRanges.push({\n              start: ignoreStart,\n              end: {\n                index: index,\n                offset: childNode.position.start.offset\n              }\n            });\n            ignoreStart = null;\n          }\n\n          break;\n      }\n    });\n    return printChildren$2(path, options, print, {\n      processor: function processor(childPath, index) {\n        if (ignoreRanges.length !== 0) {\n          var ignoreRange = ignoreRanges[0];\n\n          if (index === ignoreRange.start.index) {\n            return concat$g([children[ignoreRange.start.index].value, options.originalText.slice(ignoreRange.start.offset, ignoreRange.end.offset), children[ignoreRange.end.index].value]);\n          }\n\n          if (ignoreRange.start.index < index && index < ignoreRange.end.index) {\n            return false;\n          }\n\n          if (index === ignoreRange.end.index) {\n            ignoreRanges.shift();\n            return false;\n          }\n        }\n\n        return childPath.call(print);\n      }\n    });\n  }\n\n  function printChildren$2(path, options, print, events) {\n    events = events || {};\n    var postprocessor = events.postprocessor || concat$g;\n\n    var processor = events.processor || function (childPath) {\n      return childPath.call(print);\n    };\n\n    var node = path.getValue();\n    var parts = [];\n    var lastChildNode;\n    path.map(function (childPath, index) {\n      var childNode = childPath.getValue();\n      var result = processor(childPath, index);\n\n      if (result !== false) {\n        var data = {\n          parts: parts,\n          prevNode: lastChildNode,\n          parentNode: node,\n          options: options\n        };\n\n        if (!shouldNotPrePrintHardline(childNode, data)) {\n          parts.push(hardline$c);\n\n          if (lastChildNode && TRAILING_HARDLINE_NODES.indexOf(lastChildNode.type) !== -1) {\n            if (shouldPrePrintTripleHardline(childNode, data)) {\n              parts.push(hardline$c);\n            }\n          } else {\n            if (shouldPrePrintDoubleHardline(childNode, data) || shouldPrePrintTripleHardline(childNode, data)) {\n              parts.push(hardline$c);\n            }\n\n            if (shouldPrePrintTripleHardline(childNode, data)) {\n              parts.push(hardline$c);\n            }\n          }\n        }\n\n        parts.push(result);\n        lastChildNode = childNode;\n      }\n    }, \"children\");\n    return postprocessor(parts);\n  }\n\n  function getLastDescendantNode(node) {\n    var current = node;\n\n    while (current.children && current.children.length !== 0) {\n      current = current.children[current.children.length - 1];\n    }\n\n    return current;\n  }\n  /** @return {false | 'next' | 'start' | 'end'} */\n\n\n  function isPrettierIgnore$1(node) {\n    if (node.type !== \"html\") {\n      return false;\n    }\n\n    var match = node.value.match(/^<!--\\s*prettier-ignore(?:-(start|end))?\\s*-->$/);\n    return match === null ? false : match[1] ? match[1] : \"next\";\n  }\n\n  function isInlineNode(node) {\n    return node && INLINE_NODE_TYPES$1.indexOf(node.type) !== -1;\n  }\n\n  function isEndsWithHardLine(node) {\n    return node && /\\n+$/.test(node.value);\n  }\n\n  function last(nodes) {\n    return nodes && nodes[nodes.length - 1];\n  }\n\n  function shouldNotPrePrintHardline(node, _ref) {\n    var parentNode = _ref.parentNode,\n        parts = _ref.parts,\n        prevNode = _ref.prevNode;\n    var isFirstNode = parts.length === 0;\n    var isInlineHTML = node.type === \"html\" && INLINE_NODE_WRAPPER_TYPES$1.indexOf(parentNode.type) !== -1;\n    var isAfterHardlineNode = prevNode && (isEndsWithHardLine(prevNode) || isEndsWithHardLine(last(prevNode.children)));\n    return isFirstNode || isInlineNode(node) || isInlineHTML || isAfterHardlineNode;\n  }\n\n  function shouldPrePrintDoubleHardline(node, _ref2) {\n    var parentNode = _ref2.parentNode,\n        prevNode = _ref2.prevNode;\n    var prevNodeType = prevNode && prevNode.type;\n    var nodeType = node.type;\n    var isSequence = prevNodeType === nodeType;\n    var isSiblingNode = isSequence && SIBLING_NODE_TYPES.indexOf(nodeType) !== -1;\n    var isInTightListItem = parentNode.type === \"listItem\" && !parentNode.loose;\n    var isPrevNodeLooseListItem = prevNodeType === \"listItem\" && prevNode.loose;\n    var isPrevNodePrettierIgnore = isPrettierIgnore$1(prevNode) === \"next\";\n    var isBlockHtmlWithoutBlankLineBetweenPrevHtml = nodeType === \"html\" && prevNodeType === \"html\" && prevNode.position.end.line + 1 === node.position.start.line;\n    var isJsxInlineSibling = prevNodeType === \"jsx\" && isInlineNode(node) || nodeType === \"jsx\" && isInlineNode(prevNode);\n    return isPrevNodeLooseListItem || !(isSiblingNode || isInTightListItem || isPrevNodePrettierIgnore || isBlockHtmlWithoutBlankLineBetweenPrevHtml || isJsxInlineSibling);\n  }\n\n  function shouldPrePrintTripleHardline(node, data) {\n    var isPrevNodeList = data.prevNode && data.prevNode.type === \"list\";\n    var isIndentedCode = node.type === \"code\" && node.isIndented;\n    return isPrevNodeList && isIndentedCode;\n  }\n\n  function shouldRemainTheSameContent(path) {\n    var ancestorNode = getAncestorNode$2(path, [\"linkReference\", \"imageReference\"]);\n    return ancestorNode && (ancestorNode.type !== \"linkReference\" || ancestorNode.referenceType !== \"full\");\n  }\n\n  function normalizeDoc(doc) {\n    return mapDoc$7(doc, function (currentDoc) {\n      if (!currentDoc.parts) {\n        return currentDoc;\n      }\n\n      if (currentDoc.type === \"concat\" && currentDoc.parts.length === 1) {\n        return currentDoc.parts[0];\n      }\n\n      var parts = [];\n      currentDoc.parts.forEach(function (part) {\n        if (part.type === \"concat\") {\n          parts.push.apply(parts, part.parts);\n        } else if (part !== \"\") {\n          parts.push(part);\n        }\n      });\n      return Object.assign({}, currentDoc, {\n        parts: normalizeParts$2(parts)\n      });\n    });\n  }\n\n  function printUrl(url, dangerousCharOrChars) {\n    var dangerousChars = [\" \"].concat(dangerousCharOrChars || []);\n    return new RegExp(dangerousChars.map(function (x) {\n      return \"\\\\\".concat(x);\n    }).join(\"|\")).test(url) ? \"<\".concat(url, \">\") : url;\n  }\n\n  function printTitle(title, options, printSpace) {\n    if (printSpace == null) {\n      printSpace = true;\n    }\n\n    if (!title) {\n      return \"\";\n    }\n\n    if (printSpace) {\n      return \" \" + printTitle(title, options, false);\n    }\n\n    if (title.includes('\"') && title.includes(\"'\") && !title.includes(\")\")) {\n      return \"(\".concat(title, \")\"); // avoid escaped quotes\n    } // faster than using RegExps: https://jsperf.com/performance-of-match-vs-split\n\n\n    var singleCount = title.split(\"'\").length - 1;\n    var doubleCount = title.split('\"').length - 1;\n    var quote = singleCount > doubleCount ? '\"' : doubleCount > singleCount ? \"'\" : options.singleQuote ? \"'\" : '\"';\n    title = title.replace(new RegExp(\"(\".concat(quote, \")\"), \"g\"), \"\\\\$1\");\n    return \"\".concat(quote).concat(title).concat(quote);\n  }\n\n  function normalizeParts$2(parts) {\n    return parts.reduce(function (current, part) {\n      var lastPart = util.getLast(current);\n\n      if (typeof lastPart === \"string\" && typeof part === \"string\") {\n        current.splice(-1, 1, lastPart + part);\n      } else {\n        current.push(part);\n      }\n\n      return current;\n    }, []);\n  }\n\n  function clamp(value, min, max) {\n    return value < min ? min : value > max ? max : value;\n  }\n\n  function clean$6(ast, newObj, parent) {\n    delete newObj.position;\n    delete newObj.raw; // front-matter\n    // for codeblock\n\n    if (ast.type === \"code\" || ast.type === \"yaml\" || ast.type === \"import\" || ast.type === \"export\" || ast.type === \"jsx\") {\n      delete newObj.value;\n    }\n\n    if (ast.type === \"list\") {\n      delete newObj.isAligned;\n    } // texts can be splitted or merged\n\n\n    if (ast.type === \"text\") {\n      return null;\n    }\n\n    if (ast.type === \"inlineCode\") {\n      newObj.value = ast.value.replace(/[ \\t\\n]+/g, \" \");\n    } // for insert pragma\n\n\n    if (parent && parent.type === \"root\" && parent.children.length > 0 && (parent.children[0] === ast || (parent.children[0].type === \"yaml\" || parent.children[0].type === \"toml\") && parent.children[1] === ast) && ast.type === \"html\" && pragma$4.startWithPragma(ast.value)) {\n      return null;\n    }\n  }\n\n  function hasPrettierIgnore$4(path) {\n    var index = +path.getName();\n\n    if (index === 0) {\n      return false;\n    }\n\n    var prevNode = path.getParentNode().children[index - 1];\n    return isPrettierIgnore$1(prevNode) === \"next\";\n  }\n\n  var printerMarkdown = {\n    preprocess: preprocess_1$2,\n    print: genericPrint$5,\n    embed: embed_1$2,\n    massageAstNode: clean$6,\n    hasPrettierIgnore: hasPrettierIgnore$4,\n    insertPragma: pragma$4.insertPragma\n  };\n\n  var options$6 = {\n    proseWrap: commonOptions.proseWrap,\n    singleQuote: commonOptions.singleQuote\n  };\n\n  var name$g = \"Markdown\";\n  var type$f = \"prose\";\n  var aliases$5 = [\n  \t\"pandoc\"\n  ];\n  var aceMode$f = \"markdown\";\n  var codemirrorMode$b = \"gfm\";\n  var codemirrorMimeType$b = \"text/x-gfm\";\n  var wrap = true;\n  var extensions$f = [\n  \t\".md\",\n  \t\".markdown\",\n  \t\".mdown\",\n  \t\".mdwn\",\n  \t\".mdx\",\n  \t\".mkd\",\n  \t\".mkdn\",\n  \t\".mkdown\",\n  \t\".ronn\",\n  \t\".workbook\"\n  ];\n  var filenames$3 = [\n  \t\"contents.lr\"\n  ];\n  var tmScope$f = \"source.gfm\";\n  var languageId$f = 222;\n  var Markdown = {\n  \tname: name$g,\n  \ttype: type$f,\n  \taliases: aliases$5,\n  \taceMode: aceMode$f,\n  \tcodemirrorMode: codemirrorMode$b,\n  \tcodemirrorMimeType: codemirrorMimeType$b,\n  \twrap: wrap,\n  \textensions: extensions$f,\n  \tfilenames: filenames$3,\n  \ttmScope: tmScope$f,\n  \tlanguageId: languageId$f\n  };\n\n  var Markdown$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$g,\n    type: type$f,\n    aliases: aliases$5,\n    aceMode: aceMode$f,\n    codemirrorMode: codemirrorMode$b,\n    codemirrorMimeType: codemirrorMimeType$b,\n    wrap: wrap,\n    extensions: extensions$f,\n    filenames: filenames$3,\n    tmScope: tmScope$f,\n    languageId: languageId$f,\n    'default': Markdown\n  });\n\n  var require$$0$7 = getCjsExportFromNamespace(Markdown$1);\n\n  var languages$5 = [createLanguage(require$$0$7, function (data) {\n    return Object.assign(data, {\n      since: \"1.8.0\",\n      parsers: [\"remark\"],\n      vscodeLanguageIds: [\"markdown\"],\n      filenames: data.filenames.concat([\"README\"]),\n      extensions: data.extensions.filter(function (extension) {\n        return extension !== \".mdx\";\n      })\n    });\n  }), createLanguage(require$$0$7, function (data) {\n    return Object.assign(data, {\n      name: \"MDX\",\n      since: \"1.15.0\",\n      parsers: [\"mdx\"],\n      vscodeLanguageIds: [\"mdx\"],\n      filenames: [],\n      extensions: [\".mdx\"]\n    });\n  })];\n  var printers$5 = {\n    mdast: printerMarkdown\n  };\n  var languageMarkdown = {\n    languages: languages$5,\n    options: options$6,\n    printers: printers$5\n  };\n\n  function isPragma(text) {\n    return /^\\s*@(prettier|format)\\s*$/.test(text);\n  }\n\n  function hasPragma$4(text) {\n    return /^\\s*#[^\\n\\S]*@(prettier|format)\\s*?(\\n|$)/.test(text);\n  }\n\n  function insertPragma$8(text) {\n    return \"# @format\\n\\n\".concat(text);\n  }\n\n  var pragma$5 = {\n    isPragma: isPragma,\n    hasPragma: hasPragma$4,\n    insertPragma: insertPragma$8\n  };\n\n  var getLast$4 = util.getLast;\n\n  function getAncestorCount(path, filter) {\n    var counter = 0;\n    var pathStackLength = path.stack.length - 1;\n\n    for (var i = 0; i < pathStackLength; i++) {\n      var value = path.stack[i];\n\n      if (isNode(value) && filter(value)) {\n        counter++;\n      }\n    }\n\n    return counter;\n  }\n  /**\n   * @param {any} value\n   * @param {string[]=} types\n   */\n\n\n  function isNode(value, types) {\n    return value && typeof value.type === \"string\" && (!types || types.indexOf(value.type) !== -1);\n  }\n\n  function mapNode(node, callback, parent) {\n    return callback(\"children\" in node ? Object.assign({}, node, {\n      children: node.children.map(function (childNode) {\n        return mapNode(childNode, callback, node);\n      })\n    }) : node, parent);\n  }\n\n  function defineShortcut(x, key, getter) {\n    Object.defineProperty(x, key, {\n      get: getter,\n      enumerable: false\n    });\n  }\n\n  function isNextLineEmpty$5(node, text) {\n    var newlineCount = 0;\n    var textLength = text.length;\n\n    for (var i = node.position.end.offset - 1; i < textLength; i++) {\n      var char = text[i];\n\n      if (char === \"\\n\") {\n        newlineCount++;\n      }\n\n      if (newlineCount === 1 && /\\S/.test(char)) {\n        return false;\n      }\n\n      if (newlineCount === 2) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function isLastDescendantNode(path) {\n    var node = path.getValue();\n\n    switch (node.type) {\n      case \"tag\":\n      case \"anchor\":\n      case \"comment\":\n        return false;\n    }\n\n    var pathStackLength = path.stack.length;\n\n    for (var i = 1; i < pathStackLength; i++) {\n      var item = path.stack[i];\n      var parentItem = path.stack[i - 1];\n\n      if (Array.isArray(parentItem) && typeof item === \"number\" && item !== parentItem.length - 1) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function getLastDescendantNode$1(node) {\n    return \"children\" in node && node.children.length !== 0 ? getLastDescendantNode$1(getLast$4(node.children)) : node;\n  }\n\n  function isPrettierIgnore$2(comment) {\n    return comment.value.trim() === \"prettier-ignore\";\n  }\n\n  function hasPrettierIgnore$5(path) {\n    var node = path.getValue();\n\n    if (node.type === \"documentBody\") {\n      var document = path.getParentNode();\n      return hasEndComments(document.head) && isPrettierIgnore$2(getLast$4(document.head.endComments));\n    }\n\n    return hasLeadingComments(node) && isPrettierIgnore$2(getLast$4(node.leadingComments));\n  }\n\n  function isEmptyNode(node) {\n    return (!node.children || node.children.length === 0) && !hasComments(node);\n  }\n\n  function hasComments(node) {\n    return hasLeadingComments(node) || hasMiddleComments(node) || hasIndicatorComment(node) || hasTrailingComment$2(node) || hasEndComments(node);\n  }\n\n  function hasLeadingComments(node) {\n    return node && node.leadingComments && node.leadingComments.length !== 0;\n  }\n\n  function hasMiddleComments(node) {\n    return node && node.middleComments && node.middleComments.length !== 0;\n  }\n\n  function hasIndicatorComment(node) {\n    return node && node.indicatorComment;\n  }\n\n  function hasTrailingComment$2(node) {\n    return node && node.trailingComment;\n  }\n\n  function hasEndComments(node) {\n    return node && node.endComments && node.endComments.length !== 0;\n  }\n  /**\n   * \" a   b c   d e   f \" -> [\" a   b\", \"c   d\", \"e   f \"]\n   */\n\n\n  function splitWithSingleSpace(text) {\n    var parts = [];\n    var lastPart = undefined;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = text.split(/( +)/g)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var part = _step.value;\n\n        if (part !== \" \") {\n          if (lastPart === \" \") {\n            parts.push(part);\n          } else {\n            parts.push((parts.pop() || \"\") + part);\n          }\n        } else if (lastPart === undefined) {\n          parts.unshift(\"\");\n        }\n\n        lastPart = part;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (lastPart === \" \") {\n      parts.push((parts.pop() || \"\") + \" \");\n    }\n\n    if (parts[0] === \"\") {\n      parts.shift();\n      parts.unshift(\" \" + (parts.shift() || \"\"));\n    }\n\n    return parts;\n  }\n\n  function getFlowScalarLineContents(nodeType, content, options) {\n    var rawLineContents = content.split(\"\\n\").map(function (lineContent, index, lineContents) {\n      return index === 0 && index === lineContents.length - 1 ? lineContent : index !== 0 && index !== lineContents.length - 1 ? lineContent.trim() : index === 0 ? lineContent.trimRight() : lineContent.trimLeft();\n    });\n\n    if (options.proseWrap === \"preserve\") {\n      return rawLineContents.map(function (lineContent) {\n        return lineContent.length === 0 ? [] : [lineContent];\n      });\n    }\n\n    return rawLineContents.map(function (lineContent) {\n      return lineContent.length === 0 ? [] : splitWithSingleSpace(lineContent);\n    }).reduce(function (reduced, lineContentWords, index) {\n      return index !== 0 && rawLineContents[index - 1].length !== 0 && lineContentWords.length !== 0 && !( // trailing backslash in quoteDouble should be preserved\n      nodeType === \"quoteDouble\" && getLast$4(getLast$4(reduced)).endsWith(\"\\\\\")) ? reduced.concat([reduced.pop().concat(lineContentWords)]) : reduced.concat([lineContentWords]);\n    }, []).map(function (lineContentWords) {\n      return options.proseWrap === \"never\" ? [lineContentWords.join(\" \")] : lineContentWords;\n    });\n  }\n\n  function getBlockValueLineContents(node, _ref) {\n    var parentIndent = _ref.parentIndent,\n        isLastDescendant = _ref.isLastDescendant,\n        options = _ref.options;\n    var content = node.position.start.line === node.position.end.line ? \"\" : options.originalText.slice(node.position.start.offset, node.position.end.offset) // exclude open line `>` or `|`\n    .match(/^[^\\n]*?\\n([\\s\\S]*)$/)[1];\n    var leadingSpaceCount = node.indent === null ? function (match) {\n      return match ? match[1].length : Infinity;\n    }(content.match(/^( *)\\S/m)) : node.indent - 1 + parentIndent;\n    var rawLineContents = content.split(\"\\n\").map(function (lineContent) {\n      return lineContent.slice(leadingSpaceCount);\n    });\n\n    if (options.proseWrap === \"preserve\" || node.type === \"blockLiteral\") {\n      return removeUnnecessaryTrailingNewlines(rawLineContents.map(function (lineContent) {\n        return lineContent.length === 0 ? [] : [lineContent];\n      }));\n    }\n\n    return removeUnnecessaryTrailingNewlines(rawLineContents.map(function (lineContent) {\n      return lineContent.length === 0 ? [] : splitWithSingleSpace(lineContent);\n    }).reduce(function (reduced, lineContentWords, index) {\n      return index !== 0 && rawLineContents[index - 1].length !== 0 && lineContentWords.length !== 0 && !/^\\s/.test(lineContentWords[0]) && !/^\\s|\\s$/.test(getLast$4(reduced)) ? reduced.concat([reduced.pop().concat(lineContentWords)]) : reduced.concat([lineContentWords]);\n    }, []).map(function (lineContentWords) {\n      return lineContentWords.reduce(function (reduced, word) {\n        return (// disallow trailing spaces\n          reduced.length !== 0 && /\\s$/.test(getLast$4(reduced)) ? reduced.concat(reduced.pop() + \" \" + word) : reduced.concat(word)\n        );\n      }, []);\n    }).map(function (lineContentWords) {\n      return options.proseWrap === \"never\" ? [lineContentWords.join(\" \")] : lineContentWords;\n    }));\n\n    function removeUnnecessaryTrailingNewlines(lineContents) {\n      if (node.chomping === \"keep\") {\n        return getLast$4(lineContents).length === 0 ? lineContents.slice(0, -1) : lineContents;\n      }\n\n      var trailingNewlineCount = 0;\n\n      for (var i = lineContents.length - 1; i >= 0; i--) {\n        if (lineContents[i].length === 0) {\n          trailingNewlineCount++;\n        } else {\n          break;\n        }\n      }\n\n      return trailingNewlineCount === 0 ? lineContents : trailingNewlineCount >= 2 && !isLastDescendant ? // next empty line\n      lineContents.slice(0, -(trailingNewlineCount - 1)) : lineContents.slice(0, -trailingNewlineCount);\n    }\n  }\n\n  var utils$6 = {\n    getLast: getLast$4,\n    getAncestorCount: getAncestorCount,\n    isNode: isNode,\n    isEmptyNode: isEmptyNode,\n    mapNode: mapNode,\n    defineShortcut: defineShortcut,\n    isNextLineEmpty: isNextLineEmpty$5,\n    isLastDescendantNode: isLastDescendantNode,\n    getBlockValueLineContents: getBlockValueLineContents,\n    getFlowScalarLineContents: getFlowScalarLineContents,\n    getLastDescendantNode: getLastDescendantNode$1,\n    hasPrettierIgnore: hasPrettierIgnore$5,\n    hasLeadingComments: hasLeadingComments,\n    hasMiddleComments: hasMiddleComments,\n    hasIndicatorComment: hasIndicatorComment,\n    hasTrailingComment: hasTrailingComment$2,\n    hasEndComments: hasEndComments\n  };\n\n  var insertPragma$9 = pragma$5.insertPragma,\n      isPragma$1 = pragma$5.isPragma;\n  var getAncestorCount$1 = utils$6.getAncestorCount,\n      getBlockValueLineContents$1 = utils$6.getBlockValueLineContents,\n      getFlowScalarLineContents$1 = utils$6.getFlowScalarLineContents,\n      getLast$5 = utils$6.getLast,\n      getLastDescendantNode$2 = utils$6.getLastDescendantNode,\n      hasLeadingComments$1 = utils$6.hasLeadingComments,\n      hasMiddleComments$1 = utils$6.hasMiddleComments,\n      hasIndicatorComment$1 = utils$6.hasIndicatorComment,\n      hasTrailingComment$3 = utils$6.hasTrailingComment,\n      hasEndComments$1 = utils$6.hasEndComments,\n      hasPrettierIgnore$6 = utils$6.hasPrettierIgnore,\n      isLastDescendantNode$1 = utils$6.isLastDescendantNode,\n      isNextLineEmpty$6 = utils$6.isNextLineEmpty,\n      isNode$1 = utils$6.isNode,\n      isEmptyNode$1 = utils$6.isEmptyNode,\n      defineShortcut$1 = utils$6.defineShortcut,\n      mapNode$1 = utils$6.mapNode;\n  var docBuilders$2 = doc.builders;\n  var conditionalGroup$2 = docBuilders$2.conditionalGroup,\n      breakParent$5 = docBuilders$2.breakParent,\n      concat$h = docBuilders$2.concat,\n      dedent$3 = docBuilders$2.dedent,\n      dedentToRoot$3 = docBuilders$2.dedentToRoot,\n      fill$6 = docBuilders$2.fill,\n      group$g = docBuilders$2.group,\n      hardline$d = docBuilders$2.hardline,\n      ifBreak$8 = docBuilders$2.ifBreak,\n      join$c = docBuilders$2.join,\n      line$9 = docBuilders$2.line,\n      lineSuffix$2 = docBuilders$2.lineSuffix,\n      literalline$7 = docBuilders$2.literalline,\n      markAsRoot$5 = docBuilders$2.markAsRoot,\n      softline$8 = docBuilders$2.softline;\n  var replaceEndOfLineWith$3 = util.replaceEndOfLineWith;\n\n  function preprocess$3(ast) {\n    return mapNode$1(ast, defineShortcuts);\n  }\n\n  function defineShortcuts(node) {\n    switch (node.type) {\n      case \"document\":\n        defineShortcut$1(node, \"head\", function () {\n          return node.children[0];\n        });\n        defineShortcut$1(node, \"body\", function () {\n          return node.children[1];\n        });\n        break;\n\n      case \"documentBody\":\n      case \"sequenceItem\":\n      case \"flowSequenceItem\":\n      case \"mappingKey\":\n      case \"mappingValue\":\n        defineShortcut$1(node, \"content\", function () {\n          return node.children[0];\n        });\n        break;\n\n      case \"mappingItem\":\n      case \"flowMappingItem\":\n        defineShortcut$1(node, \"key\", function () {\n          return node.children[0];\n        });\n        defineShortcut$1(node, \"value\", function () {\n          return node.children[1];\n        });\n        break;\n    }\n\n    return node;\n  }\n\n  function genericPrint$6(path, options, print) {\n    var node = path.getValue();\n    var parentNode = path.getParentNode();\n    var tag = !node.tag ? \"\" : path.call(print, \"tag\");\n    var anchor = !node.anchor ? \"\" : path.call(print, \"anchor\");\n    var nextEmptyLine = isNode$1(node, [\"mapping\", \"sequence\", \"comment\", \"directive\", \"mappingItem\", \"sequenceItem\"]) && !isLastDescendantNode$1(path) ? printNextEmptyLine(path, options.originalText) : \"\";\n    return concat$h([node.type !== \"mappingValue\" && hasLeadingComments$1(node) ? concat$h([join$c(hardline$d, path.map(print, \"leadingComments\")), hardline$d]) : \"\", tag, tag && anchor ? \" \" : \"\", anchor, tag || anchor ? isNode$1(node, [\"sequence\", \"mapping\"]) && !hasMiddleComments$1(node) ? hardline$d : \" \" : \"\", hasMiddleComments$1(node) ? concat$h([node.middleComments.length === 1 ? \"\" : hardline$d, join$c(hardline$d, path.map(print, \"middleComments\")), hardline$d]) : \"\", hasPrettierIgnore$6(path) ? concat$h(replaceEndOfLineWith$3(options.originalText.slice(node.position.start.offset, node.position.end.offset), literalline$7)) : group$g(_print(node, parentNode, path, options, print)), hasTrailingComment$3(node) && !isNode$1(node, [\"document\", \"documentHead\"]) ? lineSuffix$2(concat$h([node.type === \"mappingValue\" && !node.content ? \"\" : \" \", parentNode.type === \"mappingKey\" && path.getParentNode(2).type === \"mapping\" && isInlineNode$1(node) ? \"\" : breakParent$5, path.call(print, \"trailingComment\")])) : \"\", nextEmptyLine, hasEndComments$1(node) && !isNode$1(node, [\"documentHead\", \"documentBody\"]) ? align$3(node.type === \"sequenceItem\" ? 2 : 0, concat$h([hardline$d, join$c(hardline$d, path.map(print, \"endComments\"))])) : \"\"]);\n  }\n\n  function _print(node, parentNode, path, options, print) {\n    switch (node.type) {\n      case \"root\":\n        return concat$h([join$c(hardline$d, path.map(function (childPath, index) {\n          var document = node.children[index];\n          var nextDocument = node.children[index + 1];\n          return concat$h([print(childPath), shouldPrintDocumentEndMarker(document, nextDocument) ? concat$h([hardline$d, \"...\", hasTrailingComment$3(document) ? concat$h([\" \", path.call(print, \"trailingComment\")]) : \"\"]) : !nextDocument || hasTrailingComment$3(nextDocument.head) ? \"\" : concat$h([hardline$d, \"---\"])]);\n        }, \"children\")), node.children.length === 0 || function (lastDescendantNode) {\n          return isNode$1(lastDescendantNode, [\"blockLiteral\", \"blockFolded\"]) && lastDescendantNode.chomping === \"keep\";\n        }(getLastDescendantNode$2(node)) ? \"\" : hardline$d]);\n\n      case \"document\":\n        {\n          var nextDocument = parentNode.children[path.getName() + 1];\n          return join$c(hardline$d, [shouldPrintDocumentHeadEndMarker(node, nextDocument, parentNode, options) === \"head\" ? join$c(hardline$d, [node.head.children.length === 0 && node.head.endComments.length === 0 ? \"\" : path.call(print, \"head\"), concat$h([\"---\", hasTrailingComment$3(node.head) ? concat$h([\" \", path.call(print, \"head\", \"trailingComment\")]) : \"\"])].filter(Boolean)) : \"\", shouldPrintDocumentBody(node) ? path.call(print, \"body\") : \"\"].filter(Boolean));\n        }\n\n      case \"documentHead\":\n        return join$c(hardline$d, [].concat(path.map(print, \"children\"), path.map(print, \"endComments\")));\n\n      case \"documentBody\":\n        {\n          var children = join$c(hardline$d, path.map(print, \"children\")).parts;\n          var endComments = join$c(hardline$d, path.map(print, \"endComments\")).parts;\n          var separator = children.length === 0 || endComments.length === 0 ? \"\" : function (lastDescendantNode) {\n            return isNode$1(lastDescendantNode, [\"blockFolded\", \"blockLiteral\"]) ? lastDescendantNode.chomping === \"keep\" ? // there's already a newline printed at the end of blockValue (chomping=keep, lastDescendant=true)\n            \"\" : // an extra newline for better readability\n            concat$h([hardline$d, hardline$d]) : hardline$d;\n          }(getLastDescendantNode$2(node));\n          return concat$h([].concat(children, separator, endComments));\n        }\n\n      case \"directive\":\n        return concat$h([\"%\", join$c(\" \", [node.name].concat(node.parameters))]);\n\n      case \"comment\":\n        return concat$h([\"#\", node.value]);\n\n      case \"alias\":\n        return concat$h([\"*\", node.value]);\n\n      case \"tag\":\n        return options.originalText.slice(node.position.start.offset, node.position.end.offset);\n\n      case \"anchor\":\n        return concat$h([\"&\", node.value]);\n\n      case \"plain\":\n        return printFlowScalarContent(node.type, options.originalText.slice(node.position.start.offset, node.position.end.offset), options);\n\n      case \"quoteDouble\":\n      case \"quoteSingle\":\n        {\n          var singleQuote = \"'\";\n          var doubleQuote = '\"';\n          var raw = options.originalText.slice(node.position.start.offset + 1, node.position.end.offset - 1);\n\n          if (node.type === \"quoteSingle\" && raw.includes(\"\\\\\") || node.type === \"quoteDouble\" && /\\\\[^\"]/.test(raw)) {\n            // only quoteDouble can use escape chars\n            // and quoteSingle do not need to escape backslashes\n            var originalQuote = node.type === \"quoteDouble\" ? doubleQuote : singleQuote;\n            return concat$h([originalQuote, printFlowScalarContent(node.type, raw, options), originalQuote]);\n          } else if (raw.includes(doubleQuote)) {\n            return concat$h([singleQuote, printFlowScalarContent(node.type, node.type === \"quoteDouble\" ? raw // double quote needs to be escaped by backslash in quoteDouble\n            .replace(/\\\\\"/g, doubleQuote).replace(/'/g, singleQuote.repeat(2)) : raw, options), singleQuote]);\n          }\n\n          if (raw.includes(singleQuote)) {\n            return concat$h([doubleQuote, printFlowScalarContent(node.type, node.type === \"quoteSingle\" ? // single quote needs to be escaped by 2 single quotes in quoteSingle\n            raw.replace(/''/g, singleQuote) : raw, options), doubleQuote]);\n          }\n\n          var quote = options.singleQuote ? singleQuote : doubleQuote;\n          return concat$h([quote, printFlowScalarContent(node.type, raw, options), quote]);\n        }\n\n      case \"blockFolded\":\n      case \"blockLiteral\":\n        {\n          var parentIndent = getAncestorCount$1(path, function (ancestorNode) {\n            return isNode$1(ancestorNode, [\"sequence\", \"mapping\"]);\n          });\n          var isLastDescendant = isLastDescendantNode$1(path);\n          return concat$h([node.type === \"blockFolded\" ? \">\" : \"|\", node.indent === null ? \"\" : node.indent.toString(), node.chomping === \"clip\" ? \"\" : node.chomping === \"keep\" ? \"+\" : \"-\", hasIndicatorComment$1(node) ? concat$h([\" \", path.call(print, \"indicatorComment\")]) : \"\", (node.indent === null ? dedent$3 : dedentToRoot$3)(align$3(node.indent === null ? options.tabWidth : node.indent - 1 + parentIndent, concat$h(getBlockValueLineContents$1(node, {\n            parentIndent: parentIndent,\n            isLastDescendant: isLastDescendant,\n            options: options\n          }).reduce(function (reduced, lineWords, index, lineContents) {\n            return reduced.concat(index === 0 ? hardline$d : \"\", fill$6(join$c(line$9, lineWords).parts), index !== lineContents.length - 1 ? lineWords.length === 0 ? hardline$d : markAsRoot$5(literalline$7) : node.chomping === \"keep\" && isLastDescendant ? lineWords.length === 0 ? dedentToRoot$3(hardline$d) : dedentToRoot$3(literalline$7) : \"\");\n          }, []))))]);\n        }\n\n      case \"sequence\":\n        return join$c(hardline$d, path.map(print, \"children\"));\n\n      case \"sequenceItem\":\n        return concat$h([\"- \", align$3(2, !node.content ? \"\" : path.call(print, \"content\"))]);\n\n      case \"mappingKey\":\n        return !node.content ? \"\" : path.call(print, \"content\");\n\n      case \"mappingValue\":\n        return !node.content ? \"\" : path.call(print, \"content\");\n\n      case \"mapping\":\n        return join$c(hardline$d, path.map(print, \"children\"));\n\n      case \"mappingItem\":\n      case \"flowMappingItem\":\n        {\n          var isEmptyMappingKey = isEmptyNode$1(node.key);\n          var isEmptyMappingValue = isEmptyNode$1(node.value);\n\n          if (isEmptyMappingKey && isEmptyMappingValue) {\n            return concat$h([\": \"]);\n          }\n\n          var key = path.call(print, \"key\");\n          var value = path.call(print, \"value\");\n\n          if (isEmptyMappingValue) {\n            return node.type === \"flowMappingItem\" && parentNode.type === \"flowMapping\" ? key : node.type === \"mappingItem\" && isAbsolutelyPrintedAsSingleLineNode(node.key.content, options) && !hasTrailingComment$3(node.key.content) && (!parentNode.tag || parentNode.tag.value !== \"tag:yaml.org,2002:set\") ? concat$h([key, needsSpaceInFrontOfMappingValue(node) ? \" \" : \"\", \":\"]) : concat$h([\"? \", align$3(2, key)]);\n          }\n\n          if (isEmptyMappingKey) {\n            return concat$h([\": \", align$3(2, value)]);\n          }\n\n          var groupId = Symbol(\"mappingKey\");\n          var forceExplicitKey = hasLeadingComments$1(node.value) || !isInlineNode$1(node.key.content);\n          return forceExplicitKey ? concat$h([\"? \", align$3(2, key), hardline$d, join$c(\"\", path.map(print, \"value\", \"leadingComments\").map(function (comment) {\n            return concat$h([comment, hardline$d]);\n          })), \": \", align$3(2, value)]) : // force singleline\n          isSingleLineNode(node.key.content) && !hasLeadingComments$1(node.key.content) && !hasMiddleComments$1(node.key.content) && !hasTrailingComment$3(node.key.content) && !hasEndComments$1(node.key) && !hasLeadingComments$1(node.value.content) && !hasMiddleComments$1(node.value.content) && !hasEndComments$1(node.value) && isAbsolutelyPrintedAsSingleLineNode(node.value.content, options) ? concat$h([key, needsSpaceInFrontOfMappingValue(node) ? \" \" : \"\", \": \", value]) : conditionalGroup$2([concat$h([group$g(concat$h([ifBreak$8(\"? \"), group$g(align$3(2, key), {\n            id: groupId\n          })])), ifBreak$8(concat$h([hardline$d, \": \", align$3(2, value)]), indent(concat$h([needsSpaceInFrontOfMappingValue(node) ? \" \" : \"\", \":\", hasLeadingComments$1(node.value.content) || hasEndComments$1(node.value) && node.value.content && !isNode$1(node.value.content, [\"mapping\", \"sequence\"]) || parentNode.type === \"mapping\" && hasTrailingComment$3(node.key.content) && isInlineNode$1(node.value.content) || isNode$1(node.value.content, [\"mapping\", \"sequence\"]) && node.value.content.tag === null && node.value.content.anchor === null ? hardline$d : !node.value.content ? \"\" : line$9, value])), {\n            groupId: groupId\n          })])]);\n        }\n\n      case \"flowMapping\":\n      case \"flowSequence\":\n        {\n          var openMarker = node.type === \"flowMapping\" ? \"{\" : \"[\";\n          var closeMarker = node.type === \"flowMapping\" ? \"}\" : \"]\";\n          var bracketSpacing = node.type === \"flowMapping\" && node.children.length !== 0 && options.bracketSpacing ? line$9 : softline$8;\n\n          var isLastItemEmptyMappingItem = node.children.length !== 0 && function (lastItem) {\n            return lastItem.type === \"flowMappingItem\" && isEmptyNode$1(lastItem.key) && isEmptyNode$1(lastItem.value);\n          }(getLast$5(node.children));\n\n          return concat$h([openMarker, indent(concat$h([bracketSpacing, concat$h(path.map(function (childPath, index) {\n            return concat$h([print(childPath), index === node.children.length - 1 ? \"\" : concat$h([\",\", line$9, node.children[index].position.start.line !== node.children[index + 1].position.start.line ? printNextEmptyLine(childPath, options.originalText) : \"\"])]);\n          }, \"children\")), ifBreak$8(\",\", \"\")])), isLastItemEmptyMappingItem ? \"\" : bracketSpacing, closeMarker]);\n        }\n\n      case \"flowSequenceItem\":\n        return path.call(print, \"content\");\n      // istanbul ignore next\n\n      default:\n        throw new Error(\"Unexpected node type \".concat(node.type));\n    }\n\n    function indent(doc) {\n      return docBuilders$2.align(\" \".repeat(options.tabWidth), doc);\n    }\n  }\n\n  function align$3(n, doc) {\n    return typeof n === \"number\" && n > 0 ? docBuilders$2.align(\" \".repeat(n), doc) : docBuilders$2.align(n, doc);\n  }\n\n  function isInlineNode$1(node) {\n    if (!node) {\n      return true;\n    }\n\n    switch (node.type) {\n      case \"plain\":\n      case \"quoteDouble\":\n      case \"quoteSingle\":\n      case \"alias\":\n      case \"flowMapping\":\n      case \"flowSequence\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  function isSingleLineNode(node) {\n    if (!node) {\n      return true;\n    }\n\n    switch (node.type) {\n      case \"plain\":\n      case \"quoteDouble\":\n      case \"quoteSingle\":\n        return node.position.start.line === node.position.end.line;\n\n      case \"alias\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  function shouldPrintDocumentBody(document) {\n    return document.body.children.length !== 0 || hasEndComments$1(document.body);\n  }\n\n  function shouldPrintDocumentEndMarker(document, nextDocument) {\n    return (\n      /**\n       *... # trailingComment\n       */\n      hasTrailingComment$3(document) || nextDocument && (\n      /**\n       * ...\n       * %DIRECTIVE\n       * ---\n       */\n      nextDocument.head.children.length !== 0 ||\n      /**\n       * ...\n       * # endComment\n       * ---\n       */\n      hasEndComments$1(nextDocument.head))\n    );\n  }\n\n  function shouldPrintDocumentHeadEndMarker(document, nextDocument, root, options) {\n    if (\n    /**\n     * ---\n     * preserve the first document head end marker\n     */\n    root.children[0] === document && /---(\\s|$)/.test(options.originalText.slice(options.locStart(document), options.locStart(document) + 4)) ||\n    /**\n     * %DIRECTIVE\n     * ---\n     */\n    document.head.children.length !== 0 ||\n    /**\n     * # end comment\n     * ---\n     */\n    hasEndComments$1(document.head) ||\n    /**\n     * --- # trailing comment\n     */\n    hasTrailingComment$3(document.head)) {\n      return \"head\";\n    }\n\n    if (shouldPrintDocumentEndMarker(document, nextDocument)) {\n      return false;\n    }\n\n    return nextDocument ? \"root\" : false;\n  }\n\n  function isAbsolutelyPrintedAsSingleLineNode(node, options) {\n    if (!node) {\n      return true;\n    }\n\n    switch (node.type) {\n      case \"plain\":\n      case \"quoteSingle\":\n      case \"quoteDouble\":\n        break;\n\n      case \"alias\":\n        return true;\n\n      default:\n        return false;\n    }\n\n    if (options.proseWrap === \"preserve\") {\n      return node.position.start.line === node.position.end.line;\n    }\n\n    if ( // backslash-newline\n    /\\\\$/m.test(options.originalText.slice(node.position.start.offset, node.position.end.offset))) {\n      return false;\n    }\n\n    switch (options.proseWrap) {\n      case \"never\":\n        return node.value.indexOf(\"\\n\") === -1;\n\n      case \"always\":\n        return !/[\\n ]/.test(node.value);\n      // istanbul ignore next\n\n      default:\n        return false;\n    }\n  }\n\n  function needsSpaceInFrontOfMappingValue(node) {\n    return node.key.content && node.key.content.type === \"alias\";\n  }\n\n  function printNextEmptyLine(path, originalText) {\n    var node = path.getValue();\n    var root = path.stack[0];\n    root.isNextEmptyLinePrintedChecklist = root.isNextEmptyLinePrintedChecklist || [];\n\n    if (!root.isNextEmptyLinePrintedChecklist[node.position.end.line]) {\n      if (isNextLineEmpty$6(node, originalText)) {\n        root.isNextEmptyLinePrintedChecklist[node.position.end.line] = true;\n        return softline$8;\n      }\n    }\n\n    return \"\";\n  }\n\n  function printFlowScalarContent(nodeType, content, options) {\n    var lineContents = getFlowScalarLineContents$1(nodeType, content, options);\n    return join$c(hardline$d, lineContents.map(function (lineContentWords) {\n      return fill$6(join$c(line$9, lineContentWords).parts);\n    }));\n  }\n\n  function clean$7(node, newNode\n  /*, parent */\n  ) {\n    if (isNode$1(newNode)) {\n      delete newNode.position;\n\n      switch (newNode.type) {\n        case \"comment\":\n          // insert pragma\n          if (isPragma$1(newNode.value)) {\n            return null;\n          }\n\n          break;\n\n        case \"quoteDouble\":\n        case \"quoteSingle\":\n          newNode.type = \"quote\";\n          break;\n      }\n    }\n  }\n\n  var printerYaml = {\n    preprocess: preprocess$3,\n    print: genericPrint$6,\n    massageAstNode: clean$7,\n    insertPragma: insertPragma$9\n  };\n\n  var options$7 = {\n    bracketSpacing: commonOptions.bracketSpacing,\n    singleQuote: commonOptions.singleQuote,\n    proseWrap: commonOptions.proseWrap\n  };\n\n  var name$h = \"YAML\";\n  var type$g = \"data\";\n  var tmScope$g = \"source.yaml\";\n  var aliases$6 = [\n  \t\"yml\"\n  ];\n  var extensions$g = [\n  \t\".yml\",\n  \t\".mir\",\n  \t\".reek\",\n  \t\".rviz\",\n  \t\".sublime-syntax\",\n  \t\".syntax\",\n  \t\".yaml\",\n  \t\".yaml-tmlanguage\",\n  \t\".yml.mysql\"\n  ];\n  var filenames$4 = [\n  \t\".clang-format\",\n  \t\".clang-tidy\",\n  \t\".gemrc\",\n  \t\"glide.lock\"\n  ];\n  var aceMode$g = \"yaml\";\n  var codemirrorMode$c = \"yaml\";\n  var codemirrorMimeType$c = \"text/x-yaml\";\n  var languageId$g = 407;\n  var YAML = {\n  \tname: name$h,\n  \ttype: type$g,\n  \ttmScope: tmScope$g,\n  \taliases: aliases$6,\n  \textensions: extensions$g,\n  \tfilenames: filenames$4,\n  \taceMode: aceMode$g,\n  \tcodemirrorMode: codemirrorMode$c,\n  \tcodemirrorMimeType: codemirrorMimeType$c,\n  \tlanguageId: languageId$g\n  };\n\n  var YAML$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    name: name$h,\n    type: type$g,\n    tmScope: tmScope$g,\n    aliases: aliases$6,\n    extensions: extensions$g,\n    filenames: filenames$4,\n    aceMode: aceMode$g,\n    codemirrorMode: codemirrorMode$c,\n    codemirrorMimeType: codemirrorMimeType$c,\n    languageId: languageId$g,\n    'default': YAML\n  });\n\n  var require$$0$8 = getCjsExportFromNamespace(YAML$1);\n\n  var languages$6 = [createLanguage(require$$0$8, function (data) {\n    return Object.assign(data, {\n      since: \"1.14.0\",\n      parsers: [\"yaml\"],\n      vscodeLanguageIds: [\"yaml\"]\n    });\n  })];\n  var languageYaml = {\n    languages: languages$6,\n    printers: {\n      yaml: printerYaml\n    },\n    options: options$7\n  };\n\n  var version$2 = require$$0.version;\n  var getSupportInfo$2 = support.getSupportInfo;\n  var internalPlugins = [languageCss, languageGraphql, languageHandlebars, languageHtml, languageJs, languageMarkdown, languageYaml];\n\n  var isArray$1 = Array.isArray || function (arr) {\n    return Object.prototype.toString.call(arr) === \"[object Array]\";\n  }; // Luckily `opts` is always the 2nd argument\n\n\n  function withPlugins(fn) {\n    return function () {\n      var args = Array.from(arguments);\n      var plugins = args[1] && args[1].plugins || [];\n\n      if (!isArray$1(plugins)) {\n        plugins = Object.values(plugins);\n      }\n\n      args[1] = Object.assign({}, args[1], {\n        plugins: internalPlugins.concat(plugins)\n      });\n      return fn.apply(null, args);\n    };\n  }\n\n  var formatWithCursor = withPlugins(core.formatWithCursor);\n  var standalone = {\n    formatWithCursor: formatWithCursor,\n    format: function format(text, opts) {\n      return formatWithCursor(text, opts).formatted;\n    },\n    check: function check(text, opts) {\n      var formatted = formatWithCursor(text, opts).formatted;\n      return formatted === text;\n    },\n    doc: doc,\n    getSupportInfo: withPlugins(getSupportInfo$2),\n    version: version$2,\n    util: utilShared,\n    __debug: {\n      parse: withPlugins(core.parse),\n      formatAST: withPlugins(core.formatAST),\n      formatDoc: withPlugins(core.formatDoc),\n      printToDoc: withPlugins(core.printToDoc),\n      printDocToString: withPlugins(core.printDocToString)\n    }\n  };\n\n  var standalone$1 = standalone;\n\n  return standalone$1;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/prettier/standalone.js\n"));

/***/ })

}]);