{"type":"data","nodes":[{"type":"data","data":[{"navigation":1},{"Getting started":2,"Components":14},{"Introduction":3,"Installation":4,"Less":5,"Sass":6,"JavaScript":7,"Webpack":8,"Custom icons":9,"Avoiding conflicts":10,"Accessibility":11,"RTL support":12,"Migration":13},"introduction","installation","less","sass","javascript","webpack","custom-icons","avoiding-conflicts","accessibility","rtl","migration",{"Accordion":15,"Alert":16,"Align":17,"Animation":18,"Article":19,"Background":20,"Badge":21,"Base":22,"Breadcrumb":23,"Button":24,"Card":25,"Close":26,"Column":27,"Comment":28,"Container":29,"Countdown":30,"Cover":31,"Description List":32,"Divider":33,"Dotnav":34,"Drop":35,"Dropbar":36,"Dropdown":37,"Dropnav":38,"Filter":39,"Flex":40,"Form":41,"Grid":42,"Heading":43,"Height":44,"Icon":45,"Iconnav":46,"Image":47,"Inverse":48,"Label":49,"Leader":50,"Lightbox":51,"Link":52,"List":53,"Margin":54,"Marker":55,"Modal":56,"Nav":57,"Navbar":58,"Notification":59,"Off-canvas":60,"Overlay":61,"Padding":62,"Pagination":63,"Parallax":64,"Placeholder":65,"Position":66,"Print":67,"Progress":68,"Scroll":69,"Scrollspy":70,"Search":71,"Section":72,"Slidenav":73,"Slider":74,"Slideshow":75,"Sortable":76,"Spinner":77,"Sticky":78,"Subnav":79,"SVG":80,"Switcher":81,"Tab":82,"Table":83,"Text":84,"Thumbnav":85,"Tile":86,"Toggle":87,"Tooltip":88,"Totop":89,"Transition":90,"Upload":91,"Utility":92,"Video":93,"Visibility":94,"Width":95},"accordion","alert","align","animation","article","background","badge","base","breadcrumb","button","card","close","column","comment","container","countdown","cover","description-list","divider","dotnav","drop","dropbar","dropdown","dropnav","filter","flex","form","grid","heading","height","icon","iconnav","image","inverse","label","leader","lightbox","link","list","margin","marker","modal","nav","navbar","notification","offcanvas","overlay","padding","pagination","parallax","placeholder","position","print","progress","scroll","scrollspy","search","section","slidenav","slider","slideshow","sortable","spinner","sticky","subnav","svg","switcher","tab","table","text","thumbnav","tile","toggle","tooltip","totop","transition","upload","utility","video","visibility","width"],"uses":{},"slash":"never"},{"type":"data","data":[{"test":1,"doc":2},false,{"ids":3,"content":19,"title":20},[4,7,10,13,16],{"id":5,"title":6},"uikit-and-reactive-javascript-frameworks","UIkit and reactive JavaScript frameworks",{"id":8,"title":9},"component-usage","Component usage",{"id":11,"title":12},"component-configuration","Component configuration",{"id":14,"title":15},"programmatic-use","Programmatic use",{"id":17,"title":18},"uikit-initialization","UIkit initialization","\u003Ch1>JavaScript\u003C/h1>\u003Cp>Once you have \u003Ca href=\"/docs/installation\">installed UIkit\u003C/a>, include the JavaScript files on your page by adding them to the \u003Ccode>&lt;head&gt;\u003C/code> section. You can also choose to use the \u003Ccode>defer\u003C/code> attribute to delay script execution.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">script\u003C/span> \u003Cspan class=\"hljs-attr\">src\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;js/uikit.min.js&quot;\u003C/span>&gt;\u003C/span>\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">script\u003C/span>&gt;\u003C/span>\n\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">script\u003C/span> \u003Cspan class=\"hljs-attr\">src\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;js/uikit-icons.min.js&quot;\u003C/span>&gt;\u003C/span>\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">script\u003C/span>&gt;\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003Chr class=\"uk-margin-large\">\u003Ch2 id=\"uikit-and-reactive-javascript-frameworks\" class=\"uk-h3 tm-heading-fragment\">\u003Ca href=\"#uikit-and-reactive-javascript-frameworks\">UIkit and reactive JavaScript frameworks\u003C/a>\u003C/h2>\u003Cp>UIkit is listening for DOM manipulations and will automatically initialize, connect and disconnect components as they are inserted or removed from the DOM. That way it can easily be used with JavaScript frameworks like \u003Ca href=\"http://vuejs.org/\">Vue.js\u003C/a> and React.\u003C/p>\n\u003Chr class=\"uk-margin-large\">\u003Ch2 id=\"component-usage\" class=\"uk-h3 tm-heading-fragment\">\u003Ca href=\"#component-usage\">Component usage\u003C/a>\u003C/h2>\u003Cp>You can use UIkit components by adding \u003Ccode>uk-*\u003C/code> or \u003Ccode>data-uk-*\u003C/code> attributes to your HTML elements without writing a single line of JavaScript. This is UIkit&#39;s best practice of using its components and should always be considered first.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>&lt;\u003Cspan class=\"hljs-keyword\">div\u003C/span> uk-sticky=\u003Cspan class=\"hljs-string\">&quot;offset: 50;&quot;\u003C/span>&gt;&lt;/\u003Cspan class=\"hljs-keyword\">div\u003C/span>&gt;\n\n&lt;\u003Cspan class=\"hljs-keyword\">div\u003C/span> data-uk-sticky=\u003Cspan class=\"hljs-string\">&quot;offset: 50;&quot;\u003C/span>&gt;&lt;/\u003Cspan class=\"hljs-keyword\">div\u003C/span>&gt;\u003C/code>\u003C/pre>\u003C/div>\u003Cp>\u003Cspan class=\"uk-label\">Note\u003C/span> \u003Ca href=\"https://facebook.github.io/react/\">React\u003C/a> will work with \u003Ccode>data-uk-*\u003C/code> prefixes only.\u003C/p>\n\u003Cp>You can also initialize components via JavaScript and apply them to elements in your document.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-keyword\">var\u003C/span> sticky = UIkit.\u003Cspan class=\"hljs-title function_ invoke__\">sticky\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;#sticky&#x27;\u003C/span>, {\n    \u003Cspan class=\"hljs-attr\">offset\u003C/span>: \u003Cspan class=\"hljs-number\">50\u003C/span>\n});\u003C/code>\u003C/pre>\u003C/div>\u003Cp>You can retrieve an already initialized component by passing a selector or an element as a first Argument to the component function.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-keyword\">var\u003C/span> sticky = UIkit.sticky(\u003Cspan class=\"hljs-string\">&#x27;#sticky&#x27;\u003C/span>);\u003C/code>\u003C/pre>\u003C/div>\u003Cp>Omitting the second parameter will not re-initialize the component but serve as a getter function.\u003C/p>\n\u003Chr class=\"uk-margin-large\">\u003Ch2 id=\"component-configuration\" class=\"uk-h3 tm-heading-fragment\">\u003Ca href=\"#component-configuration\">Component configuration\u003C/a>\u003C/h2>\u003Cp>Each component comes with a set of configuration options that let you customize their behavior. You can set the options on a per-instance level or globally.\u003C/p>\n\u003Ch3 id=\"instance\" class=\"uk-h4 tm-heading-fragment\">\u003Ca href=\"#instance\">Instance\u003C/a>\u003C/h3>\u003Cp>Options can be set as shown in the following examples. \u003C/p>\n\u003Cp>With the \u003Ccode>key: value;\u003C/code> format:\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>&lt;\u003Cspan class=\"hljs-keyword\">div\u003C/span> uk-sticky=\u003Cspan class=\"hljs-string\">&quot;start: 100; offset: 50;&quot;\u003C/span>&gt;&lt;/\u003Cspan class=\"hljs-keyword\">div\u003C/span>&gt;\u003C/code>\u003C/pre>\u003C/div>\u003Cp>In valid JSON format:\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>&lt;\u003Cspan class=\"hljs-keyword\">div\u003C/span> uk-sticky=&#x27;{\u003Cspan class=\"hljs-string\">&quot;start&quot;\u003C/span>: \u003Cspan class=\"hljs-number\">100\u003C/span>, \u003Cspan class=\"hljs-string\">&quot;offset&quot;\u003C/span>: \u003Cspan class=\"hljs-number\">50\u003C/span>}&#x27;&gt;&lt;/\u003Cspan class=\"hljs-keyword\">div\u003C/span>&gt;\u003C/code>\u003C/pre>\u003C/div>\u003Cp>As single attributes:\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>&lt;\u003Cspan class=\"hljs-keyword\">div\u003C/span> uk-sticky \u003Cspan class=\"hljs-built_in\">start\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;100&quot;\u003C/span> \u003Cspan class=\"hljs-built_in\">offset\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;50&quot;\u003C/span>&gt;&lt;/\u003Cspan class=\"hljs-keyword\">div\u003C/span>&gt;\u003C/code>\u003C/pre>\u003C/div>\u003Cp>Or as single attributes prefixed with \u003Ccode>data-\u003C/code>:\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>&lt;\u003Cspan class=\"hljs-keyword\">div\u003C/span> uk-sticky data-\u003Cspan class=\"hljs-built_in\">start\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;100&quot;\u003C/span> data-\u003Cspan class=\"hljs-built_in\">offset\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;50&quot;\u003C/span>&gt;&lt;/\u003Cspan class=\"hljs-keyword\">div\u003C/span>&gt;\u003C/code>\u003C/pre>\u003C/div>\u003Cp>For \u003Cem>Primary\u003C/em> options, its key may be omitted, if it&#39;s the only option in the attribute value. Please take a look at the specific component documentation to find which option is the \u003Cem>Primary\u003C/em> option.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">span\u003C/span> \u003Cspan class=\"hljs-attr\">uk-icon\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;home&quot;\u003C/span>&gt;\u003C/span>\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">span\u003C/span>&gt;\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003Cp>You can also pass options to the component constructor programmatically.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>// \u003Cspan class=\"hljs-keyword\">Passing\u003C/span> an \u003Cspan class=\"hljs-keyword\">options\u003C/span> \u003Cspan class=\"hljs-keyword\">object\u003C/span>.\nUIkit.sticky(\u003Cspan class=\"hljs-string\">&#x27;.sticky&#x27;\u003C/span>, {\n    \u003Cspan class=\"hljs-keyword\">offset\u003C/span>: \u003Cspan class=\"hljs-number\">50\u003C/span>,\n    top: \u003Cspan class=\"hljs-number\">100\u003C/span>\n});\n\n// \u003Cspan class=\"hljs-keyword\">If\u003C/span> the component supports \u003Cspan class=\"hljs-keyword\">Primary\u003C/span> \u003Cspan class=\"hljs-keyword\">options\u003C/span>.\nUIkit.\u003Cspan class=\"hljs-keyword\">drop\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;#drop&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;top-left&#x27;\u003C/span>);\u003C/code>\u003C/pre>\u003C/div>\u003Ch3 id=\"precedence\" class=\"uk-h4 tm-heading-fragment\">\u003Ca href=\"#precedence\">Precedence\u003C/a>\u003C/h3>\u003Cp>Options passed via the component attribute will have the highest precedence, followed by single attributes and then JavaScript.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-tag\">&lt;\u003Cspan class=\"hljs-name\">div\u003C/span> \u003Cspan class=\"hljs-attr\">uk-sticky\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;offset: 50;&quot;\u003C/span> \u003Cspan class=\"hljs-attr\">offset\u003C/span>=\u003Cspan class=\"hljs-string\">&quot;100&quot;\u003C/span>&gt;\u003C/span>\u003Cspan class=\"hljs-tag\">&lt;/\u003Cspan class=\"hljs-name\">div\u003C/span>&gt;\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">&lt;!-- The offset will be 50 --&gt;\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003Ch3 id=\"globally\" class=\"uk-h4 tm-heading-fragment\">\u003Ca href=\"#globally\">Globally\u003C/a>\u003C/h3>\u003Cp>Component options can be changed globally by extending a component. It will affect newly created instances only.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>UIkit.\u003Cspan class=\"hljs-keyword\">mixin\u003C/span>({\n    data: {\n        offset: \u003Cspan class=\"hljs-number\">50\u003C/span>,\n        top: \u003Cspan class=\"hljs-number\">100\u003C/span>\n    }\n}, \u003Cspan class=\"hljs-string\">&#x27;sticky&#x27;\u003C/span>);\u003C/code>\u003C/pre>\u003C/div>\u003Cp>Omitting the second parameter, will apply the custom behavior to every UIkit instance created afterwards.\u003C/p>\n\u003Chr class=\"uk-margin-large\">\u003Ch2 id=\"programmatic-use\" class=\"uk-h3 tm-heading-fragment\">\u003Ca href=\"#programmatic-use\">Programmatic use\u003C/a>\u003C/h2>\u003Cp>Programmatically, components may be initialized with the \u003Ccode>element, options\u003C/code> arguments format in JavaScript. The \u003Ccode>element\u003C/code> argument may be any \u003Ccode>Node\u003C/code>, \u003Ccode>selector\u003C/code> or \u003Ccode>jQuery object\u003C/code>. You&#39;ll receive the initialized component as a return value. \u003Ccode>Functional Components\u003C/code> (e.g. \u003Ccode>Notification\u003C/code>) should omit the \u003Ccode>element\u003C/code> parameter.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-comment\">// Passing a selector and an options object.\u003C/span>\n\u003Cspan class=\"hljs-keyword\">var\u003C/span> sticky = UIkit.\u003Cspan class=\"hljs-title function_ invoke__\">sticky\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;.sticky&#x27;\u003C/span>, {\n    \u003Cspan class=\"hljs-attr\">offset\u003C/span>: \u003Cspan class=\"hljs-number\">50\u003C/span>,\n    \u003Cspan class=\"hljs-attr\">top\u003C/span>: \u003Cspan class=\"hljs-number\">100\u003C/span>\n});\n\n\u003Cspan class=\"hljs-comment\">// Functional components should omit the &#x27;element&#x27; argument.\u003C/span>\n\u003Cspan class=\"hljs-keyword\">var\u003C/span> notifications = UIkit.\u003Cspan class=\"hljs-title function_ invoke__\">notification\u003C/span>(\u003Cspan class=\"hljs-string\">&#x27;MyMessage&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;danger&#x27;\u003C/span>);\u003C/code>\u003C/pre>\u003C/div>\u003Cp>\u003Cspan class=\"uk-label\">Note\u003C/span>\nThe options names must be in their camel-cased representation, e.g. \u003Ccode>show-on-up\u003C/code> becomes \u003Ccode>showOnUp\u003C/code>.\u003C/p>\n\u003Cp>After initialization, you can get your component by calling the same initialization function, omitting the \u003Ccode>options\u003C/code> parameter.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-comment\">// Sticky is now the prior initialised components\u003C/span>\n\u003Cspan class=\"hljs-keyword\">var\u003C/span> sticky = UIkit.sticky(\u003Cspan class=\"hljs-string\">&#x27;.sticky&#x27;\u003C/span>);\u003C/code>\u003C/pre>\u003C/div>\u003Cp>\u003Cspan class=\"uk-label\">Note\u003C/span>\nUsing \u003Ccode>UIkit[componentName](selector)\u003C/code> with CSS selectors will always return the first occurrence only!\nIf you need to access all instances do \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\">query\u003C/a> the elements first. Then apply the getter to each element separately - \u003Ccode>UIkit[componentName](element)\u003C/code>.\u003C/p>\n\u003Cp>Initializing your components programmatically gives you the possibility to invoke their functions directly.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>UIkit.offcanvas(\u003Cspan class=\"hljs-string\">&#x27;#offcanvas&#x27;\u003C/span>).\u003Cspan class=\"hljs-keyword\">toggle\u003C/span>();\u003C/code>\u003C/pre>\u003C/div>\u003Cp>Any component functions and variables prefixed with an underscore are considered as part of the internal API, which may change at any given time.\u003C/p>\n\u003Cp>Each component triggers DOM events that you can react to. For example when a Modal is shown or a Scrollspy element becomes visible.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>UIkit.util.on(\u003Cspan class=\"hljs-string\">&#x27;#offcanvas&#x27;\u003C/span>, \u003Cspan class=\"hljs-string\">&#x27;show&#x27;\u003C/span>, \u003Cspan class=\"hljs-keyword\">function\u003C/span> \u003Cspan class=\"hljs-params\">()\u003C/span> {\n    \u003Cspan class=\"hljs-comment\">// do something\u003C/span>\n});\u003C/code>\u003C/pre>\u003C/div>\u003Cp>The component&#39;s documentation page lists its events.\u003C/p>\n\u003Cp>\u003Cspan class=\"uk-label\">Note\u003C/span> Components often trigger events with the same name (e.g. &#39;show&#39;). Usually events \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture\">bubble through the DOM\u003C/a>. Check the event target, to ensure the event was triggered by the desired component.\u003C/p>\n\u003Cp>Sometimes, components like Grid or Tab are hidden in the markup. This may happen when used in combination with the Switcher, Modal or Dropdown. Once they become visible, they need to adjust or fix their height and other dimensions.\u003C/p>\n\u003Cp>UIkit offers several ways of updating a component. Omitting the \u003Ccode>type\u003C/code> parameter will trigger an \u003Ccode>update\u003C/code> event.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-comment\">// Calls the update hook on components registered on the element itself, its parents and children.\u003C/span>\nUIkit.update(element = document.body, \u003Cspan class=\"hljs-keyword\">type\u003C/span> = \u003Cspan class=\"hljs-string\">&#x27;update&#x27;\u003C/span>);\n\n\u003Cspan class=\"hljs-comment\">// Updates the component itself.\u003C/span>\ncomponent.$emit(\u003Cspan class=\"hljs-keyword\">type\u003C/span> = \u003Cspan class=\"hljs-string\">&#x27;update&#x27;\u003C/span>);\n\u003C/code>\u003C/pre>\u003C/div>\u003Cp>If you need to make sure a component is properly destroyed, for example upon removal from the DOM, you can call its \u003Ccode>$destroy\u003C/code> function.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-comment\">// Destroys the component. For example unbind its event listeners.\u003C/span>\ncomponent.\u003Cspan class=\"hljs-symbol\">$destroy\u003C/span>();\n\n\u003Cspan class=\"hljs-comment\">// Also destroys the component, but also removes the element from the DOM.\u003C/span>\ncomponent.\u003Cspan class=\"hljs-symbol\">$destroy\u003C/span>(\u003Cspan class=\"hljs-literal\">true\u003C/span>);\u003C/code>\u003C/pre>\u003C/div>\u003Chr class=\"uk-margin-large\">\u003Ch2 id=\"uikit-initialization\" class=\"uk-h3 tm-heading-fragment\">\u003Ca href=\"#uikit-initialization\">UIkit initialization\u003C/a>\u003C/h2>\u003Cp>You might need to execute code after UIkit is loaded, but before it initializes its components on the page.\u003C/p>\n\u003Cp>This hook allows you to register custom components or component mixins.\u003C/p>\n\u003Cp>You can hook into this step in the lifecycle by listening for the \u003Ccode>uikit:init\u003C/code> event UIkit triggers on the document.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>document.addEventListener(\u003Cspan class=\"hljs-string\">&#x27;uikit:init&#x27;\u003C/span>, \u003Cspan class=\"hljs-function\">\u003Cspan class=\"hljs-params\">()\u003C/span> =&gt;\u003C/span> {\n    \u003Cspan class=\"hljs-regexp\">//\u003C/span> \u003Cspan class=\"hljs-keyword\">do\u003C/span> something\n})\u003C/code>\u003C/pre>\u003C/div>","JavaScript"],"uses":{"params":["slug"]}}]}
