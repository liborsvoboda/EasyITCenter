{"type":"data","nodes":[{"type":"data","data":[{"navigation":1},{"Getting started":2,"Components":14},{"Introduction":3,"Installation":4,"Less":5,"Sass":6,"JavaScript":7,"Webpack":8,"Custom icons":9,"Avoiding conflicts":10,"Accessibility":11,"RTL support":12,"Migration":13},"introduction","installation","less","sass","javascript","webpack","custom-icons","avoiding-conflicts","accessibility","rtl","migration",{"Accordion":15,"Alert":16,"Align":17,"Animation":18,"Article":19,"Background":20,"Badge":21,"Base":22,"Breadcrumb":23,"Button":24,"Card":25,"Close":26,"Column":27,"Comment":28,"Container":29,"Countdown":30,"Cover":31,"Description List":32,"Divider":33,"Dotnav":34,"Drop":35,"Dropbar":36,"Dropdown":37,"Dropnav":38,"Filter":39,"Flex":40,"Form":41,"Grid":42,"Heading":43,"Height":44,"Icon":45,"Iconnav":46,"Image":47,"Inverse":48,"Label":49,"Leader":50,"Lightbox":51,"Link":52,"List":53,"Margin":54,"Marker":55,"Modal":56,"Nav":57,"Navbar":58,"Notification":59,"Off-canvas":60,"Overlay":61,"Padding":62,"Pagination":63,"Parallax":64,"Placeholder":65,"Position":66,"Print":67,"Progress":68,"Scroll":69,"Scrollspy":70,"Search":71,"Section":72,"Slidenav":73,"Slider":74,"Slideshow":75,"Sortable":76,"Spinner":77,"Sticky":78,"Subnav":79,"SVG":80,"Switcher":81,"Tab":82,"Table":83,"Text":84,"Thumbnav":85,"Tile":86,"Toggle":87,"Tooltip":88,"Totop":89,"Transition":90,"Upload":91,"Utility":92,"Video":93,"Visibility":94,"Width":95},"accordion","alert","align","animation","article","background","badge","base","breadcrumb","button","card","close","column","comment","container","countdown","cover","description-list","divider","dotnav","drop","dropbar","dropdown","dropnav","filter","flex","form","grid","heading","height","icon","iconnav","image","inverse","label","leader","lightbox","link","list","margin","marker","modal","nav","navbar","notification","offcanvas","overlay","padding","pagination","parallax","placeholder","position","print","progress","scroll","scrollspy","search","section","slidenav","slider","slideshow","sortable","spinner","sticky","subnav","svg","switcher","tab","table","text","thumbnav","tile","toggle","tooltip","totop","transition","upload","utility","video","visibility","width"],"uses":{},"slash":"never"},{"type":"data","data":[{"test":1,"doc":2},false,{"ids":3,"content":13,"title":14},[4,7,10],{"id":5,"title":6},"how-to-build","How to build",{"id":8,"title":9},"create-a-uikit-theme","Create a UIkit theme",{"id":11,"title":12},"how-to-structure-your-theme","How to structure your theme","\u003Ch1>Sass\u003C/h1>\u003Cp class=\"uk-text-lead\">Learn how to modify the UIkit styling and create your own theme with Sass.\u003C/p>\n\n\u003Cp>When you have \u003Ca href=\"/docs/installation\">installed UIkit\u003C/a> with sources you will find the UIkit Sass version within the \u003Cem>/src/scss\u003C/em> folder. The Sass version allows you to include customizations in the build process, rather than manually overwriting a lot of CSS rules by hand.\u003C/p>\n\u003Cp>\u003Cspan class=\"uk-label\">Note\u003C/span> Sass allows two different syntax versions: Sass and SCSS. UIkit makes use of the SCSS syntax.\u003C/p>\n\u003Chr class=\"uk-margin-large\">\u003Ch2 id=\"how-to-build\" class=\"uk-h3 tm-heading-fragment\">\u003Ca href=\"#how-to-build\">How to build\u003C/a>\u003C/h2>\u003Cp>To include UIkit in your project&#39;s build workflow, you need to import three SCSS files from UIkit in the correct order into in your own SCSS code. Then, compile your file, e.g. running \u003Ccode>sass site.scss &gt; site.css\u003C/code> or any other \u003Ca href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html#using_sass\">Sass compiler\u003C/a>. Be careful to keep the correct order as described in the following example.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-comment\">// 1. Your custom variables and variable overwrites.\u003C/span>\n\u003Cspan class=\"hljs-variable\">$global-link-color\u003C/span>: \u003Cspan class=\"hljs-number\">#DA7D02\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 2. Import default variables and available mixins.\u003C/span>\n\u003Cspan class=\"hljs-keyword\">@import\u003C/span> \u003Cspan class=\"hljs-string\">&quot;uikit/src/scss/variables-theme.scss&quot;\u003C/span>;\n\u003Cspan class=\"hljs-keyword\">@import\u003C/span> \u003Cspan class=\"hljs-string\">&quot;uikit/src/scss/mixins-theme.scss&quot;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 3. Your custom mixin overwrites.\u003C/span>\n\u003Cspan class=\"hljs-keyword\">@mixin\u003C/span> hook-card() { \u003Cspan class=\"hljs-attribute\">color\u003C/span>: \u003Cspan class=\"hljs-number\">#000\u003C/span>; }\n\n\u003Cspan class=\"hljs-comment\">// 4. Import UIkit.\u003C/span>\n\u003Cspan class=\"hljs-keyword\">@import\u003C/span> \u003Cspan class=\"hljs-string\">&quot;uikit/src/scss/uikit-theme.scss&quot;\u003C/span>;\u003C/code>\u003C/pre>\u003C/div>\u003Cp>\u003Cspan class=\"uk-label\">Note\u003C/span> The example uses the styling of the included default theme. Alternatively, you can import \u003Ccode>variables.scss\u003C/code>, \u003Ccode>mixins.scss\u003C/code> and \u003Ccode>uikit.scss\u003C/code> to only include the core styling.\u003C/p>\n\u003Chr class=\"uk-margin-large\">\u003Ch2 id=\"create-a-uikit-theme\" class=\"uk-h3 tm-heading-fragment\">\u003Ca href=\"#create-a-uikit-theme\">Create a UIkit theme\u003C/a>\u003C/h2>\u003Cp>When you have set up a file to put in your own SCSS code, you can get started to theme UIkit the way you want. If you have never used SCSS before, check out the \u003Ca href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html#features\">language features\u003C/a>. When working with the UIkit SCSS sources, we have a few recommendations.\u003C/p>\n\u003Ch3 id=\"use-variables\" class=\"uk-h4 tm-heading-fragment\">\u003Ca href=\"#use-variables\">Use variables\u003C/a>\u003C/h3>\u003Cp>A lot of customization is possible by simply overwriting the values of already declared variables. You can find all variables for each component inside their SCSS files of the framework or the \u003Ccode>variables.scss\u003C/code> file and override them in your theme.\u003C/p>\n\u003Cp>First, find a SCSS variable you want to change inside the UIkit source. For example, the global link color is defined in \u003Ccode>/src/scss/components/variables.scss\u003C/code>:\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-comment\">// default value\u003C/span>\n\u003Cspan class=\"hljs-variable\">$global\u003C/span>-link-\u003Cspan class=\"hljs-attribute\">color\u003C/span>: \u003Cspan class=\"hljs-number\">#4091D2\u003C/span>;\u003C/code>\u003C/pre>\u003C/div>\u003Cp>Then, overwrite the default by setting a custom value inside your own file, i.e. to \u003Ccode>site.scss\u003C/code> as described above:\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-comment\">// new value\u003C/span>\n\u003Cspan class=\"hljs-variable\">$global\u003C/span>-link-\u003Cspan class=\"hljs-attribute\">color\u003C/span>: \u003Cspan class=\"hljs-number\">#DA7D02\u003C/span>;\u003C/code>\u003C/pre>\u003C/div>\u003Cp>The compiled CSS will then have your custom value. But not only has the global link color changed. Many components make use of the \u003Ccode>@global-*\u003C/code> variables to infer their own colors, and just adapt them slightly. That way you can rapidly create a theme by just changing some global variables.\u003C/p>\n\u003Ch3 id=\"use-hooks\" class=\"uk-h4 tm-heading-fragment\">\u003Ca href=\"#use-hooks\">Use hooks\u003C/a>\u003C/h3>\u003Cp>To prevent overhead selectors, we use Mixins from \u003Ca href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\">Sass\u003C/a>, which hook into predefined selectors from the UIkit source and inject additional properties. Selectors don&#39;t have to be repeated throughout all documents and global changes can be made much more easily.\u003C/p>\n\u003Cp>First, find a rule that you want to extend by looking through the component&#39;s SCSS file, for example \u003Ccode>/src/scss/components/card.scss\u003C/code> for the Card component:\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-comment\">// SCSS rule\u003C/span>\n\u003Cspan class=\"hljs-selector-class\">.uk-card\u003C/span> {\n    \u003Cspan class=\"hljs-attribute\">position\u003C/span>: relative;\n    \u003Cspan class=\"hljs-attribute\">box-sizing\u003C/span>: border-box;\n\n    \u003Cspan class=\"hljs-comment\">// mixin to allow adding new declaration\u003C/span>\n    \u003Cspan class=\"hljs-variable\">@include\u003C/span> \u003Cspan class=\"hljs-built_in\">hook-card\u003C/span>();\n}\u003C/code>\u003C/pre>\u003C/div>\u003Cp>Then, inject additional CSS by using the hook inside your own SCSS file, i.e. to \u003Ccode>site.scss\u003C/code> as described above:\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-comment\">// mixin to add new declaration\u003C/span>\n@\u003Cspan class=\"hljs-keyword\">mixin\u003C/span> hook-card() { color: #\u003Cspan class=\"hljs-number\">000\u003C/span>; }\u003C/code>\u003C/pre>\u003C/div>\u003Ch3 id=\"inverse-hooks\" class=\"uk-h4 tm-heading-fragment\">\u003Ca href=\"#inverse-hooks\">Inverse hooks\u003C/a>\u003C/h3>\u003Cp>Inverse hooks allow you to customize how a component is styled when used in combination with the \u003Ccode>.uk-light\u003C/code> or \u003Ccode>.uk-dark\u003C/code> modifiers (check out the \u003Ca href=\"/docs/inverse\">Inverse component\u003C/a> for details). These hooks are handled a little differently in the Sass version compared to the Less version. In the Sass version, every component has its own inverse hooks. You can see all available ones when going through the file \u003Ccode>src/scss/mixins.scss\u003C/code>.\u003C/p>\n\u003Cp>For example, you can make a default button appear with a custom background whenever it is used as an inverse version.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>@\u003Cspan class=\"hljs-keyword\">mixin\u003C/span> hook-inverse-button-\u003Cspan class=\"hljs-keyword\">default\u003C/span>(){\n    background: lime;\n}\u003C/code>\u003C/pre>\u003C/div>\u003Ch3 id=\"miscellaneous-hooks\" class=\"uk-h4 tm-heading-fragment\">\u003Ca href=\"#miscellaneous-hooks\">Miscellaneous hooks\u003C/a>\u003C/h3>\u003Cp>Should there be neither a variable nor a hook available, you can also create your own selector. To do so, e.g. use the \u003Cem>hook-card-misc()\u003C/em> mixin of the Card component and write a selector inside. This will sort your new selector to the right place in the compiled CSS file. Just add the following lines to your own SCSS file, i.e. to \u003Ccode>site.scss\u003C/code> as described above:\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-comment\">// misc mixin\u003C/span>\n@\u003Cspan class=\"hljs-keyword\">mixin\u003C/span> hook-card-misc() {\n\n    \u003Cspan class=\"hljs-comment\">// new rule\u003C/span>\n    .uk-card a { color: #f00; }\n}\u003C/code>\u003C/pre>\u003C/div>\u003Ch3 id=\"disable-inverse-component\" class=\"uk-h4 tm-heading-fragment\">\u003Ca href=\"#disable-inverse-component\">Disable inverse component\u003C/a>\u003C/h3>\u003Cp>The Inverse component includes additional styles to implement the flexible inverse behaviour. If your project does not make use of these styles, you can leave them out when compiling Sass. This allows smaller file sizes of the compiled CSS. To do so, search for Sass variables containing \u003Ccode>color-mode\u003C/code> (e.g. \u003Ccode>$inverse-global-color-mode\u003C/code>), and set them to \u003Ccode>none\u003C/code>.\u003C/p>\n\u003Cp>To disable the inverse styles completely, set:\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>$inverse-\u003Cspan class=\"hljs-keyword\">global\u003C/span>-\u003Cspan class=\"hljs-keyword\">color\u003C/span>-mode: none;\u003C/code>\u003C/pre>\u003C/div>\u003Cp>You can also disable the inverse mode for specific components:\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-comment\">// Card\u003C/span>\n\u003Cspan class=\"hljs-meta\">\u003Cspan class=\"hljs-keyword\">$card\u003C/span>-primary-color-mode: none;\u003C/span>\n\u003Cspan class=\"hljs-meta\">\u003Cspan class=\"hljs-keyword\">$card\u003C/span>-secondary-color-mode: none;\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// Navbar\u003C/span>\n\u003Cspan class=\"hljs-meta\">\u003Cspan class=\"hljs-keyword\">$navbar\u003C/span>-color-mode: none;\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// Off-canvas\u003C/span>\n\u003Cspan class=\"hljs-meta\">\u003Cspan class=\"hljs-keyword\">$offcanvas\u003C/span>-bar-color-mode: none;\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// Overlay\u003C/span>\n\u003Cspan class=\"hljs-meta\">\u003Cspan class=\"hljs-keyword\">$overlay\u003C/span>-primary-color-mode: none;\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// Section\u003C/span>\n\u003Cspan class=\"hljs-meta\">\u003Cspan class=\"hljs-keyword\">$section\u003C/span>-primary-color-mode: none;\u003C/span>\n\u003Cspan class=\"hljs-meta\">\u003Cspan class=\"hljs-keyword\">$section\u003C/span>-secondary-color-mode: none;\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// Tile\u003C/span>\n\u003Cspan class=\"hljs-meta\">\u003Cspan class=\"hljs-keyword\">$tile\u003C/span>-primary-color-mode: none;\u003C/span>\n\u003Cspan class=\"hljs-meta\">\u003Cspan class=\"hljs-keyword\">$tile\u003C/span>-secondary-color-mode: none;\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003Chr class=\"uk-margin-large\">\u003Ch2 id=\"how-to-structure-your-theme\" class=\"uk-h3 tm-heading-fragment\">\u003Ca href=\"#how-to-structure-your-theme\">How to structure your theme\u003C/a>\u003C/h2>\u003Cp>In the examples above, we have added all custom rules directly to \u003Ccode>site.scss\u003C/code>. When you change a few variables but are happy with the rest, this is perfectly fine. However, for larger customizations, we recommend only using this file as an entry point for the Sass compiler. You should sort all rules into a single file per component inside of a subfolder. This is the same structure that you can find in the default theme \u003Ccode>/src/scss/theme\u003C/code>.\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-comment\">&lt;!-- uikit sources, might be in a subfolder when using npm --&gt;\u003C/span>\nuikit/src/scss/\n\n    components/\n        _import.scss\n        accordion.scss\n        alert.scss\n        …\n\n    theme/\n        _import.scss\n        accordion.scss\n        alert.scss\n        …\n\n    \u003Cspan class=\"hljs-comment\">&lt;!-- other uikit files, some of which we will import below --&gt;\u003C/span>\n    …\n\n\u003Cspan class=\"hljs-comment\">&lt;!-- in here, we now put all your customizations, divided by component --&gt;\u003C/span>\ntheme/\n\n    \u003Cspan class=\"hljs-comment\">&lt;!-- create 2 files for each component you customize --&gt;\u003C/span>\n    accordion.scss \u003Cspan class=\"hljs-comment\">&lt;!-- overwrite variables in here --&gt;\u003C/span>\n    accordion-mixins.scss \u003Cspan class=\"hljs-comment\">&lt;!-- use hooks in here --&gt;\u003C/span>\n\n    alert.scss\n    alert-mixins.scss\n\n    align.scss\n    align-mixins.scss\n\n    \u003Cspan class=\"hljs-comment\">&lt;!-- etc for all components you customize --&gt;\u003C/span>\n    …\n\n\u003Cspan class=\"hljs-comment\">&lt;!-- this is your entry point to compile scss --&gt;\u003C/span>\nsite.scss\n\u003C/code>\u003C/pre>\u003C/div>\u003Cp>The entry point for the Sass compiler is \u003Ccode>site.scss\u003C/code>. Here you compile all source files in the following order:\u003C/p>\n\u003Cdiv class=\"uk-margin-medium\">\u003Cpre>\u003Ccode>\u003Cspan class=\"hljs-comment\">// site.scss\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// 1. Your custom variables and variable overwrites.\u003C/span>\n\u003Cspan class=\"hljs-keyword\">@import\u003C/span> \u003Cspan class=\"hljs-string\">&quot;theme/accordion.scss&quot;\u003C/span>;\n\u003Cspan class=\"hljs-keyword\">@import\u003C/span> \u003Cspan class=\"hljs-string\">&quot;theme/alert.scss&quot;\u003C/span>;\n\u003Cspan class=\"hljs-keyword\">@import\u003C/span> \u003Cspan class=\"hljs-string\">&quot;theme/align.scss&quot;\u003C/span>;\n\u003Cspan class=\"hljs-comment\">// … import all\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// 2. Import default variables and available mixins.\u003C/span>\n\u003Cspan class=\"hljs-keyword\">@import\u003C/span> \u003Cspan class=\"hljs-string\">&quot;uikit/src/scss/variables.scss&quot;\u003C/span>;\n\u003Cspan class=\"hljs-keyword\">@import\u003C/span> \u003Cspan class=\"hljs-string\">&quot;uikit/src/scss/mixins.scss&quot;\u003C/span>;\n\n\u003Cspan class=\"hljs-comment\">// 3. Your custom mixin overwrites.\u003C/span>\n\u003Cspan class=\"hljs-keyword\">@import\u003C/span> \u003Cspan class=\"hljs-string\">&quot;theme/accordion-mixins.scss&quot;\u003C/span>;\n\u003Cspan class=\"hljs-keyword\">@import\u003C/span> \u003Cspan class=\"hljs-string\">&quot;theme/alert-mixins.scss&quot;\u003C/span>;\n\u003Cspan class=\"hljs-keyword\">@import\u003C/span> \u003Cspan class=\"hljs-string\">&quot;theme/align-mixins.scss&quot;\u003C/span>;\n\u003Cspan class=\"hljs-comment\">// … import all\u003C/span>\n\n\u003Cspan class=\"hljs-comment\">// 4. Import UIkit\u003C/span>\n\u003Cspan class=\"hljs-keyword\">@import\u003C/span> \u003Cspan class=\"hljs-string\">&quot;uikit/src/scss/uikit.scss&quot;\u003C/span>;\u003C/code>\u003C/pre>\u003C/div>\u003Cp>Now you can compile \u003Ccode>site.scss\u003C/code> and the resulting CSS will include all your customizations.\u003C/p>\n\u003Cp>\u003Cspan class=\"uk-label\">Note\u003C/span> You can further extend this setup by replacing part &quot;4.&quot; with single import statements from the UIkit source. You can then omit some components you do not use to produce smaller CSS. Just copy from \u003Ca href=\"https://github.com/uikit/uikit/blob/develop/src/scss/components/_import.scss\">src/scss/components/_import.scss\u003C/a> and make sure to preserve the correct import order.\u003C/p>\n","Sass"],"uses":{"params":["slug"]}}]}
