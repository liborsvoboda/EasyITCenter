# enum
snippet enum
	enum ${1:true} {
		${0}
	}
#
# interface
snippet interface
	interface ${1:true} {
		${0}
	}
#
# class
snippet class
	class ${1:true} {
		${0}
	}
#
# module
snippet module
	class ${1:true} {
		${0}
	}
#
# namepsace
snippet namespace
	namespace ${1:true} {
		${0}
	}
#
# import syntax
snippet import
	import ${1:module_name} = require('${2:module_path}');
#
# constructor
snippet ctor
	public constructor(${1:argument}) {
		${2:// body...}
	}
#
# public function
snippet func
	public ${1:function_name}(${2:argument}) {
		${3:// body...}
	}
#
# private function
snippet pfunc
	private ${1:function_name}(${2:argument}) {
		${3:// body...}
	}
#
# protected function
snippet ptfunc
	protected ${1:function_name}(${2:argument}) {
		${3:// body...}
	}
#
#property with get and set
snippet prop
	private _${1:field_name}: ${2:field_type};
	get $1(): $2 { return this._$1;	}
	set $1(value: $2) {	this._$1 = value; }
#
#
################# LOGIC CONSTRUCTS
#
# if
snippet if
	if (${1:true}) {
		${0}
	}
#
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
#
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
#
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
#
# while (...) {...}
snippet while
	while (${1:/* condition */}) {
		${0:/* code */}
	}
#
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});

# for (...) {...}
snippet for
	for (let ${1:i}:number = 0; $1 < ${2:length}; $1++) {
		$0
	}

# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (let ${1:i}:number = ${2:length} - 1; $1 >= 0; $1--) {
		$0
	}

# for (property in object ) { ... }
snippet fori
	for (let ${1:el} in ${2:Things}) {
		${0:$2[$1]}
	}

# forof (property in object ) { ... }
snippet forof
	for (let ${1:el} of ${2:Things}) {
		$0
	}

# try
snippet try
	try {
		${0:/* code */}
	} catch (e) { throw e; }
#
#
#
########## OTHER THINGS
#
# setTimeout function
snippet setTimeout
regex /\b/st|timeout|setTimeo?u?t?/
	setTimeout(() => ${3:$TM_SELECTED_TEXT}, ${1:10});
#
# console.log
snippet cl
	console.log(${1});
#
#
# Get Elements
snippet gett
	getElementsBy${1:TagName}('${2}')${3}
#
# Get Element
snippet get
	getElementBy${1:Id}('${2}')${3}
#
#
#
# docstring
snippet /**
	/**
	 * ${1:description}
	 *
	 */
#
snippet @par
regex /^\s*\*\s*/@(para?m?)?/
	@param {${1:type}} ${2:name} ${3:description}
snippet @ret
	@return {${1:type}} ${2:description}
#
# JSON.parse
snippet jsonp
	JSON.parse(${1:jstr});
#
# JSON.stringify
snippet jsons
	JSON.stringify(${1:object});