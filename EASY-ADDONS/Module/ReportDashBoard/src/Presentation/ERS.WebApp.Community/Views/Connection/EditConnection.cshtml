@model ConnectionViewModel
@{
    ViewData["Title"] = "Edit Connection";
}

<div class="row justify-content-center " style="padding-top: 20px">
    <div class="col-lg-6">
        @if (Globals.AllowAddDemoConnection && string.IsNullOrWhiteSpace(Model.ConnectionString)) {
            <div class="card">
                <div class="card-body">
                    <div>
                        If you don't know how to set up the connection or you just want to try the service first
                        you can <a asp-action="EditConnection"
                                          asp-controller="Connection" asp-route-usedemo="true">use our demo connection</a>. <br />
                        It includes a few sample reports as well.
                    </div>
                    <div style="text-align:center;margin-top:10px;">
                        <a asp-action="EditConnection"
                           asp-controller="Connection" 
                           asp-route-usedemo="true" class="btn btn-primary">Use demo connection</a>
                    </div>
                </div>
            </div>
        }
        <div class="card">
            <div class="card-body">
                <ul class="nav nav-tabs" id="settingsTab" role="tablist">
                    <li class="nav-item" role="presentation">
                        <a class="nav-link active" id="main-tab" data-toggle="tab"
                           href="#main" role="tab" aria-controls="main" aria-selected="true">Main</a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" id="advanced-tab" data-toggle="tab"
                           href="#advanced" role="tab" aria-controls="advanced" aria-selected="false">Advanced</a>
                    </li>
                </ul>
                <form id="EditConnectionForm" asp-controller="Connection" asp-action="EditConnection" method="post" class="form-horizontal">
                    <div asp-validation-summary="All" class="text-danger"></div>
                    <div class="tab-content" id="settingsTabContent" style="border: none">
                        <div class="tab-pane fade show active" id="main" role="tabpanel" aria-labelledby="main-tab" style="min-height: 430px">
                            <span asp-validation-for="Name" class="text-danger"></span>
                            <div class="form-group">
                                <label asp-for="Name" class="col-form-label"></label>
                                <input asp-for="Name" class="form-control" autofocus />
                            </div>
                            <div class="form-group">
                                <label asp-for="Type" class="col-form-label"></label>
                                @Html.DropDownListFor(Model => Model.Type, ViewBag.Databases as SelectList, new { @class = "form-control", @id = "db-type-select" })
                            </div>
                            <span asp-validation-for="ConnectionString" class="text-danger"></span>
                            <div class="form-group">
                                <label asp-for="ConnectionString" class="col-form-label"></label>
                                <textarea asp-for="ConnectionString" class="form-control" rows="5" id="ConnectionStringText"></textarea>
                                <p class="text-muted">Don't know how to get connection string for your DB? Use <a href="https://ConnectionStrings.com" target="_blank">ConnectionStrings.com</a> web-site to find out<p>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="advanced" role="tabpanel" aria-labelledby="advanced-tab" style="min-height: 430px">
                            <div class="form-check" style="display: none" id="legacy-paging">
                                <input class="form-check-input" type="checkbox" asp-for="LegacyPaging" />
                                <label class="form-check-label" asp-for="LegacyPaging"></label>
                                <p class="text-muted" id="legacy-paging-description"></p>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" asp-for="SortByName" />
                                <label class="form-check-label" asp-for="SortByName"></label>
                                <p class="text-muted">Value indicating whether it is required to sort tables and fields by name</p>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" asp-for="HideKeyFields" />
                                <label class="form-check-label" asp-for="HideKeyFields"></label>
                                <p class="text-muted">Value indicating whether it is required to hide key fields</p>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" asp-for="PrettifyNames" />
                                <label class="form-check-label" asp-for="PrettifyNames"></label>
                                <p class="text-muted">Value indicating whether it is required to prettify table and column names</p>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" asp-for="SplitTablesOnMultiReference" />
                                <label class="form-check-label" asp-for="SplitTablesOnMultiReference"></label>
                                <p class="text-muted">Split one table on two (or more) if there are multi-references between two tables</p>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" asp-for="ReplaceToSingularNames" />
                                <label class="form-check-label" asp-for="ReplaceToSingularNames"></label>
                                <p class="text-muted">
                                    Value indicating whether replace the name of the table in plural form
                                    (like Customers) to it singular variant (Customer) when an entity is created by
                                    some table.
                                </p>
                            </div>
                            <div class="form-group">
                                <label class="col-form-label" asp-for="Schemas"></label>
                                <input class="form-control" asp-for="Schemas" />
                                <p class="text-muted">Specifies which schemas will be used during loading the model</p>
                            </div>
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary" id="SaveConnectionButton">Save</button>


                    </div>
                </form>
            </div>
        </div>
    </div>
    <!--/.col-->
</div>
<!--/.row-->

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <partial name="_EasyDataScriptsPartial" />
    <script>
        $("#EditConnectionForm").submit(function(event) {
            if (!event.isPropagationStopped()) {
                easydata.ui.dialogs.openProgress({
                    title: "Updating the connection...",
                    content: "The connection is being updated. It can take a while."
                });
            }
        });

        function updateLegacyPaging(dbType) {
            var dbTypeDesc = {
                MsSqlServer: 'This option is required for and older version than MS SQL Server 2011',
                Oracle: 'This option is required for and older version than Oracle 12c'
            }

            if (dbTypeDesc[dbType]) {
                $('#legacy-paging-description').text(dbTypeDesc[dbType]);
                $('#legacy-paging').show();
            }
            else {
                $('#legacy-paging').hide();
            }
        }

        $('#db-type-select').change(function () {
                updateLegacyPaging($(this).val());
        });

        $('#ConnectionStringText').on('input', function () {
            $('#SaveConnectionButton').prop('disabled', !$(this).val())
        });

        $(document).ready(function () {
            updateLegacyPaging('@Model.Type.ToString()');

            $('#SaveConnectionButton').prop('disabled', !$('#ConnectionStringText').val())
        });

    </script>
}
